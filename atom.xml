<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SN1987A</title>
  
  <subtitle>LAYのBLOG</subtitle>
  <link href="http://sn1987a-1.github.io/atom.xml" rel="self"/>
  
  <link href="http://sn1987a-1.github.io/"/>
  <updated>2023-09-24T03:47:34.736Z</updated>
  <id>http://sn1987a-1.github.io/</id>
  
  <author>
    <name>SN1987A</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ML算法：XGBoost</title>
    <link href="http://sn1987a-1.github.io/posts/f54e13d4.html"/>
    <id>http://sn1987a-1.github.io/posts/f54e13d4.html</id>
    <published>2023-11-28T12:48:34.000Z</published>
    <updated>2023-09-24T03:47:34.736Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h2><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>本实验要求学习XGBoost模型的原理，并实现该模型，以及在数据集上完成训练和测试。</p><h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><p>XGBoost的基本原理就是以决策树作为基学习器的加法模型，每棵树根据前t个模型的输出计算节点的权重，最终的输出为：</p><script type="math/tex; mode=display">y_i^{(t)}=∑^t_{k=1}f_k (x_i )=y _i^{(t-1)}+f_t (x_i )</script><p>本实验的问题模型为回归问题，即$𝑙𝑜𝑠𝑠(𝑦_𝑖,𝑦 _𝑖^{(𝑡)} )=(𝑦_𝑖−\hat y _𝑖^{(𝑡)} )^2$。</p><p>对于损失loss，记 $g_i$ 为一阶导数，$h_i$ 为二阶导数，即$g_i=\frac{\partial\ loss(y_i,y _i^{(t-1)})}{\partial\  y _i^{(t-1) } }=2(\hat y^{t-1}-y)$, $h_i=\frac{\partial^2 loss(y_i,y _i^{(t-1)} )}{\partial \ (y _i^{(t-1)} )^2 }=2\\ $。</p><p>在训练第t棵决策树时,目标函数为$Obj^{(t)}=∑_{i=1}^n[g_i f_t (x_i )+\frac12 h_i f_t^2 (x_i)]+penalty(f_t )$</p><p>对于一棵决策树，其惩罚为：</p><script type="math/tex; mode=display">penalty(f)=\gamma\cdot T+\frac12\lambda\cdot\|w\|^2</script><p>将分配到第 $j$ 个叶子节点的样本用 $I_j$ 表示，即 $I_j=\{i|q(x_i )=j\} (1≤j≤T)$，在树结构确定时可以进行如下优化：</p><script type="math/tex; mode=display">\begin{split}𝑂𝑏𝑗^{(𝑡)}&=∑_{𝑗=1}^𝑇[(∑_{i∈𝐼_𝑗}𝑔_𝑖 )w_j+\frac12(\sum_{i\in I_j}h_i+\lambda)w^2_j]+\gamma T\end{split}\\记 G_j=∑_{i∈𝐼_𝑗}𝑔_𝑖 , H_j=∑_{i∈𝐼_𝑗}h_𝑖 \\ Obj^{(t)}=\sum_{j=1}^T[G_jw_j+\frac12(H_j+\lambda)w_j^2]+\gamma T</script><p>求解$w$     :$w_j^*=-\frac{G_j}{H_j+\lambda}$，此时决策树的得分：$Obj^{(t)}=-\frac12\sum^{T}_{j=1}\frac{G_j^2}{H_j+\lambda}+\gamma T$</p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="读取数据和数据处理"><a href="#读取数据和数据处理" class="headerlink" title="读取数据和数据处理"></a>读取数据和数据处理</h4><p>数据文件中的各项数据均不含有NULL项，无需进行特殊处理。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.data'</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'train.data'</span><span class="token punctuation">,</span>names<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>df<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#重新读取数据，防止将第一行的数据识别为索引</span>Data<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>df<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0.3</span><span class="token operator">*</span>Data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Data<span class="token operator">=</span>np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>Data<span class="token punctuation">,</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>Data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>T<span class="token punctuation">]</span>num<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span>Data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Data<span class="token operator">=</span>Data<span class="token punctuation">[</span>num<span class="token punctuation">]</span>test_data<span class="token operator">=</span>Data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>train_data<span class="token operator">=</span>Data<span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#按照7：3的比例划分训练集和测试集</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在数据集的基础上添加一列0，用来存储每轮训练结束后的预测值，即<code>data=[:,-2]</code>代表真实值,<code>data[:,-1]</code>代表预测值。</p><h4 id="回归树模型"><a href="#回归树模型" class="headerlink" title="回归树模型"></a>回归树模型</h4><p>超参数:</p><p>maxdepth=4,minscore=0,minindex=3,lambda=800,gamma=1e-7</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">RegressionTree</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">:</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>初始化        <span class="token keyword">def</span> <span class="token function">Leaf</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#叶节点</span>        G<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        H<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token operator">-</span>G<span class="token operator">/</span><span class="token punctuation">(</span>H<span class="token operator">+</span>self<span class="token punctuation">.</span>lam<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">Obj</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#计算得分</span>        G<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        H<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        obj<span class="token operator">=</span><span class="token operator">-</span>G<span class="token operator">**</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token operator">/</span><span class="token punctuation">(</span>H<span class="token operator">+</span>self<span class="token punctuation">.</span>lam<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>gamma        <span class="token keyword">return</span> obj    <span class="token keyword">def</span> <span class="token function">split</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span>num<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#根据num和val找到最佳划分</span>        lchild<span class="token operator">=</span>data<span class="token punctuation">[</span>np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>num<span class="token punctuation">]</span><span class="token operator">&lt;=</span>val<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        rchild<span class="token operator">=</span>data<span class="token punctuation">[</span>np<span class="token punctuation">.</span>nonzero<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>num<span class="token punctuation">]</span><span class="token operator">&gt;</span>val<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> lchild<span class="token punctuation">,</span>rchild    <span class="token keyword">def</span> <span class="token function">ChooseSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        对样本集进行划分，找到最佳划分        """</span>        <span class="token keyword">if</span> data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span>self<span class="token punctuation">.</span>minindex <span class="token keyword">or</span> depth<span class="token operator">&gt;</span>self<span class="token punctuation">.</span>maxdepth<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>Leaf<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>Leaf<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        pobj<span class="token operator">=</span>self<span class="token punctuation">.</span>Obj<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        maxscore<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span>        maxnum<span class="token operator">=</span><span class="token number">0</span>        maxval<span class="token operator">=</span><span class="token number">0</span>        n<span class="token punctuation">,</span>m<span class="token operator">=</span>data<span class="token punctuation">.</span>shape        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            n<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>T<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                lchild<span class="token punctuation">,</span>rchild<span class="token operator">=</span>self<span class="token punctuation">.</span>split<span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lchild<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>rchild<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                score<span class="token operator">=</span><span class="token operator">-</span>self<span class="token punctuation">.</span>Obj<span class="token punctuation">(</span>lchild<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>Obj<span class="token punctuation">(</span>rchild<span class="token punctuation">)</span><span class="token operator">+</span>pobj                <span class="token keyword">if</span> score<span class="token operator">&gt;</span>maxscore<span class="token punctuation">:</span>                    maxscore<span class="token operator">=</span>score                    maxnum<span class="token operator">=</span>i                    maxval<span class="token operator">=</span>j        <span class="token keyword">if</span> maxscore<span class="token operator">&lt;=</span>self<span class="token punctuation">.</span>minscore<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>Leaf<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        <span class="token keyword">return</span> maxnum<span class="token punctuation">,</span>maxval    <span class="token keyword">def</span> <span class="token function">CreateTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span>depth<span class="token punctuation">)</span><span class="token punctuation">:</span>        num<span class="token punctuation">,</span>val<span class="token operator">=</span>self<span class="token punctuation">.</span>ChooseSplit<span class="token punctuation">(</span>data<span class="token punctuation">,</span>depth<span class="token punctuation">)</span>        <span class="token keyword">if</span> num<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> val        lchild<span class="token punctuation">,</span>rchild<span class="token operator">=</span>self<span class="token punctuation">.</span>split<span class="token punctuation">(</span>data<span class="token punctuation">,</span>num<span class="token punctuation">,</span>val<span class="token punctuation">)</span>        Tree<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token triple-quoted-string string">"""        如果不是叶节点，则以字典形式建树，否则节点只存储叶子的值        """</span>        Tree<span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token operator">=</span>num        Tree<span class="token punctuation">[</span><span class="token string">'val'</span><span class="token punctuation">]</span><span class="token operator">=</span>val        Tree<span class="token punctuation">[</span><span class="token string">'lchild'</span><span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>CreateTree<span class="token punctuation">(</span>lchild<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        Tree<span class="token punctuation">[</span><span class="token string">'rchild'</span><span class="token punctuation">]</span><span class="token operator">=</span>self<span class="token punctuation">.</span>CreateTree<span class="token punctuation">(</span>rchild<span class="token punctuation">,</span>depth<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，决策树的非叶子节点有属性：</p><ul><li>num，val：在该结点处选取第num个属性值进行划分，最佳划分点为val</li><li>lchild，rchild：分别指向第num个属性小于等于val和大于val的子树</li></ul><p>对于单棵决策树的停止策略：</p><ul><li>maxdepth：每次划分记录树的高度，深度为maxdepth时直接当作叶子节点</li><li>minindex：每次划分时，如果当前节点的样本数小于minindex，则直接作为叶子节点</li><li>minscore：若每次划分的最佳划分的得分小于等于minscore时，直接作为叶子节点</li></ul><p>优化ChooseSpilt函数。为了减少每次对得分Obj的计算时存在的重复计算，将函数的核心部分做以下修改：（将数据按照当前属性进行排序，每次选取的属性值依次增大，因此左右两孩子的g，h线性增/减，对于左孩子：$\Delta g=\sum _{data[j,i]=val}(data1[j,-1]-data1[j,-2])<em>2.0$,$\Delta h=2</em>\sum_{data[j,i]=val}$）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">gl<span class="token operator">=</span><span class="token number">0</span>hl<span class="token operator">=</span><span class="token number">0</span>gr<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>hr<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>ndata1<span class="token operator">=</span>data<span class="token punctuation">[</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>argsort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    gl<span class="token operator">+=</span><span class="token punctuation">(</span>data1<span class="token punctuation">[</span>j<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>data1<span class="token punctuation">[</span>j<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2.0</span>    gr<span class="token operator">-=</span><span class="token punctuation">(</span>data1<span class="token punctuation">[</span>j<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>data1<span class="token punctuation">[</span>j<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2.0</span>    hl<span class="token operator">+=</span><span class="token number">2</span>    hr<span class="token operator">-=</span><span class="token number">2</span>    <span class="token keyword">if</span> data1<span class="token punctuation">[</span>j<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">==</span>data1<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>         <span class="token keyword">continue</span>    obj1<span class="token operator">=</span><span class="token operator">-</span>gl<span class="token operator">**</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token operator">/</span><span class="token punctuation">(</span>hl<span class="token operator">+</span>self<span class="token punctuation">.</span>lam<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>gamma    obj2<span class="token operator">=</span><span class="token operator">-</span>gr<span class="token operator">**</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token operator">/</span><span class="token punctuation">(</span>hr<span class="token operator">+</span>self<span class="token punctuation">.</span>lam<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>gamma    score<span class="token operator">=</span>pobj<span class="token operator">-</span>obj1<span class="token operator">-</span>obj2    <span class="token keyword">if</span> score<span class="token operator">&gt;</span>maxscore<span class="token punctuation">:</span>        maxscore<span class="token operator">=</span>score        maxnum<span class="token operator">=</span>i        maxval<span class="token operator">=</span>data1<span class="token punctuation">[</span>j<span class="token punctuation">,</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="XGBoost模型"><a href="#XGBoost模型" class="headerlink" title="XGBoost模型"></a>XGBoost模型</h4><p>超参数：treenum=30</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">XGBoost</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span>treenum<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">isTree</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>tree<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#判断节点的类型，非叶子节点为字典类型，叶子节点为float类型</span>        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'dict'</span>            <span class="token keyword">def</span> <span class="token function">find</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">,</span>i<span class="token punctuation">,</span>tree<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#对于单个样本，找到所在决策树的位置</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>isTree<span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>i<span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token string">"num"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>tree<span class="token punctuation">[</span><span class="token string">'val'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token string">'lchild'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>data<span class="token punctuation">,</span>i<span class="token punctuation">,</span>tree<span class="token punctuation">[</span><span class="token string">'rchild'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> tree        <span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        训练函数，其中共训练了treenum棵树，调用RegressionTree，并计算损失和相关系数        """</span>        loss<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        r2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        va<span class="token operator">=</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>treenum<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            tree<span class="token operator">=</span>Rtree<span class="token punctuation">.</span>CreateTree<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">,</span>j<span class="token punctuation">,</span>tree<span class="token punctuation">)</span>            r<span class="token operator">=</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>            r2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>r<span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span>va<span class="token punctuation">)</span>            lo<span class="token operator">=</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>self<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span>            loss<span class="token punctuation">.</span>append<span class="token punctuation">(</span>lo<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>forest<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tree<span class="token punctuation">)</span>        <span class="token keyword">return</span> loss<span class="token punctuation">,</span>r2            <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>        m<span class="token punctuation">,</span>n<span class="token operator">=</span>data<span class="token punctuation">.</span>shape        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>treenum<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>                test_data<span class="token punctuation">[</span>j<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>self<span class="token punctuation">.</span>find<span class="token punctuation">(</span>data<span class="token punctuation">,</span>j<span class="token punctuation">,</span>self<span class="token punctuation">.</span>forest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="训练模型并实现损失函数可视化"><a href="#训练模型并实现损失函数可视化" class="headerlink" title="训练模型并实现损失函数可视化"></a>训练模型并实现损失函数可视化</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">Rtree<span class="token operator">=</span>RegressionTree<span class="token punctuation">(</span><span class="token punctuation">)</span>boost<span class="token operator">=</span>XGBoost<span class="token punctuation">(</span>train_data<span class="token punctuation">)</span>loss<span class="token punctuation">,</span>r2<span class="token operator">=</span>boost<span class="token punctuation">.</span>fit<span class="token punctuation">(</span><span class="token punctuation">)</span>boost<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>loss<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">u"times"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">u"loss-value"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模型预测并评估结果"><a href="#模型预测并评估结果" class="headerlink" title="模型预测并评估结果"></a>模型预测并评估结果</h4><p>结果评估指标：</p><ul><li>$RMSE=\sqrt{\frac1n\sum_{i=1}^n{(y-\hat y)^2}}$</li><li>$R2=1-\frac{RMSE}{var(y)}$</li><li>误差分布直方图</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token operator">=</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">-</span>test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span>test_data<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r2<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>r<span class="token operator">**</span><span class="token number">2</span><span class="token operator">/</span>np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>res<span class="token operator">=</span>test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>res<span class="token operator">=</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>res<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>hist<span class="token punctuation">(</span>res<span class="token punctuation">,</span> bins<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">,</span> rwidth<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span> density<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">u"data"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">u"num"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>test_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>r2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验结果与分析"><a href="#实验结果与分析" class="headerlink" title="实验结果与分析"></a>实验结果与分析</h3><p>（调参过程略）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;XGBoost&quot;&gt;&lt;a href=&quot;#XGBoost&quot; class=&quot;headerlink&quot; title=&quot;XGBoost&quot;&gt;&lt;/a&gt;XGBoost&lt;/h2&gt;&lt;h3 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="机器学习" scheme="http://sn1987a-1.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>ML算法：SVM</title>
    <link href="http://sn1987a-1.github.io/posts/7ab554ae.html"/>
    <id>http://sn1987a-1.github.io/posts/7ab554ae.html</id>
    <published>2023-11-10T12:48:34.000Z</published>
    <updated>2023-09-24T03:45:05.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h2><h3 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h3><p>学习支持向量机的原理，用两种不同的算法寻找支持向量机的解，并完成比较。</p><h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><p>对于给定样本集，SVM的任务就是基于样本集在样本空间中确定一个划分超平面，将不同类别的样本分开，即找到w,b使得$y(w^T+b)\ge1$成立，并实现最大化间隔，即最大化$||w||^{-1}$。为求解w的最优解，，由于实验中的数据并不完全是线性可分的，因此采用硬间隔的方法求解存在困难，本次实验分别采用梯度下降法和SMO（序列最小优化算法）来求解。</p><p>SVM的任务：</p><script type="math/tex; mode=display">min_W||w||^2/2\\s.t. y_i(w^T)\phi(x_i)+b)\ge 1,i=1,2,...m</script><ul><li>梯度下降法</li></ul><p>SVM中的梯度下降方法也类似于逻辑回归中的梯度下降原理，根据迭代的值计算损失和梯度更新参数，每次迭代过程中，计算当前的$y*(w^T+b)$的值，将值小于一的样本进行累加计算梯度，根据梯度和学习率更新w和b。</p><ul><li>SMO</li></ul><p>SMO算法是John Platt在《Sequential Minimal Optimization: A Fast Algorithm for Training Support Vector Machines》一文中提出的算法，对于解决稀疏数据集上的问题有着很高的效率。已知SVM的对偶问题为：</p><script type="math/tex; mode=display">argmax\sum _\alpha ^N \alpha _i-1/2*\sum_{i=1}^N\sum_{j=1}^Ny_iy_j\alpha_i\alpha_jx_i^Tx_j\\ s.t.\alpha_i\ge0,\sum_{i=1}^T\alpha_iy_i=0</script><p>其中，我们要对$（\alpha_1,\alpha_2,…,\alpha_N)$进行优化，但数据集较大时，直接对N个参数进行优化的效率将很低，因此采用SMO算法求解，SMO的原理是将N个参数的优化问题转化为多个子问题，其中每个子问题只对两个参数进行优化，每次计算并选取一对最优的$(\alpha_i,\alpha_j)$更新对应的$\alpha$值。</p><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><ul><li>损失函数$loss=1/2*w^tw+\sum_{i=1}^mmax{0,1-y_i(wx_i-b)}$</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">mar<span class="token operator">=</span>y<span class="token operator">*</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>self<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>b<span class="token punctuation">)</span>lo<span class="token operator">=</span><span class="token number">0.5</span><span class="token operator">*</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>self<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">-</span> mar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> lo<span class="token operator">&lt;</span>tol <span class="token punctuation">:</span>    <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>损失函数的梯度$\Delta=\lambda w-\sum{i=1}^mI|wx_i+b&lt;1|*x_iy_i$，根据梯度更新w和b</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>w<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>self<span class="token punctuation">.</span>w <span class="token operator">-=</span> lr <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>self<span class="token punctuation">.</span>b <span class="token operator">-=</span> lr <span class="token operator">*</span> <span class="token operator">-</span>y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SMO"><a href="#SMO" class="headerlink" title="SMO"></a>SMO</h4><ul><li>预先存储部分数据，提高运算效率</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">self<span class="token punctuation">.</span>m<span class="token operator">=</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>self<span class="token punctuation">.</span>alpha<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#每次迭代更新</span>self<span class="token punctuation">.</span>err<span class="token operator">=</span><span class="token operator">-</span>self<span class="token punctuation">.</span>y<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#每次迭代更新</span><span class="token comment">#以下是为了方便计算loss的值，不需要计算loss值时无需计算，更节省时间和内存</span>self<span class="token punctuation">.</span>kappa_x<span class="token operator">=</span>self<span class="token punctuation">.</span>kappa<span class="token punctuation">(</span>self<span class="token punctuation">.</span>X<span class="token punctuation">,</span>self<span class="token punctuation">.</span>X<span class="token punctuation">)</span>self<span class="token punctuation">.</span>mulyx<span class="token operator">=</span>np<span class="token punctuation">.</span>outer<span class="token punctuation">(</span>self<span class="token punctuation">.</span>y<span class="token punctuation">,</span>self<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">*</span>self<span class="token punctuation">.</span>kappa_xself<span class="token punctuation">.</span>outer_a<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>m<span class="token punctuation">,</span>self<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#每次迭代更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>损失函数$\sum _\alpha ^N \alpha _i-1/2*\sum_{i=1}^N\sum_{j=1}^Ny_iy_j\alpha_i\alpha_jx_i^Tx_j$</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">0.5</span><span class="token operator">*</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>mulyx<span class="token operator">*</span>self<span class="token punctuation">.</span>outer_a<span class="token punctuation">)</span><span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>alpha<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>选取合适的$(\alpha _i,\alpha_j)$<ul><li>统计误差不为0的索引值，有不为零的误差时统计误差</li><li>没有为零误差时，随机选取$\alpha$</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">  <span class="token keyword">if</span> arrlen<span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>t<span class="token operator">=</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>err<span class="token operator">-</span>ei<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> t<span class="token operator">!=</span>i <span class="token keyword">and</span> self<span class="token punctuation">.</span>step<span class="token punctuation">(</span>t<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token number">1</span>  arr<span class="token operator">=</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>alpha<span class="token operator">!=</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>alpha<span class="token operator">!=</span>self<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  ra<span class="token operator">=</span>np<span class="token punctuation">.</span>roll<span class="token punctuation">(</span>arr<span class="token punctuation">,</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>self<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">for</span> j <span class="token keyword">in</span> ra<span class="token punctuation">:</span><span class="token keyword">if</span> j<span class="token operator">!=</span>i <span class="token keyword">and</span> self<span class="token punctuation">.</span>step<span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token number">1</span>  ra<span class="token operator">=</span>np<span class="token punctuation">.</span>roll<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>self<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>self<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> ra<span class="token punctuation">:</span><span class="token keyword">if</span> j<span class="token operator">!=</span>i <span class="token keyword">and</span> self<span class="token punctuation">.</span>step<span class="token punctuation">(</span>j<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>  <span class="token keyword">return</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>每次迭代更新数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> y1 <span class="token operator">!=</span>y2<span class="token punctuation">:</span><span class="token comment">#取L，H</span>          t1<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a2<span class="token operator">-</span>a1<span class="token punctuation">)</span>          t2<span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>a2<span class="token operator">-</span>a1<span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>c      <span class="token keyword">else</span><span class="token punctuation">:</span>          t1<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>c<span class="token punctuation">,</span>a1<span class="token operator">+</span>a2<span class="token punctuation">)</span><span class="token operator">-</span>self<span class="token punctuation">.</span>c          t2<span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>c<span class="token punctuation">,</span>a1<span class="token operator">+</span>a2<span class="token punctuation">)</span>      <span class="token keyword">if</span> t1<span class="token operator">==</span>t2<span class="token punctuation">:</span>          <span class="token keyword">return</span> <span class="token number">0</span>      t3<span class="token operator">=</span>k11<span class="token operator">+</span>k22<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>k12      <span class="token keyword">if</span> t3<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token comment">#求解\alpha新值</span>          al2 <span class="token operator">=</span> a2<span class="token operator">+</span>y2<span class="token operator">*</span><span class="token punctuation">(</span>e1<span class="token operator">-</span>e2<span class="token punctuation">)</span><span class="token operator">/</span>t3          <span class="token keyword">if</span> al2<span class="token operator">&lt;</span>t1<span class="token punctuation">:</span>              al2<span class="token operator">=</span>t1          <span class="token keyword">elif</span> al2<span class="token operator">&gt;</span>t2<span class="token punctuation">:</span>              al2<span class="token operator">=</span>t2      <span class="token keyword">else</span><span class="token punctuation">:</span>          <span class="token comment">#意外情况,很少出现</span>          self<span class="token punctuation">.</span>alpha<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token operator">=</span>t1          loss1<span class="token operator">=</span>self<span class="token punctuation">.</span>calloss<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>alpha<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token operator">=</span>t2          loss2<span class="token operator">=</span>self<span class="token punctuation">.</span>calloss<span class="token punctuation">(</span><span class="token punctuation">)</span>          self<span class="token punctuation">.</span>alpha<span class="token punctuation">[</span>i2<span class="token punctuation">]</span><span class="token operator">=</span>a2          <span class="token keyword">if</span> loss1<span class="token operator">-</span>loss2<span class="token operator">&gt;</span>self<span class="token punctuation">.</span>eps<span class="token punctuation">:</span>              al2<span class="token operator">=</span>t2          <span class="token keyword">elif</span> loss2<span class="token operator">-</span>loss1<span class="token operator">&gt;</span>self<span class="token punctuation">.</span>eps<span class="token punctuation">:</span>              al2<span class="token operator">=</span>t1          <span class="token keyword">else</span><span class="token punctuation">:</span>              al2<span class="token operator">=</span>a2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> al2<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">:</span>    al2<span class="token operator">=</span><span class="token number">0.0</span><span class="token comment">#截断处理</span>al2<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>al2<span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">)</span>al2<span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>al2<span class="token punctuation">,</span>self<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token keyword">if</span> np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>al2<span class="token operator">-</span>a2<span class="token punctuation">)</span><span class="token operator">&lt;</span>self<span class="token punctuation">.</span>eps<span class="token operator">*</span><span class="token punctuation">(</span>al2 <span class="token operator">+</span> a2 <span class="token operator">+</span> self<span class="token punctuation">.</span>eps<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">0</span>al1<span class="token operator">=</span>a1<span class="token operator">+</span><span class="token punctuation">(</span>a2<span class="token operator">-</span>al2<span class="token punctuation">)</span><span class="token operator">*</span>y1<span class="token operator">*</span>y2b1 <span class="token operator">=</span> e1 <span class="token operator">+</span> y1<span class="token operator">*</span><span class="token punctuation">(</span>al1 <span class="token operator">-</span> a1<span class="token punctuation">)</span><span class="token operator">*</span>k11 <span class="token operator">+</span> y2<span class="token operator">*</span><span class="token punctuation">(</span>al2 <span class="token operator">-</span> a2<span class="token punctuation">)</span><span class="token operator">*</span>k12 <span class="token operator">+</span> self<span class="token punctuation">.</span>bb2 <span class="token operator">=</span> e2 <span class="token operator">+</span> y1<span class="token operator">*</span><span class="token punctuation">(</span>al1 <span class="token operator">-</span> a1<span class="token punctuation">)</span><span class="token operator">*</span>k12 <span class="token operator">+</span> y2<span class="token operator">*</span><span class="token punctuation">(</span>al2 <span class="token operator">-</span> a2<span class="token punctuation">)</span><span class="token operator">*</span>k22 <span class="token operator">+</span> self<span class="token punctuation">.</span>b<span class="token comment">#根据以上的al1，al2，b1，b2更新参数的值：b,alpha,err</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迭代<ul><li>change：上一轮迭代中发生改变的数目</li><li>entire：是否对全部的参数进行检查</li><li>ep:记录迭代次数，迭代次数到最大时退出循环</li></ul></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> change<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">or</span> entire<span class="token punctuation">:</span>            change<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">if</span> entire <span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>examine<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                        change<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                ra<span class="token operator">=</span>np<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>alpha<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>alpha<span class="token operator">!=</span>self<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> ra<span class="token punctuation">:</span>                    <span class="token keyword">if</span> self<span class="token punctuation">.</span>examine<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                        change<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ep<span class="token operator">&gt;</span>self<span class="token punctuation">.</span>max_iters<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> entire<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                entire<span class="token operator">=</span><span class="token number">0</span>            <span class="token keyword">elif</span> change<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                entire<span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数据处理，预测和分析"><a href="#数据处理，预测和分析" class="headerlink" title="数据处理，预测和分析"></a>数据处理，预测和分析</h4><p>本次实验对训练集和测试集按照8：2进行划分：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">mu <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X_norm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>         sigma <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>X_norm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    X_norm<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>X_norm<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">-</span>mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>sigma<span class="token punctuation">[</span>i<span class="token punctuation">]</span>y<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y<span class="token punctuation">)</span>num<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>X_norm<span class="token operator">=</span>X_norm<span class="token punctuation">[</span>num<span class="token punctuation">]</span>y<span class="token operator">=</span>y<span class="token punctuation">[</span>num<span class="token punctuation">]</span>a<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>X_test<span class="token operator">=</span>X_norm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>X_train<span class="token operator">=</span>X_norm<span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>y_test<span class="token operator">=</span>y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y_train<span class="token operator">=</span>y<span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预测函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> m<span class="token punctuation">,</span>n<span class="token operator">=</span>X<span class="token punctuation">.</span>shape<span class="token comment">##SMO: p=np.dot(self.kappa(X, self.X),self.alpha*self.y) - self.b</span><span class="token comment">##GD: p=np.dot(X,self.w)+self.b</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>     ans<span class="token operator">=</span>np<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>     res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>损失曲线：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss<span class="token operator">=</span>model2<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>loss<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">u"times"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">u"loss-value"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据分析</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pred2 <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>y_test<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span> <span class="token keyword">and</span> pred2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span><span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y_test<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span> <span class="token keyword">and</span> pred2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span><span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">/</span>m<span class="token punctuation">)</span><span class="token comment">#SVM预测的准确率</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> pred1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>pred2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        i<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token operator">/</span>m<span class="token punctuation">)</span><span class="token comment">#SVM1，SVM2的预测相似率</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验结论和分析"><a href="#实验结论和分析" class="headerlink" title="实验结论和分析"></a>实验结论和分析</h3><h4 id="梯度下降法-1"><a href="#梯度下降法-1" class="headerlink" title="梯度下降法"></a>梯度下降法</h4><p>参数解释：</p><ul><li><p>X，训练集X</p></li><li><p>y，训练集</p></li><li><p>lr，学习率，默认为0.001</p></li><li><p>max_iters，最大迭代次数，默认为1000</p></li><li><p>tol，最小误差， 0.0001</p></li></ul><p>训练一次的损失曲线如下所示（数据规模为10000，维度为20，训练时间为41.2s），初始的loss值较大是训练时预设了w的值为随机生成<code>np.random.randn(col,1)</code>.</p><p>准确率：96.1%</p><p>可以看出梯度下降的收敛效果较好，在训练次数较低时损失函数显著降低，得到的结果准确率也较高。</p><p>而当学习率变大（改为lr=0.1)时，损失函数会发生震荡，导致预测的准确率降低</p><h4 id="SMO-1"><a href="#SMO-1" class="headerlink" title="SMO"></a>SMO</h4><p>参数解释：</p><ul><li>dim：数据的维度</li><li>c：松弛变量，默认为1.0</li><li>eps：容错率，默认为0.01</li><li>max_iters:最大迭代次数，默认为1000</li><li>kappa函数：选取的核函数类型，默认为linear</li></ul><p>训练一次的损失曲线（数据规模为2000，20维，训练次数1000，训练时间10s）</p><h4 id="梯度下降法和SMO的对比"><a href="#梯度下降法和SMO的对比" class="headerlink" title="梯度下降法和SMO的对比"></a>梯度下降法和SMO的对比</h4><p>总体来说，梯度下降法和SMO的准确率均在90%以上，收敛的速度都很快，对结果预测的相似度为97%，两种模型的训练效果均较好，梯度下降的准确率相对更高，训练过程相对更直观；SMO的优势在于每次只对最小的问题进行优化，问题规模小，占用的内存少，对硬件的要求低，对于不同的参数，或者较大或较小的数据集都有较好的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SVM&quot;&gt;&lt;a href=&quot;#SVM&quot; class=&quot;headerlink&quot; title=&quot;SVM&quot;&gt;&lt;/a&gt;SVM&lt;/h2&gt;&lt;h3 id=&quot;实验目标&quot;&gt;&lt;a href=&quot;#实验目标&quot; class=&quot;headerlink&quot; title=&quot;实验目标&quot;&gt;&lt;/a&gt;实验目</summary>
      
    
    
    
    <category term="机器学习" scheme="http://sn1987a-1.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>编译原理-LLVM IR语法</title>
    <link href="http://sn1987a-1.github.io/posts/615503d3.html"/>
    <id>http://sn1987a-1.github.io/posts/615503d3.html</id>
    <published>2023-10-17T12:48:34.000Z</published>
    <updated>2023-09-24T05:28:23.642Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题1-getelementptr"><a href="#问题1-getelementptr" class="headerlink" title="问题1: getelementptr"></a>问题1: getelementptr</h2><p>请给出 <code>IR.md</code> 中提到的两种 getelementptr 用法的区别,并稍加解释:</p><ul><li><p><code>%2 = getelementptr [10 x i32], [10 x i32]* %1, i32 0, i32 %0</code></p></li><li><p><code>%2 = getelementptr i32, i32* %1, i32 %0</code></p><p>两种GEP都是取数组中的特定元素的地址指针，区别在于（1）计算基础类型为数组指针，（2）中的计算基础类型为元素指针， (1)中的用法是借助长度为10，数据类型为i32的数组指针取其中某个元素的地址指针，其中数据索引的偏移有两个，因为数据类型是<code>[10 x i32]</code>,第一个偏移对应的内存偏移量为<code>偏移值（0） x 10 x 4</code>，第二个偏移对应的内存偏移量为<code>偏移值（%0） x 4</code>，偏移量与原地址相加计算得到的数据存入<code>%2</code>中，类型为i32；（2）中的用法是通过元素指针和偏移值得到某个元素的地址指针，数据类型为<code>i32</code>，因此只有一个偏移值，对应的内存偏移量为<code>偏移值（%0） x 4</code>，偏移量与原地址相加计算得到的数据存入<code>%2</code>中，类型为i32。</p></li></ul><h2 id="问题2-cpp-与-ll-的对应"><a href="#问题2-cpp-与-ll-的对应" class="headerlink" title="问题2: cpp 与 .ll 的对应"></a>问题2: cpp 与 .ll 的对应</h2><ol><li><p>assign</p><p>不含有转移指令，因此整个函数主体部分与.ll文件main函数部分对应</p></li><li><p>fun</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">   std::vector&lt;Type *&gt; Ints(1, Int32Type);   auto calleeFunType = FunctionType::get(Int32Type, Ints);  auto calleeFun = Function::create(calleeFunType,                                  "callee", module);  auto bb = BasicBlock::create(module, "entry", calleeFun);  builder-&gt;set_insert_point(bb);  std::vector&lt;Value *&gt; args;    for (auto arg = calleeFun-&gt;arg_begin(); arg != calleeFun-&gt;arg_end(); arg++) {    args.push_back(*arg);    }  auto temp = builder-&gt;create_imul(CONST_INT(2),args[0]);  builder-&gt;create_ret(temp);/*对应：define dso_local i32 @callee (i32 %0) #0 {    %2 = mul i32 2,%0    ret i32 %2}*/  auto mainFun = Function::create(FunctionType::get(Int32Type, {}),                                  "main", module);  bb = BasicBlock::create(module, "entry", mainFun);  builder-&gt;set_insert_point(bb);  auto call = builder-&gt;create_call(calleeFun, {CONST_INT(110)});/*对应：define dso_local i32 @main () #0{    %1 = call i32 @callee(i32 110)*/  builder-&gt;create_ret(call);/*对应：    ret i32 %1*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>if</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> auto mainFun = Function::create(FunctionType::get(Int32Type, {}),                                  "main", module);  auto bb = BasicBlock::create(module, "entry", mainFun);  builder-&gt;set_insert_point(bb);  auto aAlloca = builder-&gt;create_alloca(FloatTypenum);  builder-&gt;create_store(CONST_FP(5.555),aAlloca);  auto aload = builder-&gt;create_load(aAlloca);  auto fcmp =  builder-&gt;create_fcmp_gt(aload,CONST_FP(1.0));  auto trueBB = BasicBlock::create(module, "trueBB", mainFun);    auto falseBB = BasicBlock::create(module, "falseBB", mainFun);  auto br = builder-&gt;create_cond_br(fcmp, trueBB, falseBB); /*对应：    %1 = alloca float    store float 0x40163851E0000000, float* %1    %2 = load float, float* %1    %3 = fcmp ogt float %2,1.000000e+00    br i1 %3, label %4, label %5*/  builder-&gt;set_insert_point(trueBB);   builder-&gt;create_ret(CONST_INT(233));/*对应：    4:    ret i32 233*/  builder-&gt;set_insert_point(falseBB);  builder-&gt;create_ret(CONST_INT(0));/*对应：5:    ret i32 0*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>while</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">   auto aAlloca = builder-&gt;create_alloca(Int32Type);  auto iAlloca = builder-&gt;create_alloca(Int32Type);  builder-&gt;create_store(CONST_INT(10),aAlloca);  builder-&gt;create_store(CONST_INT(0),iAlloca);  builder-&gt;create_br(loopBB);/*对应：%1 = alloca i32    store i32 10,i32* %1    %2 = alloca i32    store i32 0,i32* %2    br label %3 */  builder-&gt;set_insert_point(loopBB);  auto iLoad = builder-&gt;create_load(iAlloca);   auto icmp =  builder-&gt;create_icmp_lt(iLoad,CONST_INT(10));  auto br = builder-&gt;create_cond_br(icmp, trueBB, falseBB); /*对应：    3:    %4 = load i32, i32* %2    %5 = icmp slt i32 %4,10    br i1 %5,label %6,label %11*/  builder-&gt;set_insert_point(trueBB);   auto temp = builder-&gt;create_iadd(iLoad,CONST_INT(1));  builder-&gt;create_store(temp,iAlloca);  iLoad = builder-&gt;create_load(iAlloca);  auto aLoad = builder-&gt;create_load(aAlloca);  auto temp1 = builder-&gt;create_iadd(aLoad,iLoad);  builder-&gt;create_store(temp1,aAlloca);  builder-&gt;create_br(loopBB);/*对应：    6:    %7 = add i32 %4,1    store i32 %7, i32* %2    %8 = load i32, i32* %2    %9 = load i32, i32* %1    %10 = add i32 %8,%9    store i32 %10, i32* %1    br label %3 */  builder-&gt;set_insert_point(falseBB);   aLoad = builder-&gt;create_load(aAlloca);  builder-&gt;create_ret(aLoad); /*  对应：    11:    %12 = load i32, i32* %1    ret i32 %12*/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="问题3-Visitor-Pattern"><a href="#问题3-Visitor-Pattern" class="headerlink" title="问题3: Visitor Pattern"></a>问题3: Visitor Pattern</h2><p>分析 <code>calc</code> 程序在输入为 <code>4 * (8 + 4 - 1) / 2</code> 时的行为：</p><ol><li>请画出该表达式对应的抽象语法树（使用 <code>calc_ast.hpp</code> 中的 <code>CalcAST*</code> 类型和在该类型中存储的值来表示），并给节点使用数字编号。</li><li>请指出示例代码在用访问者模式遍历该语法树时的遍历顺序。</li></ol><p>序列请按如下格式指明（序号为问题 3.1 中的编号）：  3-&gt;2-&gt;5-&gt;1</p><p>抽象语法树：</p><p>遍历顺序：</p><p>1-&gt;2-&gt;3-&gt;4-&gt;6-&gt;8-&gt;7-&gt;9-&gt;11-&gt;14-&gt;16-&gt;12-&gt;15-&gt;10-&gt;13-&gt;5</p><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><p>本次实验的核心任务是使用访问者模式来实现cminus-f 语言的LLVM IR 的自动生成。</p><h2 id="实验难点"><a href="#实验难点" class="headerlink" title="实验难点"></a>实验难点</h2><ul><li><p>数据类型不匹配时及时进行数据转换，如以下情况</p><ul><li>assign语句</li><li>比较/计算等二元运算的参数类型不一致</li><li>计算数组下标的结果并非int型</li><li>函数参数类型和调用时的实参类型不匹配</li><li>函数返回值的表达式和类型不匹配</li></ul><p>其中int,float之间的转换需要的函数为<code>create_sitofp</code>,<code>create_fptosi</code>,int1和int32之间的转换需要的函数为<code>create_zext</code>,<code>create_icmp_ne(*,CONST_INT(0))</code>。</p></li><li><p>区别元素值和元素地址，二者存储的数据类型均为<code>Value *</code>类型，本实验中，设置两个全局变量<code>cur_val</code>,<code>cur_expr</code>分别存储地址和值，其中地址仅在指针/数组运算以及赋值语句被用到。</p></li><li><p>区分指针类型和数组类型，根据lab2问题1，获取元素的地址有两种方法，分别是作为指针根据基元素的值进行运算，和作为数组类型的指针根据基元素的地址进行计算，在调用时要加以区分。</p></li><li><p>函数形参和实参的处理</p></li></ul><h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><ul><li><p>number</p><p>在对基本块进行命名时，如果程序中存在多个类型相同的基本块，则会发生冲突，因此设置一个int类型的全局变量，每遇到需要显示命名的基本块，则将当前number的值转化为字符串加入基本块的命名中(<code>std::to_string(number++)</code>)。</p></li><li><p>cur_val &amp; cur_expr</p><p><code>cur_val</code>记录当前数据对应的地址，如运行赋值语句时，右值计算的数值将存储到左值中对应的地址中，以及根据基地址计算数组某个元素对应的位置； <code>cur_expr</code>记录当前数据对应的值的拷贝，用于各类表达式的计算和赋值，调用<code>create_load(cur_val)</code>即可得到当前数据地址的对应的值。</p><p><img src="C:\Users\SN1987A\AppData\Roaming\Typora\typora-user-images\image-20221103153726594.png" alt="image-20221103153726594" style="zoom:67%;"></p></li></ul><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><ul><li><p>SelectionStmt部分，在trueBB，falseBB对应的语句执行结束后，如果在执行完的基本块中没有终止语句，则不会产生向下一个基本块的跳转。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> exist<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>builder<span class="token operator">-&gt;</span><span class="token function">get_insert_block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get_terminator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nullptr<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    retBB<span class="token operator">=</span>BasicBlock<span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"retBB"</span><span class="token operator">+</span>std<span class="token operator">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span>cur_fun<span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token operator">-&gt;</span><span class="token function">create_br</span><span class="token punctuation">(</span>retBB<span class="token punctuation">)</span><span class="token punctuation">;</span>    exist<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>builder<span class="token operator">-&gt;</span><span class="token function">get_insert_block</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get_terminator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span>nullptr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      retBB<span class="token operator">=</span>BasicBlock<span class="token operator">::</span><span class="token function">create</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"retBB"</span><span class="token operator">+</span>std<span class="token operator">::</span><span class="token function">to_string</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">,</span>cur_fun<span class="token punctuation">)</span><span class="token punctuation">;</span>      builder<span class="token operator">-&gt;</span><span class="token function">create_br</span><span class="token punctuation">(</span>retBB<span class="token punctuation">)</span><span class="token punctuation">;</span>      exist<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span>  builder<span class="token operator">-&gt;</span><span class="token function">create_br</span><span class="token punctuation">(</span>retBB<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>iteration同理</p></li><li><p>数组负下标检测,调用<code>neg_idx_expect</code>函数，仅对负下标进行检测，不会对数组的上界进行检查（即越界访问）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto b=builder-&gt;create_icmp_lt(cur_expr,CONST_INT(0));auto trueBB=...;autofalseBB=...;auto br=builder-&gt;create_cond_br(b,trueBB,falseBB);builder-&gt;set_insert_point(trueBB);auto err=scope.find("neg_idx_except");builder-&gt;create_call(err,{});        builder-&gt;create_br(falseBB);builder-&gt;set_insert_point(falseBB);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>函数声明部分，对函数参数的处理仅在FunDeclaration部分完成，未调用<code>ASTParam</code>部分。</p></li></ul><h3 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h3><ul><li>实验框架的基本思路是访问者模式实现LR的自动生成，和lab2中问题三的思路类似。</li><li>加深了对数组和指针类型的理解，以及对基本块，跳转语句等的理解</li><li>对C++的语法掌握更多</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;问题1-getelementptr&quot;&gt;&lt;a href=&quot;#问题1-getelementptr&quot; class=&quot;headerlink&quot; title=&quot;问题1: getelementptr&quot;&gt;&lt;/a&gt;问题1: getelementptr&lt;/h2&gt;&lt;p&gt;请给出 &lt;cod</summary>
      
    
    
    
    <category term="编译原理" scheme="http://sn1987a-1.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>LLVM IR语法</title>
    <link href="http://sn1987a-1.github.io/posts/b38fcafd.html"/>
    <id>http://sn1987a-1.github.io/posts/b38fcafd.html</id>
    <published>2023-10-17T12:48:34.000Z</published>
    <updated>2023-09-24T05:27:12.380Z</updated>
    
    
    
    
    <category term="编译原理" scheme="http://sn1987a-1.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>ML算法：逻辑回归</title>
    <link href="http://sn1987a-1.github.io/posts/f1383170.html"/>
    <id>http://sn1987a-1.github.io/posts/f1383170.html</id>
    <published>2023-10-17T12:48:34.000Z</published>
    <updated>2023-09-24T03:48:50.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h2><h3 id="实验内容及步骤"><a href="#实验内容及步骤" class="headerlink" title="实验内容及步骤"></a>实验内容及步骤</h3><p>本实验主要利用逻辑回归(logistics regression)对kaggle数据集进行分析预测。</p><ul><li>数据处理</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#NULL项舍弃</span>df<span class="token operator">=</span>df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>ENcode，将非数字型的属性值编码为0~1的数字</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>Gender<span class="token operator">=</span>df<span class="token punctuation">.</span>Gender<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Male'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Female'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>Married<span class="token operator">=</span>df<span class="token punctuation">.</span>Married<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Yes'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'No'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>Dependents<span class="token operator">=</span>df<span class="token punctuation">.</span>Dependents<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">:</span><span class="token number">0.3</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">:</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token string">'3+'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>Education<span class="token operator">=</span>df<span class="token punctuation">.</span>Education<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Graduate'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Not Graduate'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>Self_Employed<span class="token operator">=</span>df<span class="token punctuation">.</span>Self_Employed<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Yes'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'No'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>Property_Area<span class="token operator">=</span>df<span class="token punctuation">.</span>Property_Area<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Rural'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">'Urban'</span><span class="token punctuation">:</span><span class="token number">0.5</span><span class="token punctuation">,</span><span class="token string">'Semiurban'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>Loan_Status<span class="token operator">=</span>df<span class="token punctuation">.</span>Loan_Status<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'Y'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'N'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>数据归一化，采用$X_{norm}=(X-\mu)/\sigma$，其中$\mu$为平均值，$\sigma$为标准差</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_splitX <span class="token operator">=</span> df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Loan_Status"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">"Loan_Status"</span><span class="token punctuation">]</span>X_norm<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>X<span class="token punctuation">)</span>mu <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X_norm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>         sigma <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>X_norm<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    X_norm<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>X_norm<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">-</span>mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span>sigma<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>划分训练集和测试集，此处采用训练集：测试机=8：2的方式进行划分，利用permutation()函数进行处理</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">num<span class="token operator">=</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>X_norm<span class="token operator">=</span>X_norm<span class="token punctuation">[</span>num<span class="token punctuation">]</span>y<span class="token operator">=</span>y<span class="token punctuation">[</span>num<span class="token punctuation">]</span>a<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>X_test<span class="token operator">=</span>X_norm<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>X_train<span class="token operator">=</span>X_norm<span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">]</span>y_test<span class="token operator">=</span>y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>y_train<span class="token operator">=</span>y<span class="token punctuation">[</span>a<span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>训练部分预处理</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">col<span class="token operator">=</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span> m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>X<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>X<span class="token punctuation">)</span>X <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>  y<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>theta<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>col<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span>temp<span class="token operator">=</span>np<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>max_iter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>损失函数：利用交叉熵损失函数计算</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">loss<span class="token operator">=</span><span class="token operator">-</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token operator">/</span>m<span class="token operator">-</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span class="token operator">/</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>梯度下降</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">grad<span class="token operator">=</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token operator">-</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>正则化，其中L1相当于添加1-范数项，L2相当于在损失函数中添加2-范数项</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> self<span class="token punctuation">.</span>penalty<span class="token operator">==</span><span class="token string">"l1"</span><span class="token punctuation">:</span>   loss<span class="token operator">+=</span>self<span class="token punctuation">.</span>gamma<span class="token operator">*</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>m   grad<span class="token operator">+=</span>self<span class="token punctuation">.</span>gamma<span class="token operator">*</span>np<span class="token punctuation">.</span>sign<span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   loss<span class="token operator">+=</span>self<span class="token punctuation">.</span>gamma<span class="token operator">*</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span>m   grad<span class="token operator">+=</span>self<span class="token punctuation">.</span>gamma<span class="token operator">*</span>theta<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>训练部分函数主体</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>max_iter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment">#计算loss和gard</span>     temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span><span class="token operator">=</span>theta<span class="token operator">-</span><span class="token punctuation">(</span>lr<span class="token operator">/</span>m<span class="token punctuation">)</span><span class="token operator">*</span>grad     theta<span class="token operator">=</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span>i<span class="token punctuation">]</span>     m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>     j_history<span class="token operator">=</span>np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>j_history<span class="token punctuation">,</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token keyword">if</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>square<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>tol<span class="token punctuation">:</span>          <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>sigmoid函数</li></ul><pre class="line-numbers language-pyth" data-language="pyth"><code class="language-pyth">return 1.0/(1+np.exp(-np.dot(w,x)))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>预测函数</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> X<span class="token punctuation">,</span>y<span class="token punctuation">,</span>theta<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>    X<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    X<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>      p<span class="token operator">=</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span>    p<span class="token operator">=</span>p<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    y<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">and</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span><span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">elif</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token builtin">sum</span><span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token operator">/</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验结果及分析"><a href="#实验结果及分析" class="headerlink" title="实验结果及分析"></a>实验结果及分析</h3><p>采用实验默认参数进行训练：lr=0.01, tol=1e-7, max_iter=3e3,penalty=”l2”,gamma=0,fit_intercept=True</p><p>Acc=83.2%</p><ul><li>参数比较</li></ul><p>首先对不同的学习率进行比较，如下为不同的学习率下的损失函数</p><p>lr=0.001,此时到达max_iter时损失函数仍在快速递减、</p><p>相比之下lr=0.01的学习率避免了图像的抖动，也避免了训练过慢导致训练时间长。</p><p>不同的正则化参数：</p><p>观察图像的纵坐标，可以看出选择l2正则化的收敛效果最好，因此采取l2正则化。</p><ul><li>最佳准确率的情况：</li></ul><p>（此时的参数：lr=0.01, tol=1e-7, max_iter=3e3,penalty=”l2”,gamma=1,fit_intercept=True）</p><p>准确率达到了87.37%，其中测试集和训练集的比例为2：8</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;逻辑回归&quot;&gt;&lt;a href=&quot;#逻辑回归&quot; class=&quot;headerlink&quot; title=&quot;逻辑回归&quot;&gt;&lt;/a&gt;逻辑回归&lt;/h2&gt;&lt;h3 id=&quot;实验内容及步骤&quot;&gt;&lt;a href=&quot;#实验内容及步骤&quot; class=&quot;headerlink&quot; title=&quot;实验内</summary>
      
    
    
    
    <category term="机器学习" scheme="http://sn1987a-1.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Gin框架</title>
    <link href="http://sn1987a-1.github.io/posts/6d104c29.html"/>
    <id>http://sn1987a-1.github.io/posts/6d104c29.html</id>
    <published>2023-09-23T12:48:34.000Z</published>
    <updated>2023-09-23T13:05:25.832Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GoWeb"><a href="#GoWeb" class="headerlink" title="GoWeb"></a>GoWeb</h2><p>官方包<code>net/http</code>提供了基础的路由函数组合和功能函数，无需API</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">echo</span><span class="token punctuation">(</span>wr http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        wr<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"echo error"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    writeLen<span class="token punctuation">,</span> err <span class="token operator">:=</span> wr<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> writeLen <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> <span class="token string">"write len:"</span><span class="token punctuation">,</span> writeLen<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> echo<span class="token punctuation">)</span>    err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>框架类型</p><ul><li>Router</li><li>MVC</li></ul><h2 id="Gin"><a href="#Gin" class="headerlink" title="Gin"></a>Gin</h2><p><a href="https://github.com/gin-gonic/gin">Gin</a></p><h3 id="Gin路由"><a href="#Gin路由" class="headerlink" title="Gin路由"></a>Gin路由</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个 Gin 路由</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 设置一个路由处理器，处理根路径 "/"</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 发送 "Hello, World!" 作为响应</span>        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 在端口 8000 上启动 Web 服务器</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8000"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似地</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/xxxpost"</span><span class="token punctuation">,</span>getting<span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">PUT</span><span class="token punctuation">(</span><span class="token string">"/xxxput"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>支持Restful风格API，（表现层状态转化），是一种互联网应用程序的API设计理念：URL定位资源，用HTTP描述操作</p><pre class="line-numbers language-none"><code class="language-none">1.获取文章 /blog/getXxx Get blog/Xxx2.添加 /blog/addXxx POST blog/Xxx3.修改 /blog/updateXxx PUT blog/Xxx4.删除 /blog/delXxxx DELETE blog/Xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>API参数</strong>：可以通过context地Param方法获取API参数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/user/:name/*action"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>       name <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>       action <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span>       action <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>       c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> name<span class="token operator">+</span><span class="token string">" is "</span><span class="token operator">+</span>action<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>URL参数</strong>：可以通过DefaultQuery()（参数不存在，返回<em>默认值</em>）或Query()（参数不存在，返回空串）方法获取</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">name <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">,</span><span class="token string">"默认值"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>表单参数</strong>表单参数是post请求，通过PostForm获取</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">types <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultPostForm</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"post"</span><span class="token punctuation">)</span>username <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>password <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"userpassword"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/form<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>application/x-www-form-urlencoded<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入你的用户名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span> 密<span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userpassword<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>请输入你的密码<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>提交<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>上传文件</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">file<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">FormFile</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"上传图片出错"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">SaveUploadedFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> file<span class="token punctuation">.</span>Filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于上传的文件，可以限制文件类型，文件大小</p><p>也可以上传多个文件，获取所有的文件，再遍历文件，逐个处理（html的multiple）</p><p><strong>routes group</strong> 管理相同的URL</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">v1 <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/v1"</span><span class="token punctuation">)</span>   <span class="token comment">// {} 是书写规范</span>   <span class="token punctuation">{</span>      v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span>      v1<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/submit"</span><span class="token punctuation">,</span> submit<span class="token punctuation">)</span>   <span class="token punctuation">}</span>v2<span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路由原理：httprouter会将所有路由规则构造成前缀树</p><p>URI包含URL和URN</p><ul><li>url用来标识资源的位置</li><li>urn用来标识资源的名称，不含位置信息</li><li>uri数据指的是URI的字符串表示形式</li></ul><h3 id="gin数据解析和绑定"><a href="#gin数据解析和绑定" class="headerlink" title="gin数据解析和绑定"></a>gin数据解析和绑定</h3><p><strong>json数据</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Login <span class="token keyword">struct</span> <span class="token punctuation">{</span>   <span class="token comment">// binding:"required"修饰的字段，若接收为空值，则报错，是必须字段</span>   User    <span class="token builtin">string</span> <span class="token string">`form:"username" json:"user" uri:"user" xml:"user" binding:"required"`</span>   Pssword <span class="token builtin">string</span> <span class="token string">`form:"password" json:"password" uri:"password" xml:"password" binding:"required"`</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> json Login<span class="token comment">// 将request的body中的数据，自动按照json格式解析到结构体</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindJSON</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    <span class="token comment">// 返回错误信息</span>    <span class="token comment">// gin.H封装了生成json数据的工具</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 判断用户名密码是否正确</span><span class="token keyword">if</span> json<span class="token punctuation">.</span>User <span class="token operator">!=</span> <span class="token string">"root"</span> <span class="token operator">||</span> json<span class="token punctuation">.</span>Pssword <span class="token operator">!=</span> <span class="token string">"admin"</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"304"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token string">"200"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>表单数据</strong>，类似于json数据，只需修改解析的函数，使用bind()默认解析到form的格式</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> form Login<span class="token comment">// Bind()默认解析并绑定form格式</span><span class="token comment">// 根据请求头中content-type自动推断</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>URI数据</strong></p><p>URI数据的get函数参数<code>"/:user/:password"</code>以便标识</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBindUri</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>login<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="gin渲染"><a href="#gin渲染" class="headerlink" title="gin渲染"></a>gin渲染</h3><p>JSON，XML，YAML，结构体</p><p><code>r.get("/someXML")</code>(替换成someStruct/someYAML/someJSON)，用<code>c.XML...</code>接收（struct格式需要处理msg格式，用c.JSON接收）</p><p><strong>HTML模板渲染</strong></p><p>在r.GET之前调用<code>r.LoadHTMLGlob("tem/**/*")</code>(具体根据目录来定)</p><p>HTML首尾分离</p><p>首：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{{define "public/header"}}<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>ie=edge<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>{{.title}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>{{end}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>尾：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{{define "public/footer"}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>{{ end }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>index文件：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{{ define "user/index.html" }}{{template "public/header" .}}        fgkjdskjdsh{{.address}}{{template "public/footer" .}}{{ end }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>重定向</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">c<span class="token punctuation">.</span><span class="token function">Redirect</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusMovedPermanently<span class="token punctuation">,</span> <span class="token string">"http..."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>同步和异步处理</strong></p><p>goroutine可以进行异步处理</p><p><em>启动新的goroutine时，不应该使用原始上下文，而是使用只读副本</em></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"> <span class="token comment">// 1.异步</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/long_async"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 需要搞一个副本</span>    copyContext <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 异步处理</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"异步执行："</span> <span class="token operator">+</span> copyContext<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 2.同步</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/long_sync"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"同步执行："</span> <span class="token operator">+</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="gin中间件"><a href="#gin中间件" class="headerlink" title="gin中间件"></a>gin中间件</h3><p>“默认使用两个中间件：Logger，Recovery”<code>r:=gin.Default()</code></p><p><strong>全局中间件</strong>：所有请求都经过该中间件</p><p>定义中间件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">MiddleWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc<span class="token punctuation">{</span>    <span class="token comment">//设置变量到Context的key中，可以通过’Get‘获取</span>    c<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span><span class="token string">"..."</span><span class="token punctuation">)</span>    <span class="token comment">//获取相关变量</span>    status <span class="token operator">:=</span> c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注册中间件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">MiddleWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/ce"</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>Next()方法</strong>：中间件执行完后续的一些事情，在定义中间件部分写入</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">MiddleWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token string">"中间件"</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        status <span class="token operator">:=</span> c<span class="token punctuation">.</span>Writer<span class="token punctuation">.</span><span class="token function">Status</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        t2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"time:"</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比：</p><p>去掉c.Next()函数：输出的time（时间间隔）为0</p><p>加上c.Next()函数，输出的time不为0，为中间件开始执行到运行结束的时间</p><p><strong>局部中间件</strong></p><p>局部中间件注册的方法：（也可以类似于全局的声明）</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/ce"</span><span class="token punctuation">,</span><span class="token function">MiddleWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>局部和全局的区别：局部可以针对忒党的路由或路由组生效，在注册前创建路由组：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">authgroup<span class="token operator">:=</span>r<span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token string">"/xxx"</span><span class="token punctuation">)</span>authgroup<span class="token punctuation">.</span><span class="token function">USE</span><span class="token punctuation">(</span>MiddleWare<span class="token punctuation">)</span>authgroup<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h3><p>HTTP：无状态协议，HTTP1.1引入cookie解决无状态的方案，Cookie由服务器创建，浏览器保存，每次发送请求给服务器时，发送Cookie</p><p><strong>cookie设置</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"cookie"</span><span class="token punctuation">,</span><span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span><span class="token punctuation">{</span>    cookie<span class="token punctuation">,</span>err<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token function">Cookie</span><span class="token punctuation">(</span><span class="token string">"key_cookie"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>        <span class="token comment">//说明cookie未设置</span>        c<span class="token punctuation">.</span><span class="token function">SetCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借助中间件校验cookie，如果校验失败：返回错误信息并退出</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusUnauthorized<span class="token punctuation">,</span>gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"error"</span><span class="token punctuation">:</span><span class="token string">"err"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">Abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上述cookie的缺点</p><ul><li>不安全，通过明文传输（只有https传输才可以保证安全性）</li><li>可以被禁用</li><li>增加宽带损耗</li><li>cookie有上限</li><li>只在同一域名下的页面之间共享</li></ul><p><strong>Sessions</strong> 主要功能：</p><ul><li>简单的API，可以作为设置签名cookie的简便方法</li><li>内置的后端可以将session存储在cookie的或者文件系统中</li><li>Flash消息：持续读取session</li><li>切换Session的持久性和便捷方法</li><li>旋转身份验证，加密密钥</li><li>每个请求有多个session</li><li>自定义session后端的接口和基础结构，可以通过API减少并批量保存</li></ul><p>sessions的特点</p><ul><li>在服务器存储，存储在服务器的内存或者数据库中</li><li>没有明确的容量限制</li><li>可以持久存在</li><li>客户端无法直接访问你或修改，更安全</li><li>可以解决cookie的跨域问题，更灵活</li><li>通常用来存储敏感数据，如用户的身份验证信息</li></ul><p>sessions相关函数用法：</p><p>保存session（更改）</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">SaveSession</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    session<span class="token punctuation">,</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"session-name"</span><span class="token punctuation">)</span>    <span class="token comment">//Get永远会返回一个session，即便是空的session</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    session<span class="token punctuation">.</span>Values<span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"bar"</span>    <span class="token operator">...</span>    <span class="token comment">// 保存更改</span>    session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>获取session</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetSession</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    session<span class="token punctuation">,</span> err <span class="token operator">:=</span> store<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token string">"session-name"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>    foo <span class="token operator">:=</span> session<span class="token punctuation">.</span>Values<span class="token punctuation">[</span><span class="token string">"foo"</span><span class="token punctuation">]</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除session: 将session的最大存储时间设置为小于零的数即为删除</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">session<span class="token punctuation">.</span>Options<span class="token punctuation">.</span>MaxAge <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="参数验证"><a href="#参数验证" class="headerlink" title="参数验证"></a>参数验证</h3><p><strong>结构体验证</strong>：GIN框架进行数据验证，无需解析数据，更简洁</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> person Person<span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%#v"</span><span class="token punctuation">,</span> person<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要添加自定义验证：</p><ul><li><p>首先，要在struct中限制：form，binding等（用``）</p></li><li><p>自定义校验方法（如限制字段不为空，不等于admin）</p></li><li><p>注册校验方法</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">v<span class="token operator">:=</span>binding<span class="token punctuation">.</span>Validator<span class="token punctuation">.</span><span class="token function">Engine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>validator<span class="token punctuation">.</span>Validate<span class="token punctuation">)</span>v<span class="token punctuation">.</span><span class="token function">RegisterValidation</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>func_name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>再用ShouldBind进行校验</p></li></ul><p><strong>多语言翻译验证</strong></p><p>当业务系统对验证信息有特殊需求时，例如：返回信息需要自定义，手机端返回的信息需要是中文而pc端返回的信息需要时英文，如何做到请求一个接口满足上述三种情况。</p><p>借助中间件实现。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">startPage</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//这部分应放到中间件中</span>    locale <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"locale"</span><span class="token punctuation">,</span> <span class="token string">"zh"</span><span class="token punctuation">)</span>    trans<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> Uni<span class="token punctuation">.</span><span class="token function">GetTranslator</span><span class="token punctuation">(</span>locale<span class="token punctuation">)</span>    <span class="token keyword">switch</span> locale <span class="token punctuation">{</span>  <span class="token operator">...</span>        <span class="token keyword">break</span>    <span class="token punctuation">}</span>    <span class="token comment">//自定义错误内容</span>    Validate<span class="token punctuation">.</span><span class="token function">RegisterTranslation</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">,</span> trans<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ut ut<span class="token punctuation">.</span>Translator<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ut<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">,</span> <span class="token string">"{0} must have a value!"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// see universal-translator for details</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>ut ut<span class="token punctuation">.</span>Translator<span class="token punctuation">,</span> fe validator<span class="token punctuation">.</span>FieldError<span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>        t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ut<span class="token punctuation">.</span><span class="token function">T</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">,</span> fe<span class="token punctuation">.</span><span class="token function">Field</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> t    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">//这块应该放到公共验证方法中</span>    user <span class="token operator">:=</span> User<span class="token punctuation">{</span><span class="token punctuation">}</span>    c<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    err <span class="token operator">:=</span> Validate<span class="token punctuation">.</span><span class="token function">Struct</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        errs <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>validator<span class="token punctuation">.</span>ValidationErrors<span class="token punctuation">)</span>        sliceErrs <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> errs <span class="token punctuation">{</span>            sliceErrs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sliceErrs<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">Translate</span><span class="token punctuation">(</span>trans<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%#v"</span><span class="token punctuation">,</span> sliceErrs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%#v"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>验证码库：github.com/dchest/captcha</p></blockquote><p>具体实现：</p><ul><li>生成一个路由，在session里写入键值对k，v，将v加载到图片上，然后生成图片。在浏览器显示</li><li>前端将图片的内容发送给后端，后端根据session中的k取得v，比对校验</li></ul><p>示例代码</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"bytes"</span>    <span class="token string">"github.com/dchest/captcha"</span>    <span class="token string">"github.com/gin-contrib/sessions"</span>    <span class="token string">"github.com/gin-contrib/sessions/cookie"</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"net/http"</span>    <span class="token string">"time"</span><span class="token punctuation">)</span><span class="token comment">// 中间件，处理session</span><span class="token keyword">func</span> <span class="token function">Session</span><span class="token punctuation">(</span>keyPairs <span class="token builtin">string</span><span class="token punctuation">)</span> gin<span class="token punctuation">.</span>HandlerFunc <span class="token punctuation">{</span>    store <span class="token operator">:=</span> <span class="token function">SessionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span>keyPairs<span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">SessionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> sessions<span class="token punctuation">.</span>Store <span class="token punctuation">{</span>    sessionMaxAge <span class="token operator">:=</span> <span class="token number">3600</span>    sessionSecret <span class="token operator">:=</span> <span class="token string">"topgoer"</span>    <span class="token keyword">var</span> store sessions<span class="token punctuation">.</span>Store    store <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>sessionSecret<span class="token punctuation">)</span><span class="token punctuation">)</span>    store<span class="token punctuation">.</span><span class="token function">Options</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>        MaxAge<span class="token punctuation">:</span> sessionMaxAge<span class="token punctuation">,</span> <span class="token comment">//seconds</span>        Path<span class="token punctuation">:</span>   <span class="token string">"/"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> store<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Captcha</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> length <span class="token operator">...</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    l <span class="token operator">:=</span> captcha<span class="token punctuation">.</span>DefaultLen    w<span class="token punctuation">,</span> h <span class="token operator">:=</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">36</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>        l <span class="token operator">=</span> length<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">{</span>        w <span class="token operator">=</span> length<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">{</span>        h <span class="token operator">=</span> length<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    captchaId <span class="token operator">:=</span> captcha<span class="token punctuation">.</span><span class="token function">NewLen</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"captcha"</span><span class="token punctuation">,</span> captchaId<span class="token punctuation">)</span>    <span class="token boolean">_</span> <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">Serve</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> captchaId<span class="token punctuation">,</span> <span class="token string">".png"</span><span class="token punctuation">,</span> <span class="token string">"zh"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">CaptchaVerify</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> code <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">if</span> captchaId <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"captcha"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> captchaId <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        session<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">"captcha"</span><span class="token punctuation">)</span>        <span class="token boolean">_</span> <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> captcha<span class="token punctuation">.</span><span class="token function">VerifyString</span><span class="token punctuation">(</span>captchaId<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Serve</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">,</span> id<span class="token punctuation">,</span> ext<span class="token punctuation">,</span> lang <span class="token builtin">string</span><span class="token punctuation">,</span> download <span class="token builtin">bool</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache, no-store, must-revalidate"</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span>    w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Expires"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span>    <span class="token keyword">var</span> content bytes<span class="token punctuation">.</span>Buffer    <span class="token keyword">switch</span> ext <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">".png"</span><span class="token punctuation">:</span>        w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"image/png"</span><span class="token punctuation">)</span>        <span class="token boolean">_</span> <span class="token operator">=</span> captcha<span class="token punctuation">.</span><span class="token function">WriteImage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>content<span class="token punctuation">,</span> id<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token string">".wav"</span><span class="token punctuation">:</span>        w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"audio/x-wav"</span><span class="token punctuation">)</span>        <span class="token boolean">_</span> <span class="token operator">=</span> captcha<span class="token punctuation">.</span><span class="token function">WriteAudio</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>content<span class="token punctuation">,</span> id<span class="token punctuation">,</span> lang<span class="token punctuation">)</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> captcha<span class="token punctuation">.</span>ErrNotFound    <span class="token punctuation">}</span>    <span class="token keyword">if</span> download <span class="token punctuation">{</span>       w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/octet-stream"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    http<span class="token punctuation">.</span><span class="token function">ServeContent</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> id<span class="token operator">+</span>ext<span class="token punctuation">,</span> time<span class="token punctuation">.</span>Time<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>content<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    router <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">LoadHTMLGlob</span><span class="token punctuation">(</span><span class="token string">"./*.html"</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span><span class="token function">Session</span><span class="token punctuation">(</span><span class="token string">"topgoer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/captcha"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">Captcha</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        c<span class="token punctuation">.</span><span class="token function">HTML</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/captcha/verify/:value"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>        value <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Param</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token function">CaptchaVerify</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"success"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span>StatusOK<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"status"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"msg"</span><span class="token punctuation">:</span> <span class="token string">"failed"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    router<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GoWeb&quot;&gt;&lt;a href=&quot;#GoWeb&quot; class=&quot;headerlink&quot; title=&quot;GoWeb&quot;&gt;&lt;/a&gt;GoWeb&lt;/h2&gt;&lt;p&gt;官方包&lt;code&gt;net/http&lt;/code&gt;提供了基础的路由函数组合和功能函数，无需API&lt;/p&gt;
&lt;pre c</summary>
      
    
    
    
    <category term="Golang" scheme="http://sn1987a-1.github.io/categories/Golang/"/>
    
    
    <category term="Gin" scheme="http://sn1987a-1.github.io/tags/Gin/"/>
    
  </entry>
  
  <entry>
    <title>Vue基础知识</title>
    <link href="http://sn1987a-1.github.io/posts/1d1c79fd.html"/>
    <id>http://sn1987a-1.github.io/posts/1d1c79fd.html</id>
    <published>2023-09-23T12:48:34.000Z</published>
    <updated>2023-09-23T13:29:20.201Z</updated>
    
    
    
    
    <category term="前端" scheme="http://sn1987a-1.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="http://sn1987a-1.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>并行数据结构-p-tree</title>
    <link href="http://sn1987a-1.github.io/posts/a4d33f77.html"/>
    <id>http://sn1987a-1.github.io/posts/a4d33f77.html</id>
    <published>2023-09-22T07:46:11.000Z</published>
    <updated>2023-09-23T13:05:25.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="并行数据结构"><a href="#并行数据结构" class="headerlink" title="并行数据结构"></a>并行数据结构</h2><p>并行数据结构的几个概念</p><ul><li><p>non-blocking</p><p>一个线程被挂起或中断不会导致其他线程执行被block</p></li><li><p>lock-free</p><p>保证整个系统的执行进度是不断推进的</p></li><li><p>wait-free</p><p>保证每个线程的执行进度是不断推进的</p></li></ul><p>通常需要做到lock-free,不要求wait-free(较难实现，性能较差)</p><p>lock-free:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto expected = x.load();do {     bool ok = x.compare_exchange_strong(expected, new_value);} while(!ok)//compare_exchange_strong 解释。// if true, 则x和expected相等，使用new_value替换x的值//if false, 则x和expected不相等，并expected会被修改成x的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（否则需要spin lock）</p><p>仅仅使用串行数据结构+锁远远不能达到要求（还可能导致死锁）</p><p><strong>涉及的数据结构</strong></p><p>CSDS（并行查找数据结构）</p><ul><li>链表，跳表，哈希表</li><li>主要实现：查找，插入，删除<ul><li>查找：遍历</li><li>插入删除，先找到位置，再进行操作</li></ul></li><li>关键<ul><li>速度快，避免耗时操作（写操作），等待和重试</li><li>细粒度，修改尽量设计较小的范围，需要用锁：细粒度锁</li></ul></li></ul><p>非查找数据结构：</p><ul><li>队列，栈，竞争点都在头/尾，队尾竞争激烈</li></ul><h3 id="并行数据结构设计"><a href="#并行数据结构设计" class="headerlink" title="并行数据结构设计"></a>并行数据结构设计</h3><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><p>串行数据结构的单链表的增删改查都相对容易，在并发中容易遇到的问题：</p><ul><li>删除和插入，插入和插入，删除和删除，都会引发问题</li><li>内存管理问题：对已删除的节点，需要释放内存，但如果其他线程持有在该点的操作，不能立即释放</li><li>ABA问题：插入某节点时，该节点的前驱刚被释放且空间被分配到另一个节点（内存复用），导致链表乱序</li><li>线性化问题：遍历链表得到的遍历结果不一定是历史存在过的链表版本数据（解决方案：不提供遍历操作即可，只提供插入删除和查找，这三个操作可以是线性化的）</li></ul><p>解决方案（大部分的问题都是删除操作、释放空间产生的）</p><ul><li>节点不删除，先标记再集中GC，GC加锁<ul><li>s删除导致的GC会出现短暂阻塞，出现长尾</li></ul></li><li>节点删除但不释放内存<ul><li>内存会不断增长</li></ul></li><li>节点删除并释放内存<ul><li>使用引用计数的方式管理链表内存释放，每次遍历对节点进行引用计数（对性能影响较大）</li></ul></li></ul><p>插入删除冲突的解决</p><p>关键在于：被删除节点的next不能被改变，可以将被删除节点的next添加标记符1（next&amp;1），阻止其他线程改变该节点的值。</p><p><img src="https://segmentfault.com/img/bVcXvpQ" alt="image.png" style="zoom:33%;"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool del_node(ListNode* pre_del_node) {        ListNode* del_node = pre_del_node-&gt;next.load();        //1. 标记del_node-&gt;next;        ListNode* excepted_next = del_node-&gt;next.load();        //2. next指针添加标记位        if (!del_node-&gt;next-&gt;compare_exchange_strong(excepted_next, excepted_next&amp;1)) {            return false;        }        //3. 修改前驱节点next指针        if(!pre_del_node-&gt;next.compare_exchange_strong(del_node, del_node-&gt;next)) {            return false;        }               return true;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果修改不成功将退出，插入也类似。</p><p><code>compare_exchange_strong</code></p><p><strong>ABA问题的解决</strong></p><p>使用tagged pointer解决（在指针上带上版本号进行管理）</p><p>使用指针的最高16尾存储指针的版本信息，每次指针内容发生变化时改变版本号（指针一般64位，CPU内存远远不及）<a href="https://www.boost.org/doc/libs/1_57_0/boost/lockfree/detail/tagged_ptr.hpp">参考</a></p><p><strong>内存管理问题解决</strong></p><p>风险指针Hazard Pointers</p><p>原理：</p><ul><li>每个线程把自己访问的节点的地址放在全局可见的地方，这样的全局可见的指针被称为风险指针，访问完节点后清除自己的风险指针</li><li>每个线程维护一个freelist：<ul><li>当某个结点A被删除后，放到freelist里</li><li>检查其他线程的风险指针，看看有没有和A相同的地址，如果没有其他节点正在访问A，A可以被释放</li></ul></li></ul><p>优化：风险指针自身也要保证线程安全，需要高效实现——<code>shared_ptr</code></p><p>使用shared-ptr组织链表，每个ListNode*都是智能指针。</p><p>存在的问题：</p><ul><li>遍历链表时，每走过一个节点，该节点引用数+1，离开时引用数-1，原子操作比较慢，因此搜索速度慢，不满足CSDS的原则</li><li>采用递归方式释放整个链表，或者链表中的一段，可能会导致栈溢出</li><li>如果一个线程获得一个结点的引用计数，但被卡住了一段时间之后才会释放这个计数，该节点所有的后继节点都会被延迟释放</li></ul><h3 id="并行扩张树P-tree"><a href="#并行扩张树P-tree" class="headerlink" title="并行扩张树P-tree"></a>并行扩张树P-tree</h3><p>SunYihan  <em>Parallel Ordered Sets Using Join</em> 2016,<em>PAM: Parallel Augmented Maps</em> 2018,<em>Join-based Parallel Balanced Binary Trees</em> 2019</p><p>对于存储在磁盘上的上万个图节点，在做图算法时，对图进行虚拟化。虚拟图可以使用如下两种方式来动态构建：1. “中断”式的构建；2. 多线程的构建，即存在一个扫描线程，后台扫描满足要求的节点，加载到虚拟图中。</p><p>所谓“中断”式的构建，是指要遍历到的下一个节点不在虚拟图上，触发“中断”，开始从磁盘加载一批新的图节点进来。而多线程构建方式，则是动态卸载已经访问过的节点，同时动态加载新的节点。为了提高对虚拟图读写的并发性，就需要使用一种数据结构：Parrellel Auguemented Map.</p><p>两个基本函数：</p><p><code>join(l,k,R)</code>，表示以k为根节点连接的左右两棵子树LR</p><p><code>expose(T)</code>表示以树T的根k作为分裂节点，将树分裂为L，k，R并返回</p><p>相关函数：</p><p><strong>split ()以k为节点划分树，返回左子树，右子树和是否null</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">split(T,k)    if T = null             (null,false,null)        else (L,m,R)=expose(T)        if k = m             (L,true,R)            else if k &lt; m                (LL,b,LR)=split(L,k)                (LL,b,join(LR,m,R))            else                 (RL,b,RR)=split(R,k)                (join(L,m,RL),b,RR)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>insert（）插入一个新节点</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">insert(T,k) (TL,m,TR)=split(T,k)    join(TL,k,TR)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>splitlast() 移除T最大值的节点（即右子树的最下方的值，返回移除后的平衡树和移除的节点）</strong></p><pre class="line-numbers language-none"><code class="language-none">splitlast(T)    (L,k,R)=expose(T)    if R=null        (L,k)    else        (T',k')=splitLast(R)        (join(L,k,T'),k')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>join2() 将两棵树拼接起来，根节点为左子树的最大根</strong></p><pre class="line-numbers language-none"><code class="language-none">join2(TL,TR)    if TL = null        TR    else       (TL',k)=splitlast(TL)       join(TL',k,TR)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>delete()从T中删除一个节点k</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">delete(T,k)    (TL,m,TR)=split(T,k)    join2(TL,TR)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>以上的几个函数未涉及并发，在以上的基础上，使用并发进行实现以下函数：(用来处理节点过多的情况，提高效率)</p><p><em>其中，||表示左右两边的函数可以并发进行</em></p><p><strong>union()将两个树合并成一个新的树</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">union(T1,T2)    if T1 = null         T2    else if T2 = null        T1    else        (L2,k,R2)=expose(T2)        (L1,m,R1)=spilt(T1,k)       TL=union(L1,L2)|| TR=union(R1,R2)        join(TL,k,TR)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>difference(T1,T2) 将T1中包含T2的节点删除，可以用来批量删除节点</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">difference(T1,T2)    if T1=null        null    else if T2=null        T1    else        (L2,k,R2)=expose(T2)        (L1,m,R2)=split(T1,k)        T1=difference(L1,L2) || T2=difference(R1,R2)        join2(T1,TR)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;并行数据结构&quot;&gt;&lt;a href=&quot;#并行数据结构&quot; class=&quot;headerlink&quot; title=&quot;并行数据结构&quot;&gt;&lt;/a&gt;并行数据结构&lt;/h2&gt;&lt;p&gt;并行数据结构的几个概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;non-blocking&lt;/p&gt;
&lt;p&gt;一个线程被挂</summary>
      
    
    
    
    <category term="HPC" scheme="http://sn1987a-1.github.io/categories/HPC/"/>
    
    
    <category term="并行数据结构" scheme="http://sn1987a-1.github.io/tags/%E5%B9%B6%E8%A1%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>CGO</title>
    <link href="http://sn1987a-1.github.io/posts/d4c66f48.html"/>
    <id>http://sn1987a-1.github.io/posts/d4c66f48.html</id>
    <published>2023-09-20T12:48:34.000Z</published>
    <updated>2023-09-23T13:03:50.253Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CGO"><a href="#CGO" class="headerlink" title="CGO"></a>CGO</h2><h4 id="在Go中调用C的代码"><a href="#在Go中调用C的代码" class="headerlink" title="在Go中调用C的代码"></a>在Go中调用C的代码</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//include "xxx.h"</span><span class="token keyword">import</span> <span class="token string">"C"</span>C<span class="token punctuation">.</span><span class="token function">puts</span><span class="token punctuation">(</span>helloworld<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>.h文件中声明函数，.c/.cpp文件对应函数的定义</p><p>import “C”前面的注释即为要运行的C代码</p><p>默认C，如果需要用C++（cpp文件），要声明：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">export</span> <span class="token string">"C"</span><span class="token punctuation">{</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;xxx.h&gt;</span></span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Go生成C函数</strong></p><p>通过使用<code>extern "C"</code>，可以确保函数在C链接下可用，从而允许从C代码中调用它，而不会受到C++名称重整的影响。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//export funct</span><span class="token keyword">func</span> funct <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    C<span class="token punctuation">.</span><span class="token function">funct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用go重新实现C语言函数。</p><p>go函数C.CSstring()将字符串转化为(const)char*</p><p>上述函数运行过程：</p><p>Go的main函数执行，到CGO自动生成的C语言版本的funct桥接函数，回到GO中的funct函数。</p><p><strong>C语言可以调用GO生成的函数</strong>，CGO省的”_cgi_export.h”包含了导出后的C语言函数声明</p><h4 id="类型转化"><a href="#类型转化" class="headerlink" title="类型转化"></a>类型转化</h4><p>数字类型转化：</p><div class="table-container"><table><thead><tr><th>C 语言类型</th><th>CGO 类型</th><th>Go 语言类型</th></tr></thead><tbody><tr><td>char</td><td>C.char</td><td>byte</td></tr><tr><td>signed char</td><td>C.schar</td><td>int8</td></tr><tr><td>unsigned char</td><td>C.uchar</td><td>uint8</td></tr><tr><td>short</td><td>C.short</td><td>int16</td></tr><tr><td>unsigned short</td><td>C.ushort</td><td>uint16</td></tr><tr><td>int</td><td>C.int</td><td>int32</td></tr><tr><td>unsigned int</td><td>C.uint</td><td>uint32</td></tr><tr><td>long</td><td>C.long</td><td>int32</td></tr><tr><td>unsigned long</td><td>C.ulong</td><td>uint32</td></tr><tr><td>long long int</td><td>C.longlong</td><td>int64</td></tr><tr><td>unsigned long long int</td><td>C.ulonglong</td><td>uint64</td></tr><tr><td>float</td><td>C.float</td><td>float32</td></tr><tr><td>double</td><td>C.double</td><td>float64</td></tr><tr><td>size_t</td><td>C.size_t</td><td>uint</td></tr></tbody></table></div><p>在CGO生成的<code>_cgo_export.h</code>头文件中，会为go的字符串，切片，字典，接口，管道等特殊数据结构生成对应的C语言类型。（只有切片和字符串有一定的调用价值，因CGO对他们的某些操作函数生成了对应的C语言版本）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span> GoInt n<span class="token punctuation">;</span><span class="token punctuation">}</span> GoString<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span>GoMap<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">void</span> <span class="token operator">*</span>GoChan<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token operator">*</span>t<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token operator">*</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span> GoInterface<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">;</span> GoInt len<span class="token punctuation">;</span> GoInt cap<span class="token punctuation">;</span><span class="token punctuation">}</span> GoSlice<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结构体</strong> 通过<code>C.struct_xxx</code>访问C中定义的struct xxx的结构体类型，结构体内存布局按照C语言通用对齐规则（32/64位），若结构体的成员的名字是go的关键字，可以在成员名开头添加_来访问</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*struct A {    int type; // type 是 Go 语言的关键字};*/</span><span class="token keyword">import</span> <span class="token string">"C"</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> a C<span class="token punctuation">.</span>struct_A    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>_type<span class="token punctuation">)</span> <span class="token comment">// _type 对应 type</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果恰好有两个成员 type,_type，则type将被屏蔽。</p><p>C语言中无法直接访问Go定义的结构体类型。</p><p><strong>切片和字符串</strong></p><p>Go中的切片和C中的指向一定长度内存的指针（slice实际上是简化版的动态数字）</p><p>go中的字符串是只读的</p><p><strong>指针</strong></p><p>C语言中的指针可以进行显示或隐式切换（隐式会在编译阶段给出warnings），go对不同类型的转换非常严格，无法自由转换。如果格式一致，指针可以通用。CGO解决了GO无法自由转换和进行指针运算的限制。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">*</span>X<span class="token keyword">var</span> q <span class="token operator">*</span>Yq <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>Y<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// *X =&gt; *Y</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>X<span class="token punctuation">)</span><span class="token punctuation">(</span>unsafe<span class="token punctuation">.</span><span class="token function">Pointer</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// *Y =&gt; *X</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用unsafe.Pointer作为中间桥接类型实现不同类型指针的转换，转换流程：*X-&gt;unsafe.pointer-&gt;*Y</p><p>同样，go也无法实现数值类型转化为指针类型，采用uintptr作为中间类型实现，转化过程：int32-&gt;uintptr-&gt;unsafe.pointer-&gt;char*</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>C不支持多返回值，但Go需要error返回报错信息(如div除数为0)，解决方案：</p><p>引入errno包</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;errno.h&gt;int div(int a, int b) {    if(b == 0) {        errno = EINVAL;        return 0;    }    return a/b;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CGO的处理：在CGO中如果有两个返回值，那么第二个返回值为errno，可以近似地将函数看作以下类型：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> C<span class="token punctuation">.</span><span class="token function">div</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b C<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>C<span class="token punctuation">.</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token builtin">error</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>void函数</strong>返回值</p><p>按照前文所述，对于没有返回值的void函数，如果出现errno，也只有一个返回值，CGO无法直接判断错误状态，CGO的处理如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"C"</span><span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> C<span class="token punctuation">.</span><span class="token function">noreturn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CGO&quot;&gt;&lt;a href=&quot;#CGO&quot; class=&quot;headerlink&quot; title=&quot;CGO&quot;&gt;&lt;/a&gt;CGO&lt;/h2&gt;&lt;h4 id=&quot;在Go中调用C的代码&quot;&gt;&lt;a href=&quot;#在Go中调用C的代码&quot; class=&quot;headerlink&quot; title=&quot;在</summary>
      
    
    
    
    <category term="Golang" scheme="http://sn1987a-1.github.io/categories/Golang/"/>
    
    
    <category term="CGO" scheme="http://sn1987a-1.github.io/tags/CGO/"/>
    
  </entry>
  
  <entry>
    <title>Golang基础知识</title>
    <link href="http://sn1987a-1.github.io/posts/c303e9c6.html"/>
    <id>http://sn1987a-1.github.io/posts/c303e9c6.html</id>
    <published>2023-09-18T12:48:34.000Z</published>
    <updated>2023-09-23T13:03:58.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="golang"><a href="#golang" class="headerlink" title="golang"></a>golang</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>实现：哈希查找表，通过链表法解决哈希冲突</p><ul><li>随机遍历，顺序无法预测</li><li>扩容特点：逐步进行，新，旧bucket<ul><li>遍历中出现扩容</li><li>遍历前已经开始扩容</li></ul></li></ul><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><p>底层结构：本质上是引用类型，底层结构有三个变量：len，cap，底层数组的指针</p><ul><li>空切片时，cap=len=0</li><li>一般初始化方式<code>a:=[]int{}</code>cap=len=初始化长度</li><li>使用make进行初始化：<code>a:=make([]int,4,5)</code>：cap=5，len=4，a为[0,0,0,0]</li><li><code>var a []int</code>默认cap=len=0</li></ul><p>append操作</p><ul><li>cap足够，直接修改len，追加</li><li>cap不足时…</li><li><em>cap足够时，一次追加多个和多次追加一个结果相同，cap不足时会出现不一样的结果（cap的结果不同，多次追加一个的情况可能会更大）</em></li></ul><p>切片截取操作：</p><ul><li><em>切片进行截取时，数组容量的末尾和原切片数组末尾对齐，数组地址为截取单元的首地址，且可以超过其len的范围进行截取，当其中一个数组发生扩容时，另一个数组的地址不变</em></li></ul><p>切片扩容时会改变：cap和数字指针</p><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><ul><li>引用计数，0回收，无法处理 循环引用</li><li>标记-清除： 需要STW</li><li>分代收集：按照生存周期老/新不同的算法，效率高，算法设计复杂</li><li><strong>三色标记法</strong>：白-垃圾，灰-遍历到的对象，黑，遍历灰色，标记为黑色并将引用的变量标记为灰色，直到没有灰色<ul><li><strong>每次GC循环时，不需要将所有对象移动到白色区域，只要将黑色和白色的颜色互换即可，更高效</strong></li></ul></li><li><strong>STW</strong>：影响性能&lt;1ms</li><li><strong>写屏障技术</strong>缩短STW<ul><li>引用对象丢失：黑色节点添加了指向白色结点的引用，但无法被扫描</li><li>破坏以下二者之一：<ul><li>dijistra写屏障（强三色不变性），不允许黑色节点引用白色节点，引用则将白色节点改为灰色</li><li>yuasa写屏障（弱三色不变性），白色节点被删除了一个引用时，认为会被黑色节点新增引用（悲观），设置为灰色</li></ul></li></ul></li></ul><p>go的垃圾回收器是和主程序并行的，关键在于三色标记法能让系统的gc暂停时间能够预测</p><h3 id="GPM调度和CSP模型"><a href="#GPM调度和CSP模型" class="headerlink" title="GPM调度和CSP模型"></a>GPM调度和CSP模型</h3><p><em>不要以共享内存的方式来通信，要以通信的方式来共享内存</em></p><ul><li>CSP模型：以通信的方式共享内存（channel进行通信）</li><li><p>GPM含义</p><ul><li>G：go协程Goroutine</li><li>M：工作线程，CPU数量</li><li>P：处理器，用来调度G，M的关联关系，M拥有P才能执行G的代码</li></ul></li><li><p>Goroutine的调度策略</p><ul><li>队列轮转：P周期性地调度G到M中运行，一段时间后保存上下文切换（队列）</li><li>系统调用：G0即将进入系统调用时，M0释放P，某个M1获得P运行剩下的G，G0结束后等待其他的P调度（或空闲P），此后进入缓存池睡眠</li></ul></li></ul><h3 id="Chan原理（channel）"><a href="#Chan原理（channel）" class="headerlink" title="Chan原理（channel）"></a>Chan原理（channel）</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">  <span class="token keyword">type</span> hchan <span class="token keyword">struct</span> <span class="token punctuation">{</span> qcount   <span class="token builtin">uint</span>  <span class="token comment">// 队列中的总元素个数</span> dataqsiz <span class="token builtin">uint</span>  <span class="token comment">// 环形队列大小，即可存放元素的个数</span> buf      unsafe<span class="token punctuation">.</span>Pointer <span class="token comment">// 环形队列指针</span> elemsize <span class="token builtin">uint16</span>  <span class="token comment">//每个元素的大小</span> closed   <span class="token builtin">uint32</span>  <span class="token comment">//标识关闭状态</span> elemtype <span class="token operator">*</span>_type <span class="token comment">// 元素类型</span> sendx    <span class="token builtin">uint</span>   <span class="token comment">// 发送索引，元素写入时存放到队列中的位置</span> recvx    <span class="token builtin">uint</span>   <span class="token comment">// 接收索引，元素从队列的该位置读出</span> recvq    waitq  <span class="token comment">// 等待读消息的goroutine队列</span> sendq    waitq  <span class="token comment">// 等待写消息的goroutine队列</span> lock mutex  <span class="token comment">//互斥锁，chan不允许并发读写</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>写数据<ul><li>recvq不为空，缓冲区无数据/无缓冲区，则直接从recvq取出G，写入数据，并把G唤醒</li><li>缓冲区有空余位置，写入缓冲区</li><li>缓冲区无空余位置，将数据写入G，将当前G加入sendq，进入睡眠被唤醒</li></ul></li><li>读数据<ul><li>sendq不为空，且无缓冲区，直接从sendq去除G，把G数据读走并唤醒</li><li>sendq不为空（缓冲区已满），从缓冲区首部读出数据，将G中的数据写入缓冲区尾部，唤醒G</li><li>缓冲区有数据，从缓冲区读取数据</li><li>将当前G加入recvq进入睡眠</li></ul></li><li>关闭channel<ul><li>唤醒recvq中所有的G，本该写入数据的内容为nil，sendq中的G唤醒（会出现panic）</li><li>panic出现的场景<ul><li>关闭值为nil的channel</li><li>关闭已经关闭的channel</li><li>向已关闭的channel写入数据</li></ul></li></ul></li></ul><p>无缓冲区情况：读和写同步（会阻塞）</p><h3 id="context上下文结构"><a href="#context上下文结构" class="headerlink" title="context上下文结构"></a>context上下文结构</h3><p>并发安全，树状的goroutine</p><p>只定义了接口</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"> <span class="token keyword">type</span> Context <span class="token keyword">interface</span> <span class="token punctuation">{</span>   <span class="token function">Deadline</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>deadline time<span class="token punctuation">.</span>Time<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>   <span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span>   <span class="token function">Value</span><span class="token punctuation">(</span>key <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>deadline：到达ddl自动发起取消请求</li><li>Done：返回只读的channel，如果可以读取说明已经发出取消信号，可以清理并释放</li><li>err：返回被取消的原因</li><li>value：获取context上绑定的值，key-value</li></ul><h3 id="竞态与内存逃逸"><a href="#竞态与内存逃逸" class="headerlink" title="竞态与内存逃逸"></a>竞态与内存逃逸</h3><ul><li><p>竞态：在程序中，同一个内存块被多个gorountine访问</p><ul><li>解决：对资源进行加锁，sync.Mutex,sync.RWMutex</li><li>检测：添加<code>-race</code></li></ul></li><li><p>逃逸分析：内存的分配位置由编译器决定，分配速度慢且会形成内存碎片</p><p>以下场景</p><ul><li>指针逃逸</li><li>栈空间不足逃逸</li><li>动态类型逃逸</li><li>闭包引用对象逃逸</li></ul></li></ul><h3 id="零碎"><a href="#零碎" class="headerlink" title="零碎"></a>零碎</h3><p><strong>安全读写共享变量方式</strong></p><ul><li>Mutex锁</li><li>goroutine通过channel</li></ul><p><strong>new和make的区别</strong></p><ul><li>make用来分配和初始化类型为slice，map，chan的数据，new任意数据并返回内存指针</li><li>make返回引用，即type，分配空间后进行初始，new分配的空间会被清零</li></ul><p><strong>对nil的slice和空silce的处理区别</strong></p><ul><li>slice:=make([]int,0)：空slice，不为0</li><li>slice:=[]int{} 值是nil，保证返回slice的函数异常时仍可保证返回nil</li></ul><p><strong>协程，进程，线程的区别</strong></p><ul><li><p>进程: 进程是具有一定独立功能的程序，进程是系统资源分配和调度的最小单位。 每个进程都有自己的独立内存空间，不同进程通过进程间通信来通信。由于进程比较重量，占据独立的内存，所以上下文进程间的切换开销（栈、寄存器、虚拟内存、文件句柄等）比较大，但相对比较稳定安全。</p></li><li><p>线程: 线程是进程的一个实体,线程是内核态,而且是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。线程间通信主要通过共享内存，上下文切换很快，资源开销较少，但相比进程不够稳定容易丢失数据。</p></li><li><p>协程: 协程是一种用户态的轻量级线程，协程的调度完全是由用户来控制的。协程拥有自己的寄存器上下文和栈。 协程调度切换时，将寄存器上下文和栈保存到其他地方，在切回来的时候，恢复先前保存的寄存器上下文和栈，直接操作栈则基本没有内核切换的开销，可以不加锁的访问全局变量，所以上下文的切换非常快。</p></li></ul><p><strong>golang的内存模型中，为什么小对象多了会加大GC压力</strong></p><ul><li><p>小对象过多会导致GC三色法消耗过多CPU</p></li><li><p>解决思路：减少对象分配</p></li></ul><p><strong>channel为什么可以做到线程安全</strong></p><ul><li>先进先出，本身用来在多任务间传递数据，通过通信共享内存，有天然优势</li></ul><p><strong>GC触发条件</strong></p><ul><li>手动触发（主动）：调用runtime.GC，阻塞式</li><li>被动触发：<ul><li>系统监控，超过两分钟没有GC则触发</li><li>pacing（步调）算法，控制内存增长的比例，每次分配内存时检测是否以达到阈值，默认100%</li></ul></li></ul><p><strong>goroutine的数量查看和限制</strong></p><ul><li>查看： GOMAXPROCS控制未被阻塞的所有goroutine，通过GOMAXPROCE即可查看</li><li>限制：使用channel，每次执行goroutine前向通道写入值</li></ul><p><strong>Channel是同步还是异步的</strong></p><p>​    异步的</p><ul><li>channel的状态：<ul><li>nil，初始或手动赋值，无法关闭（panic），send/recv被永久阻塞</li><li>closed，关闭或send会panic，recv不会阻塞</li><li>active，可关闭，send/recv</li></ul></li></ul><p><strong>goroutine 和线程的区别</strong></p><ul><li>线程可以有多个goroutine</li><li>线程，进程都是同步的，协程是异步的</li><li>协程可以保留上一次调用的状态</li><li>协程需要线程来承载运行，不能代替线程</li><li><strong>线程是分割的CPU资源，协程是组织好的代码流程</strong></li></ul><p><strong>struct能不能比较</strong></p><ul><li>相同struct类型可以</li><li>不同struct不能比较，编译不通过</li></ul><p><strong>go主协程如何等待其他协程</strong></p><p>用sync.WaitGroup，内部实现计数器计数未完成的操作个数，Add()添加计数，Done()计数减一，Wait()等待所有操作结束，计数为0（立即返回）</p><p><strong>slice扩容</strong></p><p>append追加元素，空间不足则扩容，重新分配slice</p><p>扩容规则（只对容量）</p><ul><li>小于1024：扩容时翻倍，超过1024，增长因子变为1.25</li><li>容量够用则追加，len++</li><li>容量不够用，先扩容再追加</li></ul><p><strong>map顺序读取</strong></p><p>（一般是随机的）</p><p>先把map中的key用sort排序后根据key读取</p><p><strong>值接收者和指针接收者</strong></p><p>方法的接收者</p><ul><li>值类型：可以调用值接收者的方法和指针接收者的方法</li><li>指针类型：可以调用值接收者的方法和指针接收者的方法</li></ul><p>接口实现不同：</p><ul><li>值类型接口：类型本身和该类型的指针类型都实现了该接口</li><li>指针类型接口：只有对应的指针类型才被认为实现了接口</li></ul><p>通常使用指针作为方法的接收者</p><ul><li>能够修改接收者指向的值</li><li>避免每次调用方法时复制该值，更高效</li></ul><p><strong>发生内存泄漏的原因</strong></p><ul><li>goroutine需要维护用户代码的上下文信息，运行过程中需要消耗一定的内存来保存此类信息，如果一个程序不断产生goroutine，不结束已创建的goroutine并复用该部分内存，会造成内存泄漏</li></ul><p>协程泄露：（某段代码卡住，陷入死循环等）应该被释放的协程没有被正确释放</p><p><strong>如何检测内存泄漏</strong></p><p>自带的工具：pprof，或者用Gops检测当前运行的go程占用的资源</p><p><strong>两个nil可能不相等</strong></p><p>接口interface是对接口值的封装，内部包含类型T和值V，一个接口为nil当且仅当T=nil，V=unset</p><p>两个接口比较时，先比较T再比较V(接口值和非接口值进行比较会将非接口值转化为接口值)</p><p>例如<code>var p *int =nil</code>转化为接口值T=*int，显然和值为nil的接口不相等</p><p><strong>函数传参是值类型还是引用类型</strong></p><p>只存在值传递（值或指针的副本），都会开辟新的空间</p><p>不要混淆值传递，引用传递和值类型，引用类型</p><p><strong>内存对齐</strong></p><p>CPU都是以字长访问的（32位，64位），不进行内存对齐会增加CPU访问内存的次数，内存对齐对实现变量的原子性操作有好处（并发场景下）</p><p><strong>两个interface的比较</strong></p><ul><li>判断类型是否一样：<code>reflect.TypeOf(a).Kind()</code></li><li>判断接口是否相等：<code>reflect.DeepEqual(a,b,interface{})</code></li><li>将interface赋值给另一个：<code>reflect.ValueOf(a).Elem().Set(reflect.ValueOf(b))</code></li></ul><p><strong>打印<code>%v</code>,<code>%+v</code>,<code>%#v</code>的区别</strong></p><p>(输出struct中的元素)</p><ul><li>%v输出所有的值</li><li>%+v先输出字段名字，再输出该字段的值（name:value）</li><li>%#v先输出结构体名字，再输出结构体（name:value）</li></ul><p><strong>rune类型</strong></p><p>go的字符有以下两种</p><ul><li>uint8（byte），表示ASCII的字符</li><li>rune类型，表示UTF-8字符，等价于int32</li></ul><p>string底层通过byte数组实现，对string求len计算了字节长度</p><p>[]rune(str)  :string转化为rune类型，统计长度示例：</p><ul><li>“hello 你好” string length=12(汉字3个),rune length=8</li></ul><p><strong>空struct{}占用的空间</strong></p><p>使用unsafe.Sizeof(struct{})=0，不占用任何内存空间</p><p><strong>空struct的用途</strong></p><p>优点：不占内存空间，通常被当作占位符</p><ul><li>map作为集合使用（<code>type set map[string]struct{}</code>)</li><li>不发送数据的channel，只是通知子协程执行任务或控制协程并发（<code>make(chan struct{})</code>）</li><li>有可能结构体中只包含方法，不含任何字段</li></ul><p><strong>变量的分配位置在堆上还是栈上</strong></p><p>由编译器决定，如果无法判断变量作用域和大小，通常会分配到堆上（堆上的变量在函数出栈自行释放，无需gc）</p><p><strong>select执行</strong></p><p>select：多个可用操作：随机选一个</p><ul><li>select 中只要有一个 case 能 return，则立刻执行</li><li>当如果同一时间有多个 case 均能 return 则伪随机方式抽取任意一个执行</li><li>如果没有一个 case 能 return 则可以执行”default” 块</li></ul><p><strong>array和slice的区别</strong></p><ul><li>array：固定长度，<em>长度是数组类型的一部分</em>，需指定大小或根据初始化值确定</li><li>slice：可变长度，三个属性：<em>指针，长度，容量</em>，通过make初始化，可以扩容</li></ul><p><strong>defer的作用</strong></p><p>在<strong>调用</strong>普通函数或方法前加上关键词defer即可。defer被执行时，defer后面的函数被延迟执行，直到包含该defer语句的函数执行完毕（不管return结束还是panic结束），即为在函数返回之前调用，<strong>defer是在return之前完成的</strong>。</p><p>常被用于处理成对的操作，保证资源能被释放等（打开/关闭，连接/断开，加锁/释放锁）</p><p>释放资源的defer跟在请求资源的语句后</p><p>最后面的defer最先被调用（类似于栈）</p><p><em>return xxx并不是一条原子语句</em>：先给返回值赋值，再调用defer语句，例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     t <span class="token operator">:=</span> <span class="token number">5</span>     <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       t <span class="token operator">=</span> t <span class="token operator">+</span> <span class="token number">5</span>     <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token keyword">return</span> t<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回值为5</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">defer_call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打印前"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打印中"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打印后"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"触发异常"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">打印后打印中打印前panic:触发异常<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>go关键字</strong></p><p><code>go func(x,y,z)</code>只有fun(x,y,z)在新的goroutine中运行，参数的计算在原goroutine中完成。</p><p><strong>var和:=定义变量的区别</strong></p><p><code>:=</code>只能在声明局部变量使用，<code>var</code>无限制</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> student <span class="token keyword">struct</span> <span class="token punctuation">{</span>    Name <span class="token builtin">string</span>    Age  <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">pase_student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    m <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>student<span class="token punctuation">)</span>    stus <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>student<span class="token punctuation">{</span>        <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"zhou"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"li"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">23</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>Name<span class="token punctuation">:</span> <span class="token string">"wang"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> stu <span class="token operator">:=</span> <span class="token keyword">range</span> stus <span class="token punctuation">{</span>        m<span class="token punctuation">[</span>stu<span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>stu    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误：<code>for _, stu := range stus {m[stu.Name] = &amp;stu}</code>一句中，stu实际上是副本，所以此处返回的均为同一个地址。</p><p>修改：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>stus<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span>  <span class="token punctuation">{</span>       m<span class="token punctuation">[</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    runtime<span class="token punctuation">.</span><span class="token function">GOMAXPROCS</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    wg <span class="token operator">:=</span> sync<span class="token punctuation">.</span>WaitGroup<span class="token punctuation">{</span><span class="token punctuation">}</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A: "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B: "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>            wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果 <code>A:</code>均为输出 10，<code>B:</code>从 0~9 输出 (顺序不定)</p><p><strong>defer多层嵌套</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>       <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span>       fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"D"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"E"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"F"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果输出顺序：AFEDBC</p><pre class="line-numbers language-GO" data-language="GO"><code class="language-GO">func main() {    for i:=0; i&lt;5; i++ {        defer func() {           fmt.Println(i)         }()    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：5 5 5 5 5</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>         <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出：4 3 2 1 0</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">calc</span><span class="token punctuation">(</span>index <span class="token builtin">string</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    ret <span class="token operator">:=</span> a <span class="token operator">+</span> b    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> ret<span class="token punctuation">)</span>    <span class="token keyword">return</span> ret<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    a <span class="token operator">:=</span> <span class="token number">1</span>    b <span class="token operator">:=</span> <span class="token number">2</span>    <span class="token keyword">defer</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">defer</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">10 1 2 320 0 2 22 0 2 21 1 3 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;golang&quot;&gt;&lt;a href=&quot;#golang&quot; class=&quot;headerlink&quot; title=&quot;golang&quot;&gt;&lt;/a&gt;golang&lt;/h2&gt;&lt;h3 id=&quot;map&quot;&gt;&lt;a href=&quot;#map&quot; class=&quot;headerlink&quot; title=&quot;map</summary>
      
    
    
    
    <category term="Golang" scheme="http://sn1987a-1.github.io/categories/Golang/"/>
    
    
    <category term="Go" scheme="http://sn1987a-1.github.io/tags/Go/"/>
    
  </entry>
  
  <entry>
    <title>AI algorithms</title>
    <link href="http://sn1987a-1.github.io/posts/e95a583.html"/>
    <id>http://sn1987a-1.github.io/posts/e95a583.html</id>
    <published>2023-06-30T12:48:34.000Z</published>
    <updated>2023-09-24T03:27:01.940Z</updated>
    
    <content type="html"><![CDATA[<p>贝叶斯网络，k-means 和transformer</p><h2 id="PART1"><a href="#PART1" class="headerlink" title="PART1"></a>PART1</h2><h3 id="手写数字识别"><a href="#手写数字识别" class="headerlink" title="手写数字识别"></a>手写数字识别</h3><p>本部分通过贝叶斯网络实现手写数字的识别</p><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><ul><li><p>fit函数</p><p>Pixels中每一行代表一个图像，每一列代表一个像素值。Labels是一个形状为（n_samples,）的向量，其中每个元素都是相应图像的类标签。</p><p>该方法通过计算每个类别的先验概率和给定每个类别的每个像素值的条件概率，将模型与数据拟合。它使用类的两个属性：self.labels_prior 和 self.pixels_cond_label。前者是一个形状为(n_classes,)的向量，用于存储每个类别的先验概率。后者是一个形状为（n_pixels, n_values, n_classes）的矩阵，存储了给定每个类别的每个像素值的条件概率。该方法通过计算数据中每个类别和每个像素值的频率并除以适当的分母来更新这些属性。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pixels<span class="token punctuation">,</span> labels<span class="token punctuation">)</span><span class="token punctuation">:</span>    n_samples <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>labels<span class="token punctuation">)</span>    <span class="token keyword">for</span> label <span class="token keyword">in</span> labels<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>labels_prior<span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>labels_prior <span class="token operator">/=</span> n_samples        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_samples<span class="token punctuation">)</span><span class="token punctuation">:</span>            pixel_values <span class="token operator">=</span> pixels<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            label <span class="token operator">=</span> labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">for</span> pixel <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_pixels<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>pixels_cond_label<span class="token punctuation">[</span>pixel<span class="token punctuation">]</span><span class="token punctuation">[</span>pixel_values<span class="token punctuation">[</span>pixel<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>label<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>                <span class="token keyword">for</span> pixel <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_pixels<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">for</span> value <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_values<span class="token punctuation">)</span><span class="token punctuation">:</span>                        self<span class="token punctuation">.</span>pixels_cond_label<span class="token punctuation">[</span>pixel<span class="token punctuation">]</span><span class="token punctuation">[</span>value<span class="token punctuation">]</span> <span class="token operator">/=</span> self<span class="token punctuation">.</span>labels_prior<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>predict函数</p><p>该方法返回一个形状为（n_samples,）的向量，其中每个元素都是相应图像的预测类别标签。通过找到后验概率最大的类别来获得预测结果。通过拟合方法计算self.labels_prior和self.pixels_cond_label属性。该方法对每幅图像和每个类别进行循环，并通过将先验概率的对数与给定类别的每个像素值的条件概率的对数相加来计算后验概率。然后将后验概率与当前最大值进行比较，如果后验概率大于当前最大值，则更新预测标签。然后将预测标签分配给输出向量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> pixels<span class="token punctuation">)</span><span class="token punctuation">:</span>      n_samples <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>pixels<span class="token punctuation">)</span>      labels <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n_samples<span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_samples<span class="token punctuation">)</span><span class="token punctuation">:</span>          pixel_values <span class="token operator">=</span> pixels<span class="token punctuation">[</span>i<span class="token punctuation">]</span>          max_posterior <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"-inf"</span><span class="token punctuation">)</span>          predicted_label <span class="token operator">=</span> <span class="token boolean">None</span>          <span class="token keyword">for</span> label <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_labels<span class="token punctuation">)</span><span class="token punctuation">:</span>              posterior <span class="token operator">=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>labels_prior<span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token keyword">for</span> pixel <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>n_pixels<span class="token punctuation">)</span><span class="token punctuation">:</span>                  posterior <span class="token operator">+=</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>self<span class="token punctuation">.</span>pixels_cond_label<span class="token punctuation">[</span>pixel<span class="token punctuation">]</span><span class="token punctuation">[</span>pixel_values<span class="token punctuation">[</span>pixel<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>label<span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token keyword">if</span> posterior <span class="token operator">&gt;</span> max_posterior<span class="token punctuation">:</span>                  max_posterior <span class="token operator">=</span> posterior                  predicted_label <span class="token operator">=</span> label          labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> predicted_label      <span class="token keyword">return</span> labels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h3><p>本部分使用k-means实现图片压缩，并在不同的参数下实现不同的压缩效果。</p><h4 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h4><p>图片压缩的原理是将图片中的像素分成几个类别，每个类别用一个代表颜色来表示，从而减少图片中的颜色数目，降低文件大小。步骤如下：</p><ul><li>使用RGB颜色空间表示图像的颜色，将图片展平为一个二维数组，每一行代表一个像素，每一列代表一个颜色通道。</li><li>对展平的图片数组应用K-means聚类算法，K代表压缩后的图片中想要的颜色数目。算法会根据像素的RGB值将相似的像素分到一起，并给每个类别分配一个平均的RGB值。其中K的值决定了压缩的程度。</li><li>将原始图片中的每个像素替换为其所属类别的平均RGB值。这样就得到了一个颜色数目更少，但是外观相似的图片。</li></ul><h4 id="实验内容-1"><a href="#实验内容-1" class="headerlink" title="实验内容"></a>实验内容</h4><ul><li><p>assign_points函数</p><p>主要流程：</p><ul><li>遍历每个样本点，计算它与每个聚类中心的欧几里得距离，使用np.linalg.norm函数。</li><li>找出距离最小的聚类中心的索引，使用np.argmin函数，将其作为该样本点的聚类标签，存入labels数组中。</li><li>最后更新labels数组。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">assign_points</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> centers<span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">:</span>        n_samples<span class="token punctuation">,</span> n_dims <span class="token operator">=</span> points<span class="token punctuation">.</span>shape        labels <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>n_samples<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_samples<span class="token punctuation">)</span><span class="token punctuation">:</span>            distances <span class="token operator">=</span> np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> centers<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            labels<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>distances<span class="token punctuation">)</span>        <span class="token keyword">return</span> labels<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>uptdate_centers函数</p><p>主要流程</p><ul><li>遍历每个聚类中心，找出所有属于该聚类的样本点。</li><li>如果该聚类有样本点，则计算这些样本点在每个维度上的平均值作为新的聚类中心。</li><li>如果该聚类没有样本点，则保持原来的聚类中心不变。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">update_centers</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> centers<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            cluster_points <span class="token operator">=</span> points<span class="token punctuation">[</span>labels <span class="token operator">==</span> k<span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cluster_points<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                centers<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> cluster_points<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> centers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>fit函数</p><p>主要流程：</p><ul><li>调用initialize_centers方法，随机初始化聚类中心centers。</li><li>进行max_iter次循环<ul><li>调用assign_points方法，根据当前的聚类中心centers，将每个样本点分配到最近的聚类中，得到每个样本点的聚类标签labels。</li><li>调用update_centers方法，根据新的点分配labels，更新聚类中心centers。</li></ul></li><li>返回最终的聚类中心centers。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> points<span class="token punctuation">)</span><span class="token punctuation">:</span>        centers <span class="token operator">=</span> self<span class="token punctuation">.</span>initialize_centers<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>max_iter<span class="token punctuation">)</span><span class="token punctuation">:</span>            labels <span class="token operator">=</span> self<span class="token punctuation">.</span>assign_points<span class="token punctuation">(</span>centers<span class="token punctuation">,</span> points<span class="token punctuation">)</span>            centers <span class="token operator">=</span> self<span class="token punctuation">.</span>update_centers<span class="token punctuation">(</span>centers<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> points<span class="token punctuation">)</span>        <span class="token keyword">return</span> centers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>compress函数</p><p>主要流程</p><ul><li>将图片的像素值展平为一个RGB二维数组。</li><li>调用fit方法，对展平的像素点进行K-means聚类，得到聚类中心centers。</li><li>对于每个像素点，计算它与每个聚类中心的欧几里得距离，找出距离最小的聚类中心的索引。</li><li>用距离最小的聚类中心的颜色值替换原来的像素值，得到压缩后的像素点。</li><li>像素点重塑为原来的图片形状，得到压缩后的图片。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">compress</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> img<span class="token punctuation">)</span><span class="token punctuation">:</span>        points <span class="token operator">=</span> img<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        centers <span class="token operator">=</span> self<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>points<span class="token punctuation">)</span>        compressed_img <span class="token operator">=</span> centers<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>np<span class="token punctuation">.</span>linalg<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>points<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>newaxis<span class="token punctuation">]</span> <span class="token operator">-</span> centers<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        compressed_img <span class="token operator">=</span> compressed_img<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>        <span class="token keyword">return</span> compressed_img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="PART-2"><a href="#PART-2" class="headerlink" title="PART 2"></a>PART 2</h2><h3 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h3><h4 id="实验内容-2"><a href="#实验内容-2" class="headerlink" title="实验内容"></a>实验内容</h4><h5 id="char-tokenizer"><a href="#char-tokenizer" class="headerlink" title="char_tokenizer"></a>char_tokenizer</h5><p>实现了一个基于字符的分词器。将一个字符串转换为一个整数列表，或者将一个整数列表转换为一个字符串。</p><p>具体功能包含以下部分：</p><ul><li><p>初始化__init__，计算语料库中的不同字符的个数，并创建一个字典，将每个字符映射到一个唯一的整数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> corpus<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>corpus <span class="token operator">=</span> corpus        self<span class="token punctuation">.</span>vocab <span class="token operator">=</span> <span class="token punctuation">{</span>char<span class="token punctuation">:</span> i <span class="token keyword">for</span> i<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>corpus<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        self<span class="token punctuation">.</span>n_vocab <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>编码encode，编码文本，将字符串中的每个字符替换为字典中对应的整数，并返回一个整数列表。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">encode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        encode_res<span class="token operator">=</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> string<span class="token punctuation">]</span>        <span class="token keyword">return</span> encode_res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>解码decode，解码编码。将整数列表中的每个整数替换为字典中对应的字符，并返回一个字符串。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">decode</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> codes<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        decode_res<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>vocab<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> codes<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> decode_res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="Head"><a href="#Head" class="headerlink" title="Head"></a>Head</h5><p>自注意力是一种用于捕捉序列中的长距离依赖关系的机制，它通过计算序列中每个元素与其他元素的相关性来生成一个加权平均的输出。本部分实现了一个注意力单头。</p><p>具体功能包含以下部分：</p><ul><li><p>init</p><p>创建三个线性层，分别称为Key，Query和Value，它们都将输入维度n_embd映射到输出维度head_size。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>Key <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_embd<span class="token punctuation">,</span> head_size<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>Query <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_embd<span class="token punctuation">,</span> head_size<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>Value <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_embd<span class="token punctuation">,</span> head_size<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>head_size <span class="token operator">=</span> head_size    self<span class="token punctuation">.</span>register_buffer<span class="token punctuation">(</span><span class="token string">"tril"</span><span class="token punctuation">,</span> torch<span class="token punctuation">.</span>tril<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>block_size<span class="token punctuation">,</span> block_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>forward函数</p><ul><li>调用Key，Query和Value对inputs进行线性变换。</li><li>计算query和key张量的点积，并在最后两个维度上转置key张量，得到scores张量。</li><li>对scores张量进行掩码操作，将其上三角部分（包括对角线）填充为负无穷大。</li><li>在最后一个维度上对scores张量进行softmax操作，得到weights张量，表示每个元素对其他元素的注意力权重。</li><li>通过weights和value计算得到out张量，表示每个元素的加权平均输出。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        key <span class="token operator">=</span> self<span class="token punctuation">.</span>Key<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        query <span class="token operator">=</span> self<span class="token punctuation">.</span>Query<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        value <span class="token operator">=</span> self<span class="token punctuation">.</span>Value<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>        scores <span class="token operator">=</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>query<span class="token punctuation">,</span> key<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>head_size<span class="token punctuation">)</span>        mask <span class="token operator">=</span> torch<span class="token punctuation">.</span>tril<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">bool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        scores <span class="token operator">=</span> scores<span class="token punctuation">.</span>masked_fill<span class="token punctuation">(</span>mask <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">'-inf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        weights <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>scores<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        out <span class="token operator">=</span> torch<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>weights<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="MultiHead-Attention"><a href="#MultiHead-Attention" class="headerlink" title="MultiHead_Attention"></a>MultiHead_Attention</h5><p>多头自注意力是一种将多个单头自注意力的输出拼接起来，并进行线性变换的机制。本部分在Head的基础上实现了MultiHead。</p><ul><li><p>init函数</p><ul><li><p>创建一个模块列表，包含n_heads个Head对象。</p></li><li><p>创建一个线性层，将n_heads * head_size映射到n_embd</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_heads<span class="token punctuation">,</span> head_size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>heads <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span><span class="token punctuation">[</span>Head<span class="token punctuation">(</span>head_size<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_heads<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>projection <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_heads <span class="token operator">*</span> head_size<span class="token punctuation">,</span> n_embd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>forward函数</p><ul><li>对heads列表中的每个Head对象，调用其前向方法，对inputs进行单头自注意力，并将所有单头的输出在最后一个维度上拼接起来.</li><li>调用projection层，对拼接后的张量进行线性变换，并返回。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>    out <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>head<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span> <span class="token keyword">for</span> head <span class="token keyword">in</span> self<span class="token punctuation">.</span>heads<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>projection<span class="token punctuation">(</span>out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="Feedforward"><a href="#Feedforward" class="headerlink" title="Feedforward"></a>Feedforward</h5><p>前馈神经网络是一种将输入通过一系列的线性变换和非线性激活函数映射到输出的机制。</p><ul><li><p>init函数</p><p>创建一个顺序模块，包含两个线性层和一个ReLU激活函数。第一个线性层将n_embd映射到4<em>n_embd，第二个线性层将4</em>n_embd映射回n_embd。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">FeedForward</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_embd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        Linear_1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_embd<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span>n_embd<span class="token punctuation">)</span>        Linear_2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>n_embd<span class="token punctuation">,</span> n_embd<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>net <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>Linear_1<span class="token punctuation">,</span>nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Linear_2<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>net<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h5><p>本部分将多头自注意力和前馈神经网络结合起来，并使用残差连接和层归一化的机制，实现序列到序列的映射和编码。</p><ul><li><p>init函数</p><p>创建两个层归一化层，一个多头自注意力模块和一个前馈神经网络模块</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n_embd<span class="token punctuation">,</span> n_heads<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>norm1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>n_embd<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>norm2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>n_embd<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>attention <span class="token operator">=</span> MultiHeadAttention<span class="token punctuation">(</span>n_heads<span class="token punctuation">,</span> n_embd<span class="token operator">//</span>n_heads<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>feed_forward <span class="token operator">=</span> FeedForward<span class="token punctuation">(</span>n_embd<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>forward函数</p><ul><li>对inputs和多头自注意力模块的输出即相加，对第一个层归一化，得到attention_output。</li><li>对attention_output和前馈神经网络模块的输出相加，对第二个层归一化得到outputs。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>       attention_output <span class="token operator">=</span> self<span class="token punctuation">.</span>norm1<span class="token punctuation">(</span>inputs<span class="token operator">+</span>self<span class="token punctuation">.</span>attention<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">)</span>       outputs <span class="token operator">=</span> self<span class="token punctuation">.</span>norm2<span class="token punctuation">(</span>attention_output<span class="token operator">+</span>self<span class="token punctuation">.</span>feed_forward<span class="token punctuation">(</span>attention_output<span class="token punctuation">)</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> outputs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h5 id="Transformer-1"><a href="#Transformer-1" class="headerlink" title="Transformer"></a>Transformer</h5><p>借助以上的模块，可以构建Transformer模块。</p><ul><li><p>init</p><ul><li>嵌入表，将词汇表中的每个单词映射到一个n_embd维的向量。</li><li>归一化层，对输入进行归一化处理。</li><li>线性层，将n_embd维的向量映射回词汇表中的每个单词。</li><li>位置嵌入参数，表示每个位置的向量，用于增加位置信息。</li><li>模块列表，包含n_layers个变换器的块。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Embedding<span class="token punctuation">(</span>n_vocab<span class="token punctuation">,</span> n_embd<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>norm <span class="token operator">=</span> nn<span class="token punctuation">.</span>LayerNorm<span class="token punctuation">(</span>n_embd<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>linear <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>n_embd<span class="token punctuation">,</span> n_vocab<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>position_embedding <span class="token operator">=</span> nn<span class="token punctuation">.</span>Parameter<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> block_size<span class="token punctuation">,</span> n_embd<span class="token punctuation">)</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>blocks <span class="token operator">=</span> nn<span class="token punctuation">.</span>ModuleList<span class="token punctuation">(</span><span class="token punctuation">[</span>Block<span class="token punctuation">(</span>n_embd<span class="token punctuation">,</span> n_heads<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n_layers<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>forward</p><ul><li>得到每个单词的嵌入向量embedding。</li><li>根据inputs的时间维度，截取位置嵌入参数中对应的部分，得到position_embedding张量，表示每个位置的嵌入向量。</li><li>将embedding和position_embedding相加，得到attens张量.</li><li>对attens列表中的每个变换器的块对象，调用forward方法，更新attens张量。</li><li>对attens应用层归一化层。</li><li>对attens应用线性层，得到logits张量，表示每个时间步每个单词的预测概率。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> labels<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    batch<span class="token punctuation">,</span> time <span class="token operator">=</span> inputs<span class="token punctuation">.</span>shape    embedding <span class="token operator">=</span> self<span class="token punctuation">.</span>embedding<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>    position_embedding <span class="token operator">=</span> self<span class="token punctuation">.</span>position_embedding<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span>time<span class="token punctuation">]</span>    attens <span class="token operator">=</span> embedding <span class="token operator">+</span> position_embedding    <span class="token keyword">for</span> block <span class="token keyword">in</span> self<span class="token punctuation">.</span>blocks<span class="token punctuation">:</span>        attens <span class="token operator">=</span> block<span class="token punctuation">(</span>attens<span class="token punctuation">)</span>        attens <span class="token operator">=</span> self<span class="token punctuation">.</span>norm<span class="token punctuation">(</span>attens<span class="token punctuation">)</span>        logits <span class="token operator">=</span> self<span class="token punctuation">.</span>linear<span class="token punctuation">(</span>attens<span class="token punctuation">)</span>    <span class="token keyword">if</span> labels <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        loss <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        batch<span class="token punctuation">,</span> time<span class="token punctuation">,</span> channel <span class="token operator">=</span> logits<span class="token punctuation">.</span>shape        logits <span class="token operator">=</span> logits<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch <span class="token operator">*</span> time<span class="token punctuation">,</span> channel<span class="token punctuation">)</span>        labels <span class="token operator">=</span> labels<span class="token punctuation">.</span>view<span class="token punctuation">(</span>batch <span class="token operator">*</span> time<span class="token punctuation">)</span>        loss <span class="token operator">=</span> F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>logits<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>        <span class="token keyword">return</span> logits<span class="token punctuation">,</span> loss<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>generate</p><ul><li>forward对inputs进行预测，得到logits张量。</li><li>对logits张量在最后一个时间取最大值，得到最可能的索引。</li><li>并更新inputs张量。</li><li>以上操作进行max_new_tokens次循环</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> max_new_tokens<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>max_new_tokens<span class="token punctuation">)</span><span class="token punctuation">:</span>            logits<span class="token punctuation">,</span> _ <span class="token operator">=</span> self<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>            logits <span class="token operator">=</span> logits<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            inputs <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>inputs<span class="token punctuation">,</span> logits<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> inputs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;贝叶斯网络，k-means 和transformer&lt;/p&gt;
&lt;h2 id=&quot;PART1&quot;&gt;&lt;a href=&quot;#PART1&quot; class=&quot;headerlink&quot; title=&quot;PART1&quot;&gt;&lt;/a&gt;PART1&lt;/h2&gt;&lt;h3 id=&quot;手写数字识别&quot;&gt;&lt;a href=&quot;#手</summary>
      
    
    
    
    <category term="AI" scheme="http://sn1987a-1.github.io/categories/AI/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>智能合约</title>
    <link href="http://sn1987a-1.github.io/posts/c85b8ed3.html"/>
    <id>http://sn1987a-1.github.io/posts/c85b8ed3.html</id>
    <published>2023-06-28T12:48:34.000Z</published>
    <updated>2023-09-24T03:52:18.905Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul><li>理解以太坊上的智能合约</li><li>开发实现简单的智能合约</li><li>部署以太坊上的智能合约</li></ul><h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><p>智能合约是一种特殊协议，在区块链内制定合约时使用，当中内含了代码函数 (Function)，亦能与其他合约进行交互、做决策、存储资料及发送以太币等功能。智能合约主力提供验证及执行合约内所订立的条件。智能合约允许在没有第三方的情况下进行可信交易。这些交易可追踪且不可逆转。</p><p>在以太坊上，智能合约是一个运行在以太坊链上的程序。 它是位于以太坊区块链上一个特定地址的一系列代码（函数）和数据（状态）。</p><p>智能合约也是一个以太坊帐户，即合约帐户。 这意味着它们有余额，可以成为交易的对象。 但是，它们无法被人操控，它们是被部署在网络上作为程序运行着。 个人用户可以通过提交交易执行智能合约的某一个函数来与智能合约进行交互。 智能合约能像常规合约一样定义规则，并通过代码自动强制执行。 默认情况下，您无法删除智能合约，与它们的交互是不可逆的.以太坊上的智能合约基本生命周期可以分为开发、编译、部署和运行。</p><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><h4 id="编写投票合约"><a href="#编写投票合约" class="headerlink" title="编写投票合约"></a>编写投票合约</h4><p>本实验实现了简单的投票合约示例，即VotingContract，基本结构为：</p><ul><li><code>Option</code>表示每个投票选项的名称和投票计数。<code>addoption()</code>可以增加新的选项；<code>getOptionCount()</code>获取当前的投票选项数目；<code>getOption()</code>获取特定的选项的具体信息。<br>99 8888888<pre class="line-numbers language-none"><code class="language-none">struct Option {        string OptionName;        uint256 voteCount;    }    Option[] public options;    function addOption(string memory _name) public {        options.push(Option(_name, 0));    }    function getOptionCount() public view returns (uint256) {        return options.length;    }    function getOption(uint256 _optionIndex) public view returns (string memory, uint256) {        require(_optionIndex &lt; options.length, "Invalid option index");        Option memory option = options[_optionIndex];        return (option.OptionName, option.voteCount);    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>投票由<code>votes</code>存储，通过映射讲地址和选项索引关联起来</p><pre class="line-numbers language-none"><code class="language-none">mapping(address =&gt; uint256) public votes;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>用户通过<code>vote()</code>进行投票，已经投票的用户无法再投票</p><pre class="line-numbers language-none"><code class="language-none">function vote(uint256 _optionIndex) public {        require(_optionIndex &lt; options.length, "Invalid option index");        require(votes[msg.sender] == 0, "Already voted");        options[_optionIndex].voteCount++;        votes[msg.sender] = _optionIndex;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="部署和调用合约"><a href="#部署和调用合约" class="headerlink" title="部署和调用合约"></a>部署和调用合约</h4><p>对投票合约进行部署，修改js文件：</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> VotingContract <span class="token operator">=</span> artifacts<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"VotingContract"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">deployer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>VotingContract<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>部署命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">truffle compiletruffle developtruffle migrate --reset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>部署结果：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&gt; Compiling .\contracts\lab.sol&gt; Artifacts written to E:\2023spring\blockchain\lab4\build\contracts&gt; Compiled successfully using:   - solc: 0.8.20+commit.a1b79de6.Emscripten.clang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用合约</p><ul><li><p>创建投票选项</p>  <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">truffle(develop)&gt; let contract = await VotingContract.deployed()undefinedtruffle(develop)&gt; await contract.addOption("Option 1"){  tx: '0x7736c02bd8c1801d1785efa78ac225ca00cb670fe94f564965e241072ed8349a',  recei  ...  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>投票</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">truffle(develop)&gt; await contract.vote(0);{  tx: '  ...  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看投票信息</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">truffle(develop)&gt; let optionCount = await contract.getOptionCount();undefinedtruffle(develop)&gt; console.log("Option count:", optionCount.toNumber());Option count: 1undefinedtruffle(develop)&gt; let option = await contract.getOption(0);undefinedtruffle(develop)&gt; console.log("Option:", option[0], "Votes:", option[1].toNumber())Option: Option 1 Votes: 1undefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;理解以太坊上的智能合约&lt;/li&gt;
&lt;li&gt;开发实现简单的智能合约&lt;/li&gt;
&lt;li&gt;部署以太坊上的智能合约&lt;/l</summary>
      
    
    
    
    <category term="区块链" scheme="http://sn1987a-1.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>代数结构习题课-2</title>
    <link href="http://sn1987a-1.github.io/posts/94cbcba9.html"/>
    <id>http://sn1987a-1.github.io/posts/94cbcba9.html</id>
    <published>2023-06-02T12:48:34.000Z</published>
    <updated>2023-09-23T13:35:08.541Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2023spring代数结构习题课讲义</strong></p><h3 id="第二次习题课"><a href="#第二次习题课" class="headerlink" title="第二次习题课"></a>第二次习题课</h3><h4 id="知识整理"><a href="#知识整理" class="headerlink" title="知识整理"></a>知识整理</h4><p>环的定义（验证$<r,+,\cdot>$是否是环）</r,+,\cdot></p><ul><li>$<r,+>$是交换群</r,+></li><li>$<r,\cdot>$是含幺半群（封闭性，结合律，乘法单位元）</r,\cdot></li><li>乘法对加法有左右分配律</li></ul><p>交换环：乘法具有交换律</p><ul><li>负元：加法逆元，一定存在</li><li>可逆元：乘法逆元存在时，称为可逆元</li><li>运算:$a\cdot 0=0\cdot a=0,a\cdot(-b)=(-a)\cdot b=-(a\cdot b),(-a)\cdot (-b)=a\cdot b$</li></ul><p>特殊的环：</p><ul><li><p>数环，R，C，Q</p></li><li><p>自同态环: $<g,+>$是交换群，$E=\{f|f:G\rightarrow G是同态映射\}$，在E上定义运算：</g,+></p></li></ul><script type="math/tex; mode=display">(f+g)(x)=f(x)+g(x)\\(f\cdot g)(x)=f(x)\cdot g(x)</script><p>此时$<e,+,\cdot>$为环，交换群G上的自同态环。</e,+,\cdot></p><ul><li>模n同余类环$&lt;\Z_n,+,\cdot&gt;$ <script type="math/tex; mode=display">[i]+[j]=[i+j]\\[i]\cdot[j]=[i\cdot j]</script></li></ul><p>整环和域</p><ul><li>零因子，左（右）零因子：$a\in R,\exist b,a\cdot b=0(b\cdot a=0)$</li><li>无零因子 当且仅当 乘法有左右消去律</li><li>整环：非平凡交换环，无零因子<ul><li>有左右消去律</li><li>加阶（关于加法运算的阶）：无限（特征为0）/素数（特征为p）</li></ul></li><li>域：非平凡交换环，每个非零元素a都存在乘法逆元（关于乘法构成交换群）<ul><li>域$\Rightarrow$整环（必要不充分）</li><li>有限整环$\Rightarrow$域，即为有限域，特征为p（充分不必要） <em>整数环不是域，$&lt;\Z_p,+\cdot&gt;$是域</em></li></ul></li></ul><p>子环</p><ul><li><p>判断子环</p><ul><li>关于加法构成子群</li><li>对乘法运算封闭</li><li><strong>包含乘法单位元</strong></li></ul></li><li><p>环同态映射f：</p><ul><li>$f(a+b)=f(a)+f(b)$</li><li>$f(a\cdot b)=f(a)\cdot f(b)$</li><li>$f(1_{R_1})=1_{R_2}$(如果没有该条件保证，会出现$f(1_{R_1})=0_{R_2}$的情况)</li></ul></li><li><p>同态映射相关性质</p><ul><li>$f(0_{R_1})=0_{R_2}$</li><li>$f(-a)=-f(a)$</li><li>可逆元映射到可逆元，$f(a’)=(f(a))’$</li></ul></li><li><p>同态映射不能保持整环/域等的结构（例7.14），环同构映射可以。</p></li><li><p>对于满射f:</p><script type="math/tex; mode=display">f(a+b)=f(a)+f(b)\\f(a\cdot b)=f(a)\cdot f(b)</script><p>可以判断是环。</p></li></ul><p>理想和商环</p><ul><li><p>理想：对于环R的非空子集I，满足$\forall x,y\in I,r\in R\Rightarrow x-y \in I,x\cdot r\in I,r\cdot x\in I$</p></li><li><p>理想关于加法构成子群</p></li><li><p>真理想，平凡理想</p></li><li><p>理想的运算得到的都是理想</p><script type="math/tex; mode=display">I_1\cdot I_2=\{\sum _{k=1}^{n}r_{1k}\cdot r_{2k}|r_{1k}\in R_1,r_{2k}\in R_2,1\leq k_1\leq n,n=1,2... \}\\I_1+I_2=\{r_1+r_2|r_1\in I_1,r_2\in I_2 \}</script></li><li><p>商环：$R/I=\{x+I|x\in R\}$</p></li><li>若理想I中有可逆元，$I=R$(平凡理想)$\Rightarrow$域中所有的理想都是平凡理想，没有真理想</li><li><p>主理想：交换环中元素a生成的理想：$\forall a \in R,(a)=\{a\cdot r|r\in R\}$；推广到交换环的子集：$\forall S=\{a_1,a_2,…a_k\} \subseteq R,(a_1,a_2,…a_k)=\{a_1\cdot r_1+…a_k\cdot r_k|r_1,r_2,…r_k\in R\}$</p><ul><li>主理想环：所有的理想都是主理想     (整数环)</li></ul></li></ul><p>多项式环</p><ul><li><p>环R上的多项式$p(x)=a_0+a_1x+…+a_nx^n,a_n\neq 0_R,n\geq 0$</p><ul><li>$a_i$为系数，x为未定元，n为次数$deg(p(x))=n$；R上的非零元素：常数多项式；$0_R$零多项式；</li></ul></li><li><p>全体多项式记为R[x]，定义运算：</p><script type="math/tex; mode=display">\forall f(x),g(x)\in R[x],\\f(x)+g(x)=\sum^{max\{m,n\}}_{k=0}(a_k+b_k)x^k\\f(x)\cdot g(x)=\sum^{m+n}_{k=0}c_kx^k,c_k=\sum_{i+j=k}a_i\cdot b_j,0\leq k\leq m+n</script><p>R[x]是环（零元，逆元，乘法单位元），且是整环。</p></li><li><p>域上的多项式</p><p>对于R[x]上的f(x),g(x)，若g(x)不是零多项式，存在唯一的$q(x),r(x)\in F[x]$:</p><script type="math/tex; mode=display">f(x)=q(x)\cdot g(x)+r(x)，其中r(x)的次数小于deg(g(x))，也可能是零多项式。</script><p>该式子说明域上的多项式可以做除法，商和余式唯一确定；其中$f(x)=q(x)\cdot g(x)$时，称g(x)为f(x)的因式；</p><script type="math/tex; mode=display">f(x)=q(x)\cdot(x-a)+r_0\Rightarrow f(a)=r_0</script><p>因此x-a为f(x)的因式当且仅当$f(a)=0_F$,此时a为f(x)的根。</p><ul><li>域上的多项式环是主理想环。（都可以写为$I=(g(x))$）</li></ul></li><li><p>域上的多项式商环</p><script type="math/tex; mode=display">F[x]/P=\{f(x)+P|f(x)\in F(x) \},f(x)=q(x)\cdot p(x)+r(x),f(x)-r(x)\in(p(x))\\F[x]/P=\{b_0+b_1x+...+b_{n-1}+P|b_0,b_1,...b_{n-1}\in F \}</script></li></ul><p>环同态定理</p><ul><li><p>同态核：$\phi$为从$R_1$到$R_2$的同态映射，$Ker\phi =\{r|r\in R_1,\phi(r)=0_{R_2} \}$</p></li><li><p>$Ker\phi$为$R_1$的理想</p></li><li><p>环同态基本定理：环$R_1$的任意商环都是环$R_1$的同态像。若$\phi$是从$R_1$到$R_2$的满同态映射</p><script type="math/tex; mode=display">R_1/Ker\phi \cong R_2</script></li><li><p>若f为从$R_1$到$R_2$的同态映射</p><ul><li>$S_1$是$R_1$的子环，$f(S_1)$是$R_2$的子环（$f(R_1)$是子环）</li><li>$S_1$是$R_1$的理想，$f(S_1)$是$R_2$的理想</li><li>$S_2$是$f(R_1)$的子环，$f^{-1}(S_2)$是$R_1$的子环</li><li>$S_2$是$f(R_1)$的理想，$f^{-1}(S_2)$是$R_1$的理想，且$R_1/f^{-1}(S_2)\cong f(R_1)/S_2$</li></ul></li><li><p>若$I_1,I_2$为R的理想，$I_2\subseteq I_1$，$I_1/I_2$是$R/I_2$的理想</p><script type="math/tex; mode=display">\frac{R/I_2}{I_1/I_2}\cong R/I_1</script></li></ul><h4 id="补充习题"><a href="#补充习题" class="headerlink" title="补充习题"></a>补充习题</h4><ol><li><p>找到$\mathbb{Z}[\mathrm{i}],\mathbb{Q}[\mathrm{i}]$中全部可逆元。</p><p> $\mathbb{Z}[\mathrm{i}]$中的元素可以写为$a+b\mathrm{i},a,b\in\mathbb{Z}$，当$a,b$不全为0时，若$(a+b\mathrm{i})(c+d\mathrm{i})=1$，解出$c=\frac{a}{a^2+b^2},d=\frac{-b}{a^2+b^2}$。若可逆，意味着$c,d\in\mathbb{Z}$。当$a\ne0,b\ne0$时，$a&lt;a^2+b^2$，$c$不可能为整数，因此不可能可逆，分$a=0$或$b=0$讨论可知$\mathbb{Z}[\mathrm{i}]$可逆元为$1,-1,\mathrm{i},-\mathrm{i}$。</p><p> $\mathbb{Q}[\mathrm{i}]$中的元素可以写为$a+b\mathrm{i},a,b\in\mathbb{Q}$，当$a,b$不全为0时，若$(a+b\mathrm{i})(c+d\mathrm{i})=1$，解出$c=\frac{a}{a^2+b^2},d=\frac{-b}{a^2+b^2}$。若可逆，意味着$c,d\in\mathbb{Q}$。非零有理数加减乘除一定还为有理数，因此$c,d\in\mathbb{Q}$一定成立，这意味着$\mathbb{Q}[\mathrm{i}]$中非零元素均可逆，它是域。</p></li><li><p>证明$\mathbb{Z}[x]$不为主理想环。</p><p> 考虑$(2,x)$，若$(2,x)$为主理想，意味着存在$f(x)\in\mathbb{Z}[x]$使得$2=g(x)f(x),x=h(x)f(x),g(x),h(x)\in\mathbb{Z}[x]$。由这两式可以推出$f(x)|\gcd(2,x)=1$，因此$f(x)=\pm1$。</p><p> 但是，$f(x)=\pm1$时，$f(x)$生成的理想为$\mathbb{Z}[x]$，而$2$与$x$生成的理想不包含1（注意$\frac{1}{2}\notin\mathbb{Z}[x]$），矛盾，由此即证明了$(2,x)$不为主理想，$\mathbb{Z}[x]$不为主理想环。</p></li></ol><ul><li>这也展现了为什么最大公因数与生成理想常都记作$(a,b)$，在主理想环中，可以证明理想$(a,b)$即为最大公因数$(a,b)$生成的理想。</li></ul><ol><li><p>（改编自去年期末考试）证明$\mathbb{R}[x]/(x^2+1)\simeq\mathbb{C}$，这里$\simeq$表示环同构。</p><p> 构造映射$\phi:\mathbb{R}[x]\to\mathbb{C},\phi(f(x))=f(\mathrm{i})$，由于$\phi(f(x)+g(x))=f(\mathrm{i})+g(\mathrm{i})=\phi(f(x))+\phi(g(x))$，$\phi(f(x)g(x))=f(\mathrm{i})g(\mathrm{i})=\phi(f(x))\phi(g(x))$，其为环同态。</p><p> 对其应用环同态第一定理，$\mathrm{ker}\phi=\{f\mid f(\mathrm{i})=0\}$，下证$\mathbb{R}[x]$中这等价于$x^2+1\mid f(x)$：</p><p> 若$f(\mathrm{i})=0$，等式两边取共轭，由于系数均为实数，可知$f(-\mathrm{i})=0$。利用因式定理，这意味着$(x-\mathrm{i})(x+\mathrm{i})\mid f(x)$，也即$x^2+1\mid f(x)$，另一方面，当$f(x)$有因式$x^2+1$时，代入可知$f(\mathrm{i})=0$。</p><p> 于是，$\mathrm{ker}\phi=\{f\mid x^2+1\mid f(x)\}=(x^2+1)$。</p><p> 而对任何$a+b\mathrm{i}\in\mathbb{C}$，取$f(x)=bx+a$即有$\phi(f)=a+bi$，因此$\phi$是满射，从而利用环同态第一定理得证。</p></li></ol><ul><li>环同态第一定理的最大作用是证明商环与某个环同态，但构造映射的过程可能有一定的技巧性。本题是由于注意到$\mathbb{i}$是$x^2+1$的根，而$\mathbb{C}=\mathbb{R}[\mathrm{i}]$，因此想到如此构造。</li></ul><ol><li>证明$\mathbb{Z}[x]/(x+1,x^2+4)\simeq\mathbb{Z}_5$。</li></ol><ul><li><p>本题基本不可能直接看出映射，因此需要构造：出于$\ker\phi=(x+1,x^2+4)$希望$\phi(x^2+4)=\phi(x+1)=0$。注意到$x^2+4=(x-1)(x+1)+5$，利用环同态可知$\phi(x^2+4)=\phi(x+1)\phi(x-1)+\phi(5)=0$，于是$\phi(5)=\phi(x+1)=0$。因此可以构造：</p><p>  构造$\phi:\mathbb{Z}[x]\to\mathbb{Z}_5$，$\phi(f(x))=[f(-1)]$，类似上题可说明其为环同态，下面计算$\ker\phi$。</p><p>  $f\in\ker\phi\Leftrightarrow 5\mid f(-1)$，利用因式定理得也即存在$t\in\mathbb{Z}$使得$f(x)-5t=(x+1)g(x),g\in\mathbb{Z}[x]$。因此，$f(x)=5t+(x+1)g(x)$，这意味着$f(x)\in(5,x+1)$。另一方面，$f(x)\in(5,x+1)$时，一定可以写为$5g(x)+(x+1)h(x),g,h\in\mathbb{Z}[x]$，于是$\phi(f)=[5g(-1)]=[0]$，即证明$\ker\phi=(5,x+1)$。</p><p>  由于$x^2+4=(x-1)(x+1)+5$，在有$x+1$时$x^2+4$与5可以互相生成，于是$(x^2+4,x+1)=(5,x+1)$。此外，令$f(x)=0,1,2,3,4$可知$\phi$是满射，从而利用环同态第一定理得证。</p></li><li><p>这里也可以发现，生成理想与最大公因数有类似的允许辗转相除性质。</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;2023spring代数结构习题课讲义&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;第二次习题课&quot;&gt;&lt;a href=&quot;#第二次习题课&quot; class=&quot;headerlink&quot; title=&quot;第二次习题课&quot;&gt;&lt;/a&gt;第二次习题课&lt;/h3&gt;&lt;h4 id=&quot;知识整理&quot;</summary>
      
    
    
    
    <category term="代数结构" scheme="http://sn1987a-1.github.io/categories/%E4%BB%A3%E6%95%B0%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>Astar&amp;CSP</title>
    <link href="http://sn1987a-1.github.io/posts/58da92e9.html"/>
    <id>http://sn1987a-1.github.io/posts/58da92e9.html</id>
    <published>2023-06-01T12:48:34.000Z</published>
    <updated>2023-09-24T03:23:59.051Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Astar-and-CSP-Question"><a href="#Astar-and-CSP-Question" class="headerlink" title="Astar and CSP Question"></a>Astar and CSP Question</h2><h3 id="实验1-1"><a href="#实验1-1" class="headerlink" title="实验1.1"></a>实验1.1</h3><h4 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h4><p>使用A-star算法，解决$N\times N$二进制迷锁问题。</p><h4 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h4><p><strong>启发式函数</strong></p><p>在本实验中，选用启发式函数$h(x)=\frac13\sum$(1的个数)。在实际搜索中，可以根据当前状态计算下一步的1的个数，无需重新遍历数组进行计算</p><ul><li>admissible：每次操作时，对3个位置进行翻转，因此可能存在的最优解为$\sum (d_{ij}==1)/3$向上取整，$h(x)\leq h*(x)$</li><li>consistent：该启发函数是consistent的，因为两个相邻节点之间$c(m,n)\geq${m中1的个数和n中1的个数的差}/3，$h(n)-h(m)=h(n-m)$，因此$h(n)\leq c(n,m)+h(m)$</li></ul><p><strong>思路</strong></p><ul><li><p>借助数组<code>data[][]</code>存储当前的图的情况，<code>step</code>存储当前的步数，<code>solution</code>存储当前的解法，其中<code>solution</code>每一行分别存储每一步的x，y坐标和以该点为中心的四种转法；</p></li><li><p>使用存储受限的启发式搜索，并限制深度，每次递归搜索，使用<code>priority queue</code>存储每次搜索时探索的节点，其中优先队列的排序根据是每个节点探索后剩余的1的个数，从小到大排序，即为优先探索可以最小化1的个数的情况。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto cmp = [](const int* a, const int* b) { return a[0] &gt; b[0]; };priority_queue&lt;int*, vector&lt;int*&gt;, decltype(cmp)&gt; pq(cmp);while(!pq.empty())    {        auto cur=pq.top();        pq.pop();        change_data(cur[1],cur[2],cur[3]);        solution[step-1][0]=cur[1];        solution[step-1][1]=cur[2];        solution[step-1][2]=cur[3];        cur_1_num=cur[0];        visit_state[cur[1]][cur[2]][cur[3]]=1;        if(RBFS()==2)        return 2;        visit_state[cur[1]][cur[2]][cur[3]]=0;        change_data(cur[1],cur[2],cur[3]);        cur_1_num=temp_1_num;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>每次搜索，计算下一步1的个数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int each_step(int cases,int x,int y){    int after_num=cur_1_num;    after_num+=1-2*data[x][y];    switch (cases)    {    case 1:        after_num+=1-2*data[x][y+1];        after_num+=1-2*data[x-1][y];        break;    //...case 2 3 4    default:        break;    }    return after_num;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>每次进入递归或退出递归时，都要及时更新：<code>step</code>,<code>cur_1_num</code>,<code>data</code></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void change_data(int x,int y,int cases){    data[x][y]=1-data[x][y];    switch (cases)    {    case 1:        data[x][y+1]=1-data[x][y+1];        data[x-1][y]=1-data[x-1][y];        break;    //case 2 3 4:    default:        break;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>剪枝操作</p><ul><li><p>由于最优解中，一定不存在同一个位置的同一种转法，可以维护数组限制仅拓展未被探索的节点</p></li><li><p>解法的顺序不影响解的结果，因此可以限制每次拓展的节点，具体方法为：遍历<code>data</code>数组，直到遇到第一个1，要把这个1翻转成0，则必须存在一步包含该1，这样的操作最多存在12种，因此只需拓展相关的12个节点即可。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i=0;i&lt;size;i++){    for(int j=0;j&lt;size;j++)    {        if(data[i][j]==1)        {            if(i!=0&amp;&amp;j!=0)            {                next_step=find_next(i,j,2);                if(visit_state[i][j][2]==0)                pq.push(next_step);                next_step=find_next(i-1,j,3);                if(visit_state[i-1][j][3]==0)                pq.push(next_step);                next_step=find_next(i,j-1,1);                if(visit_state[i][j-1][1]==0)                pq.push(next_step);            }            //...other nine states            t_flag=1;            break;        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>深度受限搜索中，理论上对于每个单独存在的1，可以用3步将其变为0且不改变其他的状态，因此可以根据每次搜索到解时当前的解的步数更新深度限制<code>depth-limit</code>，以及更新当前最优解</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(cur_1_num==0)    {        if(step&lt;best_step)        {            best_step=step;            for(int i=0;i&lt;step;i++)            for(int j=0;j&lt;3;j++)            best_solution[i][j]=solution[i][j];        }        if(depth_limit&gt;step)        depth_limit=step;        step--;        return 1;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><strong>对比Dijkstra</strong></p><p>Dijkstra搜索和启发式搜索的区别在于Dijkstra不需要借助启发函数确定下一步需拓展的节点，即将原函数的启发函数一直认为是0即可，在其他条件不变的情况下，和启发式搜索的区别：</p><ul><li>如果需要搜索最优解，由于启发式搜索对深度限制和剪枝的存在，可以大大降低运行的时间和运行的内存占用，Dijkstra并不适合求解最优解</li><li>如果要搜索可行解，启发式搜索的搜索结果步数低于Dijkstra算法</li></ul><h3 id="实验1-2"><a href="#实验1-2" class="headerlink" title="实验1.2"></a>实验1.2</h3><h4 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h4><p>使用CSP算法，为学校宿管阿姨安排值班表，以满足约束条件，尽可能地满足阿姨们的轮班请求，斌并使用MRV、Forward Checking、Constraint Propagation等优化技术，以便快速解决任务并最大化满足请求数。</p><h4 id="实验内容-1"><a href="#实验内容-1" class="headerlink" title="实验内容"></a>实验内容</h4><p>实验的问题模型可以抽象为一个CSP问题：要找到最大化满足约束$Request\subset \{0,1\}^{N\times D\times S}$的取值为staff_num的days_num*shifts_num个变量。下面是CSP算法设计的具体内容：</p><ul><li><p>最小剩余值：使用MRV求解问题，可以提高求解速度，mrv函数的工作就是根据当前的未被分配的变量中，剩余值最少的变量并返回其 index，如果不存在未被分配的变量，即前n步已经完成了排版，返回-1</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int mrv(){    int min_index=0;    int flag=0;    for(int i=1;i&lt;shifts_num*days_num;i++)    {        if(remaining_value[i]&lt;remaining_value[min_index])        min_index=i;        if(remaining_value[i]&gt;0)        flag=1;    }    if(flag==0||remaining_value[min_index]==1000000)    return -1;    return min_index;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>处于公平起见，应该让所有的staff被排班的次数均接近平均值，为了达到这一效果，每次对某一时间段进行排版时，根据满足条件的staff已经排班的次数从小到大进行排序，优先安排排版次数较少者；另外，为了保证优先最大化请求数量，如果该时间段存在可以满足约束的请求，优先在可以满足请求的staff中选择，不考虑无法满足的部分，否则再考虑无法满足请求的情况。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt; staff_order(int index){    vector&lt;int&gt; order;    for(int i=0;i&lt;staff_num;i++)    {        if(data[i][index]==1)            order.push_back(i);    }    if(order.size()==0)    {         for(int i=0;i&lt;staff_num;i++)        {            if(data[i][index]==0)                order.push_back(i);        }    }    sort(order.begin(), order.end(), [](int a, int b){return staff_times[a] &lt; staff_times[b];});    return order;   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>CSP算法的主干部分，递归求解，下面是为全部的时间段找到解的处理，其中对返回值的解释如下：其中not_fot_num记录了未满足的约束的数目</p><ul><li>1：找到了满足所有请求的解，此时要更新相关参数并退出递归</li><li>2：找到了解，没有满足所有请求，但比之前求解的解更好，此时要更新相关参数</li><li>-1：找到了不满足所有约束的解，并且不如之前的解，不做处理</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(num==days_num*shifts_num&amp;&amp;not_fit_num==0)    {        best_fit_num=not_fit_num;        for(int i=0;i&lt;days_num*shifts_num;i++)        {            best_plan[i]=final_plan[i];        }        return 1;}     else if (not_fit_num&gt;best_fit_num)    return -1;    else if(num==days_num*shifts_num&amp;&amp;not_fit_num&lt;best_fit_num)    {        best_fit_num=not_fit_num;        for(int i=0;i&lt;days_num*shifts_num;i++)        {            best_plan[i]=final_plan[i];        }        return 2;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于一般的情况，要根据MRV的原则找到最小剩余值，并根据已排班数量staff_num来确定赋值顺序。每次进入或退出递归时，都要更新或恢复相关的变量：</p><ul><li>修改data中该staff相邻时间的状态</li><li>修改相邻时间中remain_value</li><li>更改无法满足的情况时not_fit_num</li><li>修改staff已经被排班的次数</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int index=mrv();    int state=0;    auto order=staff_order(index);    int t;    for(int j=0;j&lt;order.size();j++)    {        int i=order[j];        int old_data_i_index=data[i][index];        if(old_data_i_index==0)        not_fit_num+=1;        data[i][index]=0;        state=0;        if(index!=0&amp;&amp;data[i][index-1]==1)        {           remaining_value[index-1]-=1;            state=1;        }        if(index!=0)            data[i][index-1]=-1;        if(index!=days_num*shifts_num-1&amp;&amp;data[i][index+1]==1)        {            remaining_value[index+1]-=1;            state+=2;        }        if(index!=days_num*shifts_num-1)            data[i][index+1]=-1;        final_plan[index]=i;        int temp=remaining_value[index];        remaining_value[index]=1000000;        staff_times[i]++;        t=csp(num+1);        staff_times[i]--;        remaining_value[index]=temp;        if(t==1)        {            return 1;        }        if(index!=0)        data[i][index-1]=0;        if(index!=days_num*shifts_num-1)        data[i][index+1]=0;        if(state%2==1)        {            data[i][index-1]=1;            remaining_value[index-1]+=1;        }        if(state&gt;=2)        {            data[i][index+1]=1;            remaining_value[index+1]+=1;        }        data[i][index]=old_data_i_index;         if(old_data_i_index==0)         not_fit_num--;      }return 2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>最后处理输入数据，输出数据模块，即可完成CSP排班的全部内容。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void get_input(char * filename){    ifstream file(filename);    char c;    file&gt;&gt;staff_num&gt;&gt;c&gt;&gt;days_num&gt;&gt;c&gt;&gt;shifts_num;    each_time=days_num*shifts_num/staff_num;    best_fit_num=100000;    not_fit_num=0;    for(int i=0;i&lt;staff_num;i++)    {        for(int j=0;j&lt;days_num;j++)        {            for(int k=0;k&lt;shifts_num;k++)            {                if(k)                file&gt;&gt;c;                file&gt;&gt;data[i][j*shifts_num+k];                remaining_value[j*shifts_num+k]+=data[i][j*shifts_num+k];            }} }}void get_output(char * filename){    fstream file(filename);    for(int i=0;i&lt;days_num;i++)    {        for(int j=0;j&lt;shifts_num;j++)        {            if(j!=shifts_num-1)            file&lt;&lt;best_plan[i*shifts_num+j]&lt;&lt;',';            else            file&lt;&lt;best_plan[i*shifts_num+j]&lt;&lt;endl; } }    file&lt;&lt;days_num*shifts_num-best_fit_num&lt;&lt;endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Astar-and-CSP-Question&quot;&gt;&lt;a href=&quot;#Astar-and-CSP-Question&quot; class=&quot;headerlink&quot; title=&quot;Astar and CSP Question&quot;&gt;&lt;/a&gt;Astar and CSP Questi</summary>
      
    
    
    
    <category term="人工智能" scheme="http://sn1987a-1.github.io/categories/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>UTXO区块链</title>
    <link href="http://sn1987a-1.github.io/posts/e65e9bf0.html"/>
    <id>http://sn1987a-1.github.io/posts/e65e9bf0.html</id>
    <published>2023-05-28T12:48:34.000Z</published>
    <updated>2023-09-24T03:52:59.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PART1"><a href="#PART1" class="headerlink" title="PART1"></a>PART1</h2><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul><li>了解区块链上的简单数据结构</li><li>实现Merkle树的构建</li><li>初步理解UTXO的使用和验证</li><li>理解比特币上的交易创建</li></ul><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><h4 id="区块链的基本结构"><a href="#区块链的基本结构" class="headerlink" title="区块链的基本结构"></a>区块链的基本结构</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> BlockChain <span class="token keyword">struct</span><span class="token punctuation">{</span>    tip <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token comment">//最新区块的哈希值</span>    db <span class="token operator">*</span>bolt<span class="token punctuation">.</span>DB<span class="token comment">//数据库连接</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>区块链通过链式结构连接各个区块，形成一个不断增长的分布式账本系统。</p><h4 id="区块的基本结构"><a href="#区块的基本结构" class="headerlink" title="区块的基本结构"></a>区块的基本结构</h4><p>作为区块链的主要组成部分，区块由区块头和区块体构成，区块头存储了版本号，上一个区块的哈希值，当前区块交易的哈希值，时间戳等信息，唯一标识一个区块。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> BlkHeader <span class="token keyword">struct</span> <span class="token punctuation">{</span>Version       <span class="token builtin">int64</span>PrevBlockHash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>MerkleRoot    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>Timestamp     <span class="token builtin">int64</span>Bits          <span class="token builtin">int64</span>Nonce         <span class="token builtin">int64</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="Merkle树"><a href="#Merkle树" class="headerlink" title="Merkle树"></a>Merkle树</h4><p>每一个区块的交易节点从底向上构建Merkle树，采用哈希加密（单次sha256）。</p><ul><li><p>新建Merkle节点，分为叶子节点和非叶子节点</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewMerkleNode</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right <span class="token operator">*</span>MerkleNode<span class="token punctuation">,</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token operator">*</span>MerkleNode <span class="token punctuation">{</span>NewNode<span class="token operator">:=</span><span class="token operator">&amp;</span>MerkleNode<span class="token punctuation">{</span><span class="token punctuation">}</span>NewNode<span class="token punctuation">.</span>Left<span class="token operator">=</span>leftNewNode<span class="token punctuation">.</span>Right<span class="token operator">=</span>right<span class="token keyword">if</span> left<span class="token operator">==</span><span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> right<span class="token operator">==</span><span class="token boolean">nil</span><span class="token punctuation">{</span>data_sha<span class="token operator">:=</span>sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>NewNode<span class="token punctuation">.</span>Data<span class="token operator">=</span>data_sha<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>data_c<span class="token operator">:=</span><span class="token function">append</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>Data<span class="token punctuation">,</span>right<span class="token punctuation">.</span>Data<span class="token operator">...</span><span class="token punctuation">)</span>data_sha<span class="token operator">:=</span>sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>data_c<span class="token punctuation">)</span>NewNode<span class="token punctuation">.</span>Data<span class="token operator">=</span>data_sha<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">return</span> NewNode<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建Merkle树，调用新建节点的函数自底向上构建，直到结点数为1，并且保证节点数量为偶数</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewMerkleTree</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token operator">*</span>MerkleTree <span class="token punctuation">{</span>NewTree<span class="token operator">:=</span><span class="token operator">&amp;</span>MerkleTree<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> nodes <span class="token punctuation">[</span><span class="token punctuation">]</span>MerkleNodeNewTree<span class="token punctuation">.</span>Leaf<span class="token operator">=</span>data<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>data_i <span class="token operator">:=</span> <span class="token keyword">range</span> data<span class="token punctuation">{</span>node_i<span class="token operator">:=</span><span class="token function">NewMerkleNode</span><span class="token punctuation">(</span><span class="token boolean">nil</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">,</span>data_i<span class="token punctuation">)</span>nodes<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span><span class="token operator">*</span>node_i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">{</span><span class="token keyword">var</span> newnodes <span class="token punctuation">[</span><span class="token punctuation">]</span>MerkleNode<span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>node<span class="token operator">:=</span><span class="token function">NewMerkleNode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span>newnodes<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>newnodes<span class="token punctuation">,</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">{</span>node<span class="token operator">:=</span><span class="token function">NewMerkleNode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span>newnodes<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>newnodes<span class="token punctuation">,</span><span class="token operator">*</span>node<span class="token punctuation">)</span><span class="token punctuation">}</span>nodes<span class="token operator">=</span>newnodes<span class="token punctuation">}</span>NewTree<span class="token punctuation">.</span>RootNode<span class="token operator">=</span><span class="token operator">&amp;</span>nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">return</span> NewTree<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>SPV证明路径，自底向上获取节点的路径的兄弟结点的哈希值</p><p>先根据结点的index判断节点在树的具体位置，自顶向下访问路径，再将路径逆序即可获取SPV证明路径</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>MerkleTree<span class="token punctuation">)</span> <span class="token function">SPVproof</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>t_len<span class="token operator">:=</span><span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Leaf<span class="token punctuation">)</span><span class="token keyword">if</span> index<span class="token operator">&gt;</span>t_len<span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Outof Index"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>depth<span class="token operator">:=</span><span class="token number">0</span>leaf_number<span class="token operator">:=</span><span class="token number">1</span>t_node<span class="token operator">:=</span>t<span class="token punctuation">.</span>RootNode<span class="token punctuation">.</span>Left<span class="token keyword">for</span> t_node<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span>t_node<span class="token operator">=</span>t_node<span class="token punctuation">.</span>Leftdepth<span class="token operator">+=</span><span class="token number">1</span>leaf_number<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">var</span> n_path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>t_node<span class="token operator">=</span>t<span class="token punctuation">.</span>RootNode<span class="token keyword">for</span> t_node<span class="token operator">!=</span><span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> t_node<span class="token punctuation">.</span>Left<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">{</span><span class="token keyword">if</span> index<span class="token operator">&gt;=</span>leaf_number<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">{</span>index<span class="token operator">-=</span>leaf_number<span class="token operator">/</span><span class="token number">2</span>n_path<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>n_path<span class="token punctuation">,</span>t_node<span class="token punctuation">.</span>Left<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>t_node<span class="token operator">=</span>t_node<span class="token punctuation">.</span>Right<span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>n_path<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>n_path<span class="token punctuation">,</span>t_node<span class="token punctuation">.</span>Right<span class="token punctuation">.</span>Data<span class="token punctuation">)</span>t_node<span class="token operator">=</span>t_node<span class="token punctuation">.</span>Left<span class="token punctuation">}</span>leaf_number<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">var</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>n_path<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span>path<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span>n_path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>n_path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> path<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>验证SPV路径，将该节点的哈希值和SPV证明路径依次计算，最终和根节点的哈希值比较即可完成SPV路径的验证。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>MerkleTree<span class="token punctuation">)</span> <span class="token function">VerifyProof</span><span class="token punctuation">(</span>index <span class="token builtin">int</span><span class="token punctuation">,</span> path <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> index<span class="token operator">&gt;</span><span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Leaf<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span>fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"Outof Index"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>data_sha<span class="token operator">:=</span>sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Leaf<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>n_data<span class="token operator">:=</span>data_sha<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>t_data <span class="token operator">:=</span><span class="token keyword">range</span> path<span class="token punctuation">{</span><span class="token keyword">if</span> index<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">{</span>temp<span class="token operator">:=</span><span class="token function">append</span><span class="token punctuation">(</span>t_data<span class="token punctuation">,</span>n_data<span class="token operator">...</span><span class="token punctuation">)</span>temp2<span class="token operator">:=</span>sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>n_data<span class="token operator">=</span>temp2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">}</span> <span class="token keyword">else</span><span class="token punctuation">{</span>temp<span class="token operator">:=</span><span class="token function">append</span><span class="token punctuation">(</span>n_data<span class="token punctuation">,</span>t_data<span class="token operator">...</span><span class="token punctuation">)</span>temp2<span class="token operator">:=</span>sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>n_data<span class="token operator">=</span>temp2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">}</span>index<span class="token operator">/=</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>n_data<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span><span class="token keyword">if</span> t<span class="token punctuation">.</span>RootNode<span class="token punctuation">.</span>Data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>n_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="判断Coinbase交易"><a href="#判断Coinbase交易" class="headerlink" title="判断Coinbase交易"></a>判断Coinbase交易</h4><p>每个区块新建立时，可以加入一笔coinbase交易，这笔交易只有输出，没有输入，判断的基本依据为：</p><ul><li>只出现在第一笔交易，其他交易均不是coinbase交易</li><li>输入的Txid为空，Vout为-1</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>Transaction<span class="token punctuation">)</span> <span class="token function">IsCoinBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Vin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Txid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span>  <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>Vin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Vout<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Vin<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>Vin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Txid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>Vin<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Vout<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计算公钥对应的地址"><a href="#计算公钥对应的地址" class="headerlink" title="计算公钥对应的地址"></a>计算公钥对应的地址</h4><p>比特币上的地址的计算如下</p><ol><li>计算公钥的哈希值（<code>RIPEMD16(SHA256(PubKey))</code>）</li><li>地址计算前加入版本号</li><li>把步骤2的内容通过计算公钥哈希的双重SHA256哈希加密，取<strong>前4个字节</strong>作为校验和</li><li><code>版本号，公钥哈希，校验和</code>的组合通过Base58加密生成比特币的地址</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>w <span class="token operator">*</span>Wallet<span class="token punctuation">)</span> <span class="token function">GetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">{</span>key_hash<span class="token operator">:=</span><span class="token function">HashPublicKey</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span><span class="token keyword">var</span> temp <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>temp<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>version<span class="token punctuation">)</span>temp<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>key_hash<span class="token operator">...</span><span class="token punctuation">)</span>checksum<span class="token operator">:=</span>sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>hash_checksum<span class="token operator">:=</span>checksum<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>checksum<span class="token operator">=</span>sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>hash_checksum<span class="token punctuation">)</span>hash_checksum<span class="token operator">=</span>checksum<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">var</span> res <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>res<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>version<span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>key_hash<span class="token operator">...</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>hash_checksum<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>checkSumlen<span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>base58<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> res<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="P2PKH锁定部分"><a href="#P2PKH锁定部分" class="headerlink" title="P2PKH锁定部分"></a>P2PKH锁定部分</h4><p>P2PKH指的是向公钥的哈希支付，根据公钥的地址的计算方法，类似的可以通公钥地址获取公钥的哈希：</p><p>公钥地址经过base58解码后，第一位是version版本号，后四位为校验和，中间即为公钥哈希</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>out <span class="token operator">*</span>TXOutput<span class="token punctuation">)</span> <span class="token function">Lock</span><span class="token punctuation">(</span>address <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>data<span class="token punctuation">,</span><span class="token boolean">_</span><span class="token operator">:=</span>base58<span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">)</span>out<span class="token punctuation">.</span>PubKeyHash<span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><p>借助<code>go test</code>对实验结果进行检验</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">PS E:\2023spring\blockchain\lab2\lab2&gt; go testPASSok      lab2    0.657s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="PART2"><a href="#PART2" class="headerlink" title="PART2"></a>PART2</h2><h3 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h3><ul><li>进一步理解区块链上的数据结构</li><li>实现基于的POW共识算法出块</li><li>实现比特币上的账户创建和查询</li><li>理解UTXO的基本使用方法</li><li>实现区块链与数据库的交互</li></ul><h3 id="实验内容-1"><a href="#实验内容-1" class="headerlink" title="实验内容"></a>实验内容</h3><h4 id="工作量证明"><a href="#工作量证明" class="headerlink" title="工作量证明"></a>工作量证明</h4><p>工作量的证明机制（POW），简单来说就是通过提交一个容易检测，但是难以计算的结果，来证明节点做过一定量的工作。</p><p>首先完成<code>Run</code>函数，该函数代表矿工通过如下流程完成挖矿工作：</p><ol><li>首先构建当前区块头，区块头包含<strong>版本号，上⼀个区块哈希值(32位)，当前区块数据对应哈希（32位，即区块数据的merkle根），时间戳，区块难度，计数器(nonce)</strong>。</li><li>添加计数器，作为随机数。计算器从0开始基础，每个回合<strong>+1</strong></li><li>对于上述的数据来进行一个哈希的操作。</li><li>判断结果是否满足计算的条件：<ol><li>如果符合，则得到了满足结果。</li><li>如果没有符合，从2开始重新直接2、3、4步骤。</li></ol></li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pow <span class="token operator">*</span>ProofOfWork<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>nonce <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">var</span> hash <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">var</span> hashInt big<span class="token punctuation">.</span>Intblkh <span class="token operator">:=</span> pow<span class="token punctuation">.</span>block<span class="token punctuation">.</span>Header<span class="token keyword">for</span> nonce <span class="token operator">&lt;</span> maxNonce <span class="token punctuation">{</span><span class="token keyword">var</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token function">IntToHex</span><span class="token punctuation">(</span>blkh<span class="token punctuation">.</span>Version<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>blkh<span class="token punctuation">.</span>PrevBlockHash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>blkh<span class="token punctuation">.</span>MerkleRoot<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token function">IntToHex</span><span class="token punctuation">(</span>blkh<span class="token punctuation">.</span>Timestamp<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token function">IntToHex</span><span class="token punctuation">(</span>blkh<span class="token punctuation">.</span>Bits<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token function">IntToHex</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>hash <span class="token operator">=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>hashInt<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> hashInt<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>pow<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>nonce<span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> nonce<span class="token punctuation">,</span> hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借助<code>Validate</code>函数完成对挖矿结果的验证，即验证矿工给出的<code>Nonce</code>是否是该难题的答案。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>pow <span class="token operator">*</span>ProofOfWork<span class="token punctuation">)</span> <span class="token function">Validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">var</span> hashInt big<span class="token punctuation">.</span>Int<span class="token keyword">var</span> hash <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span>blkh <span class="token operator">:=</span> pow<span class="token punctuation">.</span>block<span class="token punctuation">.</span>Header<span class="token keyword">var</span> data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token function">IntToHex</span><span class="token punctuation">(</span>blkh<span class="token punctuation">.</span>Version<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>blkh<span class="token punctuation">.</span>PrevBlockHash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span>blkh<span class="token punctuation">.</span>MerkleRoot<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token function">IntToHex</span><span class="token punctuation">(</span>blkh<span class="token punctuation">.</span>Timestamp<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token function">IntToHex</span><span class="token punctuation">(</span>blkh<span class="token punctuation">.</span>Bits<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>data<span class="token operator">=</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token function">IntToHex</span><span class="token punctuation">(</span>blkh<span class="token punctuation">.</span>Nonce<span class="token punctuation">)</span><span class="token operator">...</span><span class="token punctuation">)</span>hash <span class="token operator">=</span> sha256<span class="token punctuation">.</span><span class="token function">Sum256</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>hashInt<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> hashInt<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>pow<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UTXO"><a href="#UTXO" class="headerlink" title="UTXO"></a>UTXO</h4><p>UTXO(Unspent Transaction Outputs)，即没有花掉的交易输出，实际可以理解为在一次转账时剩余没有转出的资金。UTXO的交易模型上，用户通过使用未使用的交易输出（UTXO）来执行一笔交易。</p><p>构建新的UTXO交易的方法如下所示：</p><ul><li>找到输入地址对应的交易PubKeyHash，借助<code>findunspentOutputs</code>找到输入账户的UTXO</li><li>根据UTXO构建交易并进行签名</li><li>完成找零操作：剩余的金额作为UTXO返回到原输入中</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewUTXOTransaction</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> amount <span class="token builtin">int</span><span class="token punctuation">,</span> UTXOSet <span class="token operator">*</span>UTXOSet<span class="token punctuation">)</span> <span class="token operator">*</span>Transaction <span class="token punctuation">{</span><span class="token keyword">var</span> inputs <span class="token punctuation">[</span><span class="token punctuation">]</span>TXInput<span class="token keyword">var</span> outputs <span class="token punctuation">[</span><span class="token punctuation">]</span>TXOutputwal <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">NewWallets</span><span class="token punctuation">(</span><span class="token punctuation">)</span>bc <span class="token operator">:=</span> UTXOSet<span class="token punctuation">.</span>BlockchainpubKeyHash <span class="token operator">:=</span> <span class="token function">HashPublicKey</span><span class="token punctuation">(</span>wal<span class="token punctuation">.</span><span class="token function">GetWallet</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">.</span>PublicKey<span class="token punctuation">)</span>acc<span class="token punctuation">,</span> validOutputs <span class="token operator">:=</span> UTXOSet<span class="token punctuation">.</span><span class="token function">FindUnspentOutputs</span><span class="token punctuation">(</span>pubKeyHash<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token keyword">if</span> acc <span class="token operator">&lt;</span> amount <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span><span class="token string">"ERROR: Not enough funds"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> txid<span class="token punctuation">,</span> outs <span class="token operator">:=</span> <span class="token keyword">range</span> validOutputs <span class="token punctuation">{</span>txID<span class="token punctuation">,</span> err <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">DecodeString</span><span class="token punctuation">(</span>txid<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> out <span class="token operator">:=</span> <span class="token keyword">range</span> outs <span class="token punctuation">{</span>input <span class="token operator">:=</span> TXInput<span class="token punctuation">{</span>Txid<span class="token punctuation">:</span>      txID<span class="token punctuation">,</span>Vout<span class="token punctuation">:</span>      out<span class="token punctuation">,</span>Signature<span class="token punctuation">:</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>PubKey<span class="token punctuation">:</span>    wal<span class="token punctuation">.</span><span class="token function">GetWallet</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">.</span>PublicKey<span class="token punctuation">,</span><span class="token punctuation">}</span>inputs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>inputs<span class="token punctuation">,</span> input<span class="token punctuation">)</span><span class="token punctuation">}</span>out_1 <span class="token operator">:=</span> TXOutput<span class="token punctuation">{</span>amount<span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">}</span>out_1<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span>outputs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> out_1<span class="token punctuation">)</span><span class="token keyword">if</span> acc <span class="token operator">&gt;</span> amount <span class="token punctuation">{</span>out_2 <span class="token operator">:=</span> TXOutput<span class="token punctuation">{</span>acc<span class="token operator">-</span>amount<span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">}</span>out_2<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>outputs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> out_2<span class="token punctuation">)</span> <span class="token punctuation">}</span>tx <span class="token operator">:=</span> Transaction<span class="token punctuation">{</span><span class="token boolean">nil</span><span class="token punctuation">,</span> inputs<span class="token punctuation">,</span> outputs<span class="token punctuation">}</span>bc<span class="token punctuation">.</span><span class="token function">SignTransaction</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>tx<span class="token punctuation">,</span>wal<span class="token punctuation">.</span><span class="token function">GetWallet</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">.</span>PrivateKey<span class="token punctuation">)</span>tx<span class="token punctuation">.</span><span class="token function">SetID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>tx<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="UTXO池"><a href="#UTXO池" class="headerlink" title="UTXO池"></a>UTXO池</h4><p>比特币所有的交易都是放在UTXO池中，这样的好处是为了快速的得到某个UTXO是否当前可用。需要通过公私钥的唯一标识来算出我们当前的余额。在构建UTXO的交易时，我们需要通过UTXO池来需要当前属于自己的UTXO，然后获得相对应的账户金额，然后再生成对应的输出。<code>FindUnspentOutputs</code>函数来查询用户当前未未花费的UTXO金额及其映射关系(存储txid和对应的index，便于后续查找)，具体实现如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>u UTXOSet<span class="token punctuation">)</span> <span class="token function">FindUnspentOutputs</span><span class="token punctuation">(</span>pubkeyHash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> amount <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>unspentOutputs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>totalAmount <span class="token operator">:=</span> <span class="token number">0</span>db <span class="token operator">:=</span> u<span class="token punctuation">.</span>Blockchain<span class="token punctuation">.</span>dberr <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>b <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>utxoBucket<span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">:=</span> b<span class="token punctuation">.</span><span class="token function">Cursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> k <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">;</span> k<span class="token punctuation">,</span> v <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>outs <span class="token operator">:=</span> <span class="token function">DeserializeOutputs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>txid <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token keyword">for</span> outIndex<span class="token punctuation">,</span> out <span class="token operator">:=</span> <span class="token keyword">range</span> outs<span class="token punctuation">.</span>Outputs <span class="token punctuation">{</span><span class="token keyword">if</span> out<span class="token punctuation">.</span><span class="token function">IsLockedWithKey</span><span class="token punctuation">(</span>pubkeyHash<span class="token punctuation">)</span>  <span class="token punctuation">{</span>unspentOutputs<span class="token punctuation">[</span>txid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>unspentOutputs<span class="token punctuation">[</span>txid<span class="token punctuation">]</span><span class="token punctuation">,</span> outIndex<span class="token punctuation">)</span>totalAmount <span class="token operator">+=</span> out<span class="token punctuation">.</span>Value<span class="token keyword">if</span> totalAmount <span class="token operator">&gt;=</span> amount <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> totalAmount<span class="token punctuation">,</span> unspentOutputs<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="BlockChain"><a href="#BlockChain" class="headerlink" title="BlockChain"></a>BlockChain</h4><p>除此之外，还需要完成<code>mineblock</code>来生成新的区块：针对一组交易在区块链上写入一个新块，维护区块链的相关信息</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>Blockchain<span class="token punctuation">)</span> <span class="token function">MineBlock</span><span class="token punctuation">(</span>transactions <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>Transaction<span class="token punctuation">)</span> <span class="token operator">*</span>Block <span class="token punctuation">{</span><span class="token keyword">var</span> last_hash <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>err <span class="token operator">:=</span> bc<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">View</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>b <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>blocksBucket<span class="token punctuation">)</span><span class="token punctuation">)</span>last_hash <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> prev_hash <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token function">copy</span><span class="token punctuation">(</span>prev_hash<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span>last_hash<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span>newBlock <span class="token operator">:=</span> <span class="token function">NewBlock</span><span class="token punctuation">(</span>transactions<span class="token punctuation">,</span>prev_hash<span class="token punctuation">)</span>err <span class="token operator">=</span> bc<span class="token punctuation">.</span>db<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>bolt<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>b <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Bucket</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>blocksBucket<span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>newBlock<span class="token punctuation">.</span><span class="token function">CalCulHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newBlock<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newBlock<span class="token punctuation">.</span><span class="token function">CalCulHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bc<span class="token punctuation">.</span>tip <span class="token operator">=</span> newBlock<span class="token punctuation">.</span><span class="token function">CalCulHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> newBlock<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，为了维护UTXO，需要找到所有UTXO并构建映射，通过函数<code>findUTXO</code>实现：</p><ul><li>UTXO的特点：“未使用的交易”</li><li>对于每笔非CoinBase交易，每个输入都指向之前的输出，根据所有交易的输入判断之前的交易是否已被输出</li><li>维护UTXO和spentTXOs通过循环求得最终的UTXO</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>bc <span class="token operator">*</span>Blockchain<span class="token punctuation">)</span> <span class="token function">FindUTXO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>TXOutputs <span class="token punctuation">{</span>UTXO <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>TXOutputs<span class="token punctuation">)</span>spentTXOs <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>bci <span class="token operator">:=</span> bc<span class="token punctuation">.</span><span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>block <span class="token operator">:=</span> bci<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> tx <span class="token operator">:=</span> <span class="token keyword">range</span> block<span class="token punctuation">.</span><span class="token function">GetTransactions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>txID <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>Outputs<span class="token punctuation">:</span><span class="token keyword">for</span> outIdx<span class="token punctuation">,</span> out <span class="token operator">:=</span> <span class="token keyword">range</span> tx<span class="token punctuation">.</span>Vout <span class="token punctuation">{</span><span class="token keyword">if</span> spentTXOs<span class="token punctuation">[</span>txID<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> spentOutIdx <span class="token operator">:=</span> <span class="token keyword">range</span> spentTXOs<span class="token punctuation">[</span>txID<span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token keyword">if</span> spentOutIdx <span class="token operator">==</span> outIdx <span class="token punctuation">{</span><span class="token keyword">continue</span> Outputs<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>outs <span class="token operator">:=</span> UTXO<span class="token punctuation">[</span>txID<span class="token punctuation">]</span>outs<span class="token punctuation">.</span>Outputs <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>outs<span class="token punctuation">.</span>Outputs<span class="token punctuation">,</span> out<span class="token punctuation">)</span>UTXO<span class="token punctuation">[</span>txID<span class="token punctuation">]</span> <span class="token operator">=</span> outs<span class="token punctuation">}</span><span class="token keyword">if</span> tx<span class="token punctuation">.</span><span class="token function">IsCoinBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> in <span class="token operator">:=</span> <span class="token keyword">range</span> tx<span class="token punctuation">.</span>Vin <span class="token punctuation">{</span>inTxID <span class="token operator">:=</span> hex<span class="token punctuation">.</span><span class="token function">EncodeToString</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span>Txid<span class="token punctuation">)</span>spentTXOs<span class="token punctuation">[</span>inTxID<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>spentTXOs<span class="token punctuation">[</span>inTxID<span class="token punctuation">]</span><span class="token punctuation">,</span> in<span class="token punctuation">.</span>Vout<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> block<span class="token punctuation">.</span><span class="token function">GetPrevhash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> UTXO<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实验结果-1"><a href="#实验结果-1" class="headerlink" title="实验结果"></a>实验结果</h4><p>本次实验基本完成了基于比特币的区块链搭建，具有以下功能：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">go run .  createblockchain -address ADDRESS //创建区块链go run .  createwallet //创建钱包go run .  getbalance -address ADDRESS //查询账户余额go run .  listaddresses //查询区块链上的地址go run .  printchain //打印区块链go run .  reindexutxo //重构UTXO池go run .  send -from FROM -to TO -amount AMOUNT //发起转账交易<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对实现的区块链进行<code>go test</code></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token operator">...</span>PASSok      lab3    <span class="token number">0.188</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PART1&quot;&gt;&lt;a href=&quot;#PART1&quot; class=&quot;headerlink&quot; title=&quot;PART1&quot;&gt;&lt;/a&gt;PART1&lt;/h2&gt;&lt;h3 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;</summary>
      
    
    
    
    <category term="区块链" scheme="http://sn1987a-1.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>代数结构习题课-1</title>
    <link href="http://sn1987a-1.github.io/posts/94cbcba9.html"/>
    <id>http://sn1987a-1.github.io/posts/94cbcba9.html</id>
    <published>2023-05-02T12:48:34.000Z</published>
    <updated>2023-09-23T13:29:20.211Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2023spring代数结构习题课讲义</strong></p><h2 id="代数结构-第一次习题课"><a href="#代数结构-第一次习题课" class="headerlink" title="代数结构 第一次习题课"></a>代数结构 第一次习题课</h2><p>2023.5.3</p><h3 id="第三章-映射"><a href="#第三章-映射" class="headerlink" title="第三章 映射"></a>第三章 映射</h3><h4 id="内容回顾"><a href="#内容回顾" class="headerlink" title="内容回顾"></a>内容回顾</h4><ul><li>映射的基本定义<ul><li>概念：映射，原像，像，值域，映射相等</li><li>给定集合A，B，从A到B的映射有$|B|^{|A|}$个</li></ul></li><li>特殊映射：对于$f:A\rightarrow B$:<ul><li>$B=A,\forall a,f(a)=a$：恒等映射</li><li>$R_f=B$：满射</li><li>任给$a_1,a_2\in A,a_1\neq a_2\Rightarrow f(a_1)\neq f(a_2)$：单射</li><li>单射+满射：一一映射（双射） 相关性质：$f^{-1}$，$n!$个双射</li></ul></li><li>映射的复合：$g\circ f(a)=g(f(a))$ <em>从右往左计算</em><ul><li>结合律：$(h\circ g)\circ f=h\circ (g\circ f)$</li><li>$f^{-1}\circ f=f\circ f^{-1}=I_A$</li><li>复合运算保持单射/满射/双射</li></ul></li><li>置换：映射到自身的<strong>双射</strong><ul><li>恒等映射也可以称为恒等置换</li><li>求逆置换：交换两行并按照第一行排序</li><li>奇置换与偶置换：由逆序的个数奇偶决定</li></ul></li><li>轮换：特殊的置换，$\sigma=(a_1a_2…a_r)$<ul><li><em>不相交</em>的轮换的乘积可以交换</li><li>任何置换都可以表示成若干不相交的轮换之乘积</li><li>置换的阶：将置换表示为不相交的轮换，阶为各轮换的因子长度的最小公倍数</li></ul></li><li>对换：两个元素的轮换<ul><li>任何轮换都可以表示成对换之积</li><li>对换是奇置换，n元置换中，奇置换和偶置换各占一半</li></ul></li><li>开关函数：$F_2={0,1},f(x_1,…x_n)$为$F_2^n$到$F_2$的映射即为n元开关函数，共有$2^{2^n}$个<ul><li>求补运算$\overline f$，逻辑加 $ +$，逻辑乘  $ \cdot$     （注意和算术运算的区别）</li><li>结合律，交换律，分配律，$f+0=f;f\cdot 1=f;f+\overline f=1;f\cdot \overline f=0$</li><li>小项表达式：唯一的表达$f(x_1,..x_n)=\sum_{a_i=0/1,1\leq i\leq n} f(a_1,..a_n)x_1^{a_1}…x_n^{a_n}$</li></ul></li></ul><h4 id="作业题目"><a href="#作业题目" class="headerlink" title="作业题目"></a>作业题目</h4><p><img src="file:///C:\Users\SN1987A\Documents\Tencent Files\945093063\Image\C2C\46D000D57075B73B5A3DF00E1FBC3BF1.png" alt="img" style="zoom:50%;"></p><p><img src="file:///C:\Users\SN1987A\Documents\Tencent Files\945093063\Image\C2C\9DE5D0814A324D580516AA5C871458E6.png" alt="img" style="zoom:50%;"></p><p><strong>3.16 证明：任何n元置换都可以表示成(1 2),(2 3),…,(n-1,n)的乘积</strong></p><p>方法1：用归纳法证明：</p><p>n=2时，2元置换即为(1 2);</p><p>n&gt;2时，假设对于任何k，$k\le n$,满足任何k元置换都可以表示成(1 2),(2 3),…,(k-1,k)的乘积，考虑任何一个n元置换$\sigma$,设该置换对应的位置i的元素为n，令$\tau=(n-1\ n)…(i+1\ i+2)(i\ i+1)\sigma$，依次计算，即为将$\sigma$的第i个元素和第i+1个元素对换，第i+1个元素和第i+2个元素对换…最终可以将元素n换到第n个位置，即$\tau$为（n-1）元置换；将上式进行整理，原n元置换可以写为$\sigma=(i+1\ i+2)(i\ i+1)…(n-1\ n)\tau$，根据归纳假设，$\tau$可以写为(1 2),(2 3),…,(k-1,k)的乘积，因此$\sigma$可以写为(1 2),(2 3),…,(n-1,n)的乘积。</p><p>综上所述，任何n元置换都可以表示成(1 2),(2 3),…,(n-1,n)的乘积。</p><p>方法2：</p><p>任何置换都可以表示为成不相交的轮换之积，任何轮换都可以表示成对换之积，因此只需讨论将对换表示为(1 2),(2 3),…,(n-1,n)的乘积。对换$(a_i\ a_j),i&gt;j$可表示为$(a_{i+1}\ a_{i+2})…(a_{j-2}\ a_{j-1})(a_{j-1}\ a_{j})…(a_{i+1}\ a_{i+2})(a_i\ a_{i+1})$从而得证。</p><p><strong>3.17 求证下列恒等式</strong></p><p><strong>（1）$x_1=x_1x_2x_3+x_1\overline x_2x_3+x_1x_2\overline x_3+x_1\overline x_2\overline x_3$</strong></p><p><strong>$x_1=x_1(x_2+\overline x_2)(x_3+\overline x_3)=x_1x_2x_3+x_1\overline x_2x_3+x_1x_2\overline x_3+x_1\overline x_2\overline x_3$</strong></p><p><strong>（2）$x_1x_2+x_2x_3+x_3\overline x_1=x_1x_2+\overline x_1x_3$</strong></p><p><strong>$x_1x_2+x_2x_3+x_3\overline x_1=x_1x_2+x_2x_3(x_1+\overline x_1)+x_3\overline x_1 = x_1x_2(1+x_3)+\overline x_1x_3(x_2+1)=x_1x_2+\overline x_1x_3$</strong></p><p><strong>注意：开关函数的运算中$a+c=b+c$无法推出$a=b$</strong></p><h4 id="补充习题"><a href="#补充习题" class="headerlink" title="补充习题"></a>补充习题</h4><p>注意，在置换/对换/轮换的计算中，乘积要从右往左计算，轮换的计算方式是将每个元素映射到右边的位置。</p><h4 id="第四章-二元关系"><a href="#第四章-二元关系" class="headerlink" title="第四章 二元关系"></a>第四章 二元关系</h4><h4 id="内容回顾-1"><a href="#内容回顾-1" class="headerlink" title="内容回顾"></a>内容回顾</h4><p>关系</p><ul><li>关系的定义：<ul><li>相关概念：空关系（平凡关系），全关系</li></ul></li><li>关系的性质：判断是否具有某种性质<ul><li>自反性，反自反性，对称性，反对称性，传递性</li></ul></li><li>关系的表示：<ul><li>有序二元组：$xRy$</li><li>关系矩阵：$mij=\begin{cases}0,a_iR\mkern-10.5mu/ a_j\\1,a_iRa_j\end{cases} $</li><li>关系图：如果有$a_iRa_j$，则画一条由$a_i$指向$a_j$的有向弧（环）</li></ul></li><li>关系的运算：<ul><li>相等，$&lt;,\leq,&gt;,\geq$</li><li>并交补运算（交换律，结合律）</li><li>复合关系 ：结合律，幂运算$R^n=R^m\circ R1^{n-m}$</li><li>自反闭包：包含R且满足自反性质的最小关系</li><li>对称闭包，传递闭包</li></ul></li></ul><p>等价关系</p><ul><li>满足自反，对称，传递</li><li>等价类$[a]_R$，代表元</li><li>集合的划分与集合上的等价关系一一对应（划分相同——等价关系本质相同） </li><li>A/R：关于等价关系R的商集</li></ul><p>序关系</p><ul><li>$\preceq$：自反，反对称，传递；偏序集$<a,\preceq>$<ul><li>可比较/不可比较</li></ul></a,\preceq></li><li>线序关系：任意两个元素都是可比较的（完全序关系）</li><li>序关系中的控制关系：y控制x，即$x\hat \preceq_\neq y$，且不存在$z,x\hat \preceq_\neq z ,z\hat\preceq_\neq y$</li><li>极大元，极小元</li><li>哈希图：<em>最上方是极大元，最下方是极小元</em></li><li>最大元，最小元<ul><li>最大元一定是极大元，最大元至多一个</li></ul></li><li>（子集的）上界/下界：不一定有，不一定唯一<ul><li>最小上界/上确界；最大下界/下确界</li></ul></li></ul><p>集合的势</p><ul><li>等势：$A \sim B$：存在双射<ul><li>$\mathscr P(E)$上的等价关系</li></ul></li><li>有限集合</li><li>可数集合 ；可数无限集合：与自然数集合等势的集合</li><li>势的大小；支配：A和B的一个子集等势，则称B支配A，$A\preceq B$：偏序关系</li><li>$A\prec \mathscr P(A) $</li><li>无限集合<ul><li>每个无限集合都有一个可数无限子集</li><li>每个无限集合都和它的某个真子集集合等势</li></ul></li></ul><h4 id="作业题目-1"><a href="#作业题目-1" class="headerlink" title="作业题目"></a>作业题目</h4><p><strong>4.7.设$A=\{1,2,3,4\},$在$\mathscr{P} (A)$上定义关系“$\sim$”。任给$S,T\in \mathscr{P}(A)$,</strong></p><script type="math/tex; mode=display">S\sim T,当且仅当\quad |S|=|T|</script><p><strong>证明：“$\sim$”是$\mathscr{P}(A)$上的等价关系，并写出它的商集$\mathscr{P}(A)/\sim$。</strong></p><ul><li>自反性：$\forall S\in \mathscr P(A),|S|=|S|\Rightarrow S\sim S$</li><li>对称性：$\forall S,T\in \mathscr P(A),S\sim T\Rightarrow |S|=|T|\Rightarrow |T|=|S|\Rightarrow T\sim S$</li><li>传递性：$\forall S,T,V\in \mathscr P(A),S\sim T,T\sim V$</li></ul><p>商集：$\{\{\empty\},\\\{\{1\},\{2\},\{3\},\{4\}\},\\\{\{1,2\},\{1,3\},\{1,4\},\{2,3\},\{2,4\},\{3,4\}\},\\\{\{1,2,3\},\{1,2,4\},\{1,3,4\},\{2,3,4\}\},\\\{\{1,2,3,4\}\}\}$</p><p><strong>4.16.$A=\{a_1,a_2,…,a_n,…\}$是任意集合。在偏序集$&lt;\mathscr{P}(A),\subseteq&gt;$中取子集序列$\{a_1\},\{a_1,a_2\},\{a_1,a_2,a_3\},…,\{a_1,a_2,…,a_n,\},…$,它们的并集是否是$\mathscr{P}(A)$的一个极大元？为什么？</strong></p><ul><li>若A为有限集合，显然子集序列的并集为极大元（反证法）</li><li>若A是可数无限集合，则并集P可能是极大元，也可能不是极大元。举例：设A为自然数集合<ul><li>是极大元： $a_i=i-1,\{a_1,a_2,…a_n,…\}=\{0,1,….n,..\}=A$</li><li>不是极大元：$a_i=i,\{a_1,a_2,…a_n,…\}=\{1,2,…n,…\}\subset A$</li></ul></li><li>若A是不可数集合，则一定不是极大元，否则并集$P=A,{a_1,a_2,…a_n,…}$列举出了A的所有元素，与A是不可数集合矛盾。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;2023spring代数结构习题课讲义&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;代数结构-第一次习题课&quot;&gt;&lt;a href=&quot;#代数结构-第一次习题课&quot; class=&quot;headerlink&quot; title=&quot;代数结构 第一次习题课&quot;&gt;&lt;/a&gt;代数结构 第一次习</summary>
      
    
    
    
    <category term="代数结构" scheme="http://sn1987a-1.github.io/categories/%E4%BB%A3%E6%95%B0%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>加密算法</title>
    <link href="http://sn1987a-1.github.io/posts/79dcde63.html"/>
    <id>http://sn1987a-1.github.io/posts/79dcde63.html</id>
    <published>2023-04-28T12:48:34.000Z</published>
    <updated>2023-09-24T03:52:09.035Z</updated>
    
    <content type="html"><![CDATA[<h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul><li>理解非对称加密算法</li><li>理解椭圆曲线算法ECC</li><li>实现比特币上的椭圆曲线secp256k1算法</li></ul><h4 id="ECC算法流程"><a href="#ECC算法流程" class="headerlink" title="ECC算法流程"></a>ECC算法流程</h4><p>ECC算法中，陷门函数是定义在有限域上的二元三次曲线y^2^=x^3^+ax+b上的点所组成的阿贝尔群。</p><p>公钥：点Q</p><p>私钥：大数k</p><p>ECC算法是有限域Fp满足公式：Q=kP。</p><p>签名过程：</p><ul><li><p>取一个新的随机数k，令$k*G\equiv R\ mod \ N$</p></li><li><p>计算S：</p></li></ul><script type="math/tex; mode=display">uG + vP = R = kG \\  uG + veG = kG\\  u + ve = k \\  z/s + re/s = k\\  (z + re)/s = k\\  s = (z + re)/k</script><ul><li>返回签名：signature(s,r)</li></ul><p>签名的数字为（s,r）</p><p>验签过程：</p><ul><li>计算u，v</li><li>计算uG+vP</li><li>判断(uG+vp).x是否和r模N同余，如果是，则签名成功</li></ul><h3 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h3><h4 id="ECC签名"><a href="#ECC签名" class="headerlink" title="ECC签名"></a>ECC签名</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>ecc <span class="token operator">*</span>MyECC<span class="token punctuation">)</span> <span class="token function">Sign</span><span class="token punctuation">(</span>msg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> secKey <span class="token operator">*</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Signature<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>k<span class="token punctuation">,</span>err <span class="token operator">:=</span><span class="token function">newRand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token operator">!=</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>err<span class="token punctuation">}</span>R <span class="token operator">:=</span> <span class="token function">Multi</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>k<span class="token punctuation">)</span>r<span class="token operator">:=</span>R<span class="token punctuation">.</span>Xr<span class="token operator">=</span>r<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>N<span class="token punctuation">)</span>z<span class="token operator">:=</span>crypto<span class="token punctuation">.</span><span class="token function">Keccak256</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>z_i <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>s<span class="token operator">:=</span><span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span><span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>z_i<span class="token punctuation">,</span><span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>secKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Inv</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span>s<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>N<span class="token punctuation">)</span>sig<span class="token operator">:=</span><span class="token operator">&amp;</span>Signature<span class="token punctuation">{</span>s<span class="token punctuation">,</span>r<span class="token punctuation">}</span><span class="token keyword">return</span> sig<span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="ECC验签"><a href="#ECC验签" class="headerlink" title="ECC验签"></a>ECC验签</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>ecc <span class="token operator">*</span>MyECC<span class="token punctuation">)</span> <span class="token function">VerifySignature</span><span class="token punctuation">(</span>msg <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> signature <span class="token operator">*</span>Signature<span class="token punctuation">,</span> pubkey <span class="token operator">*</span>Point<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>s<span class="token operator">:=</span>signature<span class="token punctuation">.</span>sr<span class="token operator">:=</span>signature<span class="token punctuation">.</span>rz<span class="token operator">:=</span>crypto<span class="token punctuation">.</span><span class="token function">Keccak256</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>z_i <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>s_inv<span class="token operator">:=</span><span class="token function">Inv</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>N<span class="token punctuation">)</span>s_inv<span class="token operator">=</span>s_inv<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>s_inv<span class="token punctuation">,</span>N<span class="token punctuation">)</span>u<span class="token operator">:=</span><span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>z_i<span class="token punctuation">,</span>s_inv<span class="token punctuation">)</span>u<span class="token operator">=</span>u<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span>N<span class="token punctuation">)</span>v<span class="token operator">:=</span><span class="token function">new</span><span class="token punctuation">(</span>big<span class="token punctuation">.</span>Int<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Mul</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>s_inv<span class="token punctuation">)</span>v<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>N<span class="token punctuation">)</span>ans<span class="token operator">:=</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token function">Multi</span><span class="token punctuation">(</span>G<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Multi</span><span class="token punctuation">(</span>pubkey<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Xans<span class="token operator">=</span>ans<span class="token punctuation">.</span><span class="token function">Mod</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token keyword">return</span> ans<span class="token punctuation">.</span><span class="token function">Cmp</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;理解非对称加密算法&lt;/li&gt;
&lt;li&gt;理解椭圆曲线算法ECC&lt;/li&gt;
&lt;li&gt;实现比特币上的椭圆曲线secp2</summary>
      
    
    
    
    <category term="区块链" scheme="http://sn1987a-1.github.io/categories/%E5%8C%BA%E5%9D%97%E9%93%BE/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>ML算法：特征抽取</title>
    <link href="http://sn1987a-1.github.io/posts/72ae2b6b.html"/>
    <id>http://sn1987a-1.github.io/posts/72ae2b6b.html</id>
    <published>2023-01-10T12:48:34.000Z</published>
    <updated>2023-09-24T03:49:02.486Z</updated>
    
    <content type="html"><![CDATA[<h2 id="特征抽取"><a href="#特征抽取" class="headerlink" title="特征抽取"></a>特征抽取</h2><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><p>本次实验的实验目的是对一数据集进行分类，因为数据集中存在着噪声数据，需要对数据进行特征抽取，并使用线性回归，决策树，神经网络，SVM以及XGBoost分别实现对模型的预测并进行评估。</p><h3 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h3><h4 id="特征抽取和特征选择"><a href="#特征抽取和特征选择" class="headerlink" title="特征抽取和特征选择"></a>特征抽取和特征选择</h4><p>对实验的训练数据集进行观察可得：对于每一条样本，有与之相关的120个feature（个别feature可能是na），但是对于训练有效的特征不足20个，如果对原数据集进行训练，可能会导致过拟合，训练过慢，效果较差等结果，因此要对数据进行特征抽取，选取对训练有益的特征</p><p>本次实验中，特征抽取使用了如下两种方法：</p><h5 id="基于决策树抽取"><a href="#基于决策树抽取" class="headerlink" title="基于决策树抽取"></a>基于决策树抽取</h5><p>本部分借助sklearn中的DecisionTreeClassifier进行处理，因为每个特征具有对应的权重，对于分类结果帮助较大的feature的权重大，为了筛选出有用的信息，可以选择决策树中权重大的点，处理思路为：</p><ul><li>将数据集划分为训练集和测试集，得到训练集对应的决策树，在测试集上测试准确率</li><li>如果测试集上的准确率大于25.5%（表明此次训练的结果较为有效），记录下此时所有feature对应的权重</li><li>重复上述过程，直到收集到的权重数大于100，将各个feature得到的权重相加，得到新的权重</li><li>根据新的权重，保留最大的二十个feature用于训练</li></ul><p>类似的，不仅仅是基于决策树，基于XGBoost，SVM等通过多次构建模型找到权重最大的特征</p><h5 id="RFE方法"><a href="#RFE方法" class="headerlink" title="RFE方法"></a>RFE方法</h5><p>与上一种抽取方法类似，RFE也是借助反复构建模型寻找较好的特征，不同的是RFE借助递归的思路，依次找出特征中最好的特征并再下一轮训练中排除当前特征，在剩余的特征上重复训练，直到找出20个最好的特征。</p><p>RFE也可以采取线性回归，SVM等模型作为底层模型实现特征选择，本次实验中RFE借助sklearn库中的RFE函数以及线性回归函数作为数据抽取的方法</p><h5 id="Relief-F方法"><a href="#Relief-F方法" class="headerlink" title="Relief-F方法"></a>Relief-F方法</h5><p>Relief算法是用于两类数据的分类问题的特征权重计算方法，而Relief-F作为Relief算法拓展，可以实现多分类问题的特征权重计算，算法的主要步骤为：</p><ul><li>将所有样本按类别分类，对于每类样本，分别抽取一个样本记作x</li><li>对于每一个x，在该类中找到x的k个最近邻，在不包含该类别的训练集中也找出k个最近邻</li><li>根据近邻及所属的类别计算特征的权重</li><li>对特征的权重进行派别，得到合适的特征</li></ul><h4 id="多分类任务"><a href="#多分类任务" class="headerlink" title="多分类任务"></a>多分类任务</h4><p>在前面的实验中，已经完成了对二分类任务的逻辑回归、SVM模型，为了适应本实验的任务，要将其进行适当修改，以便实现多分类任务。</p><p>多分类学习可以有二分类学习器集成而来，有三种方法：</p><ul><li>一对一</li><li>一对其余</li><li>多对多</li></ul><p>其中，本实验采用了多对多的方式进行训练，由于本实验分类为四类，可以将多对多的分类学习简化设计如下：</p><ul><li>设计不同的二分类器，每个二分类器将两个类别视作正类，另外两个类别视为负类，因此共需要六个二分类学习器</li><li>对于每个分类器，因为其对称性，正类和负类的权重可以视为一致的，在预测时，对于一个样本统计，将某一类别视为正类的概率，得到的最大的概率对应的类别视作该样本的预测值</li></ul><h3 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h3><h4 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h4><ul><li><p>从数据集中读取数据</p></li><li><p>将空数据填充为该特征中其他不为空的数据的中位数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> column <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>feature<span class="token punctuation">.</span>columns<span class="token punctuation">[</span>feature<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    val <span class="token operator">=</span> feature<span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span>    feature<span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>val<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>正则化数据</p></li><li>将数据集随机分为训练集和测试集（7：3）</li></ul><h4 id="特征抽取-1"><a href="#特征抽取-1" class="headerlink" title="特征抽取"></a>特征抽取</h4><ul><li><p>基于决策树划分，得到权重最大的特征对应的序号</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>重新划分训练集和测试集    dtree<span class="token operator">=</span>tree<span class="token punctuation">.</span>DecisionTreeClassifier<span class="token punctuation">(</span>splitter<span class="token operator">=</span><span class="token string">"random"</span><span class="token punctuation">,</span>min_samples_leaf<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>    dtree<span class="token operator">=</span>dtree<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span>    test_res<span class="token operator">=</span>dtree<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span>    <span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>test_label<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>test_label<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>test_res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span><span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token operator">/</span>test_label<span class="token punctuation">.</span>size<span class="token operator">&gt;</span><span class="token number">0.255</span><span class="token punctuation">:</span>        weight<span class="token operator">+=</span>dtree<span class="token punctuation">.</span>feature_importances_        t<span class="token operator">+=</span><span class="token number">1</span>    <span class="token keyword">if</span> t<span class="token operator">&gt;</span><span class="token number">100</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>max_indexs <span class="token operator">=</span> heapq<span class="token punctuation">.</span>nlargest<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> weight<span class="token punctuation">.</span>take<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>借助RFE划分</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_selection <span class="token keyword">import</span> RFE<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression <span class="token keyword">as</span> LRlinear_model<span class="token operator">=</span>LR<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token operator">=</span> RFE<span class="token punctuation">(</span>linear_model<span class="token punctuation">,</span> n_features_to_select<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fit<span class="token punctuation">(</span>Data<span class="token punctuation">,</span> Label<span class="token punctuation">)</span>  Data <span class="token operator">=</span> s<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>Data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h4><p>在LogisticRegression中添加：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">multi_fit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>X<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    yi<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span>y<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">### set yi</span>    theta<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    J<span class="token operator">=</span>np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t<span class="token punctuation">,</span>j<span class="token punctuation">,</span>temp<span class="token operator">=</span>self<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span>yi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        theta<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        J<span class="token operator">+=</span>j    <span class="token keyword">return</span> theta<span class="token punctuation">,</span>J<span class="token keyword">def</span> <span class="token function">multi_pred</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>X<span class="token punctuation">,</span>multi_theta<span class="token punctuation">)</span><span class="token punctuation">:</span>    m<span class="token operator">=</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    pre<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    X<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        theta<span class="token operator">=</span>multi_theta<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        p<span class="token operator">=</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span>theta<span class="token punctuation">)</span>        p<span class="token operator">=</span>p<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>        pre<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token keyword">return</span> pre<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进行训练、预测、绘制图像</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">lr<span class="token operator">=</span>LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>theta<span class="token punctuation">,</span>loss<span class="token operator">=</span>lr<span class="token punctuation">.</span>multi_fit<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span>preds<span class="token operator">=</span>lr<span class="token punctuation">.</span>multi_pred<span class="token punctuation">(</span>test_data<span class="token punctuation">,</span>theta<span class="token punctuation">)</span>test_r<span class="token operator">=</span><span class="token punctuation">[</span>preds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>preds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>preds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>preds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>preds<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>preds<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>preds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>preds<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span>preds<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>preds<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>preds<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">+</span>preds<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>loss<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">u"times"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">u"loss-value"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>test_label<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> test_label<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>j<span class="token punctuation">:</span>            <span class="token keyword">if</span> test_r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>test_r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> test_r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>test_r<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> test_r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>test_r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">and</span> test_r<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>test_r<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token builtin">sum</span><span class="token operator">+=</span><span class="token number">1</span><span class="token builtin">sum</span><span class="token operator">/</span>test_label<span class="token punctuation">.</span>size<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h4><p>调用sklearn.tree中的DecisionTreeClassifier实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> treedtree<span class="token operator">=</span>tree<span class="token punctuation">.</span>DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>dtree<span class="token operator">=</span>dtree<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span>test_res<span class="token operator">=</span>dtree<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h4><p>调用sklearn中的neural_network实现：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> neural_network <span class="token keyword">as</span> NNnn<span class="token operator">=</span>NN<span class="token punctuation">.</span>MLPClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>nn<span class="token operator">=</span>nn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span>test_res<span class="token operator">=</span>nn<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h4><p>处理方式与线性回归的模型相似</p><h4 id="XGBoost"><a href="#XGBoost" class="headerlink" title="XGBoost"></a>XGBoost</h4><p>调用xgboost.sklearn库实现XGBoost</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">xgb<span class="token operator">=</span>XGB<span class="token punctuation">(</span><span class="token punctuation">)</span>xgb<span class="token operator">=</span>xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span>test_res<span class="token operator">=</span>xgb<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h3><h4 id="特征抽取-2"><a href="#特征抽取-2" class="headerlink" title="特征抽取"></a>特征抽取</h4><ul><li><p>基于决策树进行特征选择</p><p>所有节点的权重数据:根据观察不难看出，不同特征的权重分布存在差距，大部分分布在0.8-1.0之间</p></li></ul><ul><li><p>RFE特征抽取</p><p>对RFE分别借助线性回归，SVM和随机森林的底层模型训练，发现线性回归训练时间较短，另外两个模型需要较长时间的训练，且这几类模型对训练结果的预测效果没有明显的影响，故选取线性回归模型进行RFE处理。</p><p>对特征的重要性进行排名，如下所示：筛选去前20个特征，进行后续训练和模型预测</p></li></ul><h3 id="模型训练结果"><a href="#模型训练结果" class="headerlink" title="模型训练结果"></a>模型训练结果</h3><p>五个模型最佳参数的训练结果：</p><div class="table-container"><table><thead><tr><th>模型</th><th>训练时间</th><th>准确率</th></tr></thead><tbody><tr><td>LogisticRegression</td><td>15s</td><td>27.4%</td></tr><tr><td>DecisionTree</td><td>0.4s</td><td>27.0%</td></tr><tr><td>NeuralNetwork</td><td>2.3s</td><td>26.9%</td></tr><tr><td>SVM</td><td>33s</td><td>26.3%</td></tr><tr><td>XGBoost</td><td>4.5s</td><td>25.8%</td></tr></tbody></table></div><p>总体来说，线性回归的训练效果较好，但几种模型均在较低准确率的较小范围内波动，并没有实现较好的结果。</p><p>对于不同的特征选择模型，甚至不进行特征选择，训练准确率的差距较小，在后续调参过程中不做区分。由于DecisionTree和NeuralNetwork模型的训练效果较好并且训练时间短，本次实验将重点分析该两类模型的调参效果。</p><h4 id="逻辑回归"><a href="#逻辑回归" class="headerlink" title="逻辑回归"></a>逻辑回归</h4><p>迭代3000次，得到的损失函数如下所示：</p><p>该次训练结果准确率：26.8%</p><p>可以看出，模型训练的损失是逐渐递减至收敛的，但是损失的下降有限：从2.88下降到2.86，仅有2%的提升，说明逻辑回归无法较好的学习到模型哦那个的分布特征。</p><h4 id="决策树-1"><a href="#决策树-1" class="headerlink" title="决策树"></a>决策树</h4><p>使用GridSearchCV寻找最优参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">param <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'criterion'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'gini'</span><span class="token punctuation">,</span><span class="token string">'entropy'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span><span class="token string">'criterion'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'gini'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'min_samples_leaf'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'min_impurity_decrease'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token punctuation">{</span><span class="token string">'max_depth'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'min_impurity_decrease'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.2</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>grid <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>DecisionTreeClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>param_grid<span class="token operator">=</span>param<span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到的最优参数：</p><p>此时最优结果：26.8%</p><p>对参数max_depth取不同值统计准确率</p><p>重复几次即可发现，max_depth参数对准确率的影响的结果不明显，更多是随机的因素。（splitter=”random”）</p><p>同样，对于参数min_sample_leaf，也有类似的结果</p><h4 id="神经网络-1"><a href="#神经网络-1" class="headerlink" title="神经网络"></a>神经网络</h4><p>一次训练过程中的损失率：</p><p>同样，使用GridSearchCV寻找最优参数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCVparam <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">'hidden_layer_sizes'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'alpha'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">,</span><span class="token number">0.0001</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'learning_rate_init'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span><span class="token number">0.005</span><span class="token punctuation">,</span><span class="token number">0.001</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span>grid <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>NN<span class="token punctuation">.</span>MLPClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>param_grid<span class="token operator">=</span>param<span class="token punctuation">,</span>cv<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span>grid<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_data<span class="token punctuation">,</span>train_label<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时的准确率为26.4%</p><h4 id="SVM-1"><a href="#SVM-1" class="headerlink" title="SVM"></a>SVM</h4><p>实验中，该SVM模型采用梯度下降法实现。</p><p>此次训练的准确率：25.4%</p><p>由图可见，SVM模型的训练收敛速度较快，大约10次即可收敛，损失由8500下降到了3500，但是在测试集的准确率仍较低，说明SVM可能对训练集存在过拟合，也无法较好的学习到数据集中的数据。</p><h4 id="XGBoost-1"><a href="#XGBoost-1" class="headerlink" title="XGBoost"></a>XGBoost</h4><p>对应的参数和准确率：</p><div class="table-container"><table><thead><tr><th>boost</th><th>gamma</th><th>max_depth</th><th>max_delta_step</th><th>准确率</th></tr></thead><tbody><tr><td>gblinear</td><td>-</td><td>-</td><td>0</td><td>25.6%</td></tr><tr><td>gbtree</td><td>0</td><td>-</td><td>0</td><td>25.2%</td></tr><tr><td>gbtree</td><td>0</td><td>3</td><td>0</td><td>25.7%</td></tr><tr><td>gbtree</td><td>0.1</td><td>3</td><td>0</td><td>25.4%</td></tr><tr><td>gbtree</td><td>0.1</td><td>3</td><td>1</td><td>25.8%</td></tr><tr><td>gbtree</td><td>0</td><td>3</td><td>1</td><td>25.4%</td></tr></tbody></table></div><p>可见，准确率最高的一组参数为：boost=’gbtree’,gamma=0.1,max_depth=3,max_delta_step=1</p><h3 id="实验分析"><a href="#实验分析" class="headerlink" title="实验分析"></a>实验分析</h3><p>从实验结果的角度分析，本次实验的实验结果较不理想，训练效果最好的一组数据为借助RFE进行特征抽取，线性回归多分类模型（3000轮迭代），最终的准确率为27.4%，其他的模型均在26%上下浮动，对于四分类问题，这样的效果无疑是较差的，根本原因在于数据特征的抽取效果较差，例如本实验中采用了三种不同的模型来进行特征选择，每次选出的特征之间的重合率较低，并未找到真正有效的特征，学习器无法学到数据的分布特征，因此无论是后续调参还是更改模型，都无法得到较好的结果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;特征抽取&quot;&gt;&lt;a href=&quot;#特征抽取&quot; class=&quot;headerlink&quot; title=&quot;特征抽取&quot;&gt;&lt;/a&gt;特征抽取&lt;/h2&gt;&lt;h3 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="机器学习" scheme="http://sn1987a-1.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>编译原理-GVN</title>
    <link href="http://sn1987a-1.github.io/posts/7e7a9082.html"/>
    <id>http://sn1987a-1.github.io/posts/7e7a9082.html</id>
    <published>2022-11-14T12:48:34.000Z</published>
    <updated>2023-09-24T05:30:05.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li>请简述概念：支配性、严格支配性、直接支配性、支配边界。</li></ol><ul><li>支配性<ul><li>在入口节点为b0的流图中，若bi在从b0到bj的所有路径中均出现，则称b1支配bj，其中Dom(bj)是所有支配bj的节点的集合</li></ul></li><li>严格支配性<ul><li>对于流图中给定的节点b，若节点$a\in Dom(b)-b$,则称a严格支配b节点</li></ul></li><li>直接支配性<ul><li>对于流图中给定的节点b，严格支配b的节点集合为Dom(b)-b,在该集合中距离b最近的节点直接支配b，记为IDom(b)</li></ul></li><li>支配边界<ul><li>对于流图中给定的节点b，若节点a满足:(1)b支配a一个前驱q($q\in preds(a),b\in Dom(q)$)(2)b不严格支配a，将具有这种性质的a的集合记为b的支配边界DF(b)</li></ul></li></ul><ol><li><code>phi</code>节点是SSA的关键特征，请简述<code>phi</code>节点的概念，以及引入<code>phi</code>节点的理由。</li></ol><p><code>phi</code>节点:出现在程序基本块汇合节点的对某一变量x进行一次新的定义，作为程序的一条指令，完成了将来自不同边的x的值进行合并的工作</p><p>引入理由:为了满足SSA的静态单赋值形式，沿着流图的不同路径，x的当前值可能被分配了一个唯一的名字，在多条路径的汇合处，不同的静态单赋值形式名必须调整为一个名字，<code>phi</code>节点的作用就是在路径汇合点将同一变量的多个形式名合并为一个名字。</p><ol><li><p>观察下面给出的<code>cminus</code>程序对应的 LLVM IR，与<strong>开启</strong><code>Mem2Reg</code>生成的LLVM IR对比，每条<code>load</code>, <code>store</code>指令发生了变化吗？变化或者没变化的原因是什么？请分类解释。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> globVar<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    globVar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">999</span><span class="token punctuation">;</span>    b <span class="token operator">=</span> <span class="token number">2333</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>globVar<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>before <code>Mem2Reg</code>：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@globVar = global i32 zeroinitializerdeclare void @neg_idx_except()define i32 @func(i32 %arg0) {label_entry:  %op1 = alloca i32  store i32 %arg0, i32* %op1  %op2 = load i32, i32* %op1  %op3 = icmp sgt i32 %op2, 0  %op4 = zext i1 %op3 to i32  %op5 = icmp ne i32 %op4, 0  br i1 %op5, label %label6, label %label7label6:                                                ; preds = %label_entry  store i32 0, i32* %op1  br label %label7label7:                                                ; preds = %label_entry, %label6  %op8 = load i32, i32* %op1  ret i32 %op8}define i32 @main() {label_entry:  %op0 = alloca [10 x i32]  %op1 = alloca i32  store i32 1, i32* @globVar  %op2 = icmp slt i32 5, 0  br i1 %op2, label %label3, label %label4label3:                                                ; preds = %label_entry  call void @neg_idx_except()  ret i32 0label4:                                                ; preds = %label_entry  %op5 = getelementptr [10 x i32], [10 x i32]* %op0, i32 0, i32 5  store i32 999, i32* %op5  store i32 2333, i32* %op1  %op6 = load i32, i32* %op1  %op7 = call i32 @func(i32 %op6)  %op8 = load i32, i32* @globVar  %op9 = call i32 @func(i32 %op8)  ret i32 0}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>After <code>Mem2Reg</code>：</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">@globVar = global i32 zeroinitializerdeclare void @neg_idx_except()define i32 @func(i32 %arg0) {label_entry:  %op3 = icmp sgt i32 %arg0, 0  %op4 = zext i1 %op3 to i32  %op5 = icmp ne i32 %op4, 0  br i1 %op5, label %label6, label %label7label6:                                                ; preds = %label_entry  br label %label7label7:                                                ; preds = %label_entry, %label6  %op9 = phi i32 [ %arg0, %label_entry ], [ 0, %label6 ]  ret i32 %op9}define i32 @main() {label_entry:  %op0 = alloca [10 x i32]  store i32 1, i32* @globVar  %op2 = icmp slt i32 5, 0  br i1 %op2, label %label3, label %label4label3:                                                ; preds = %label_entry  call void @neg_idx_except()  ret i32 0label4:                                                ; preds = %label_entry  %op5 = getelementptr [10 x i32], [10 x i32]* %op0, i32 0, i32 5  store i32 999, i32* %op5  %op7 = call i32 @func(i32 2333)  %op8 = load i32, i32* @globVar  %op9 = call i32 @func(i32 %op8)  ret i32 0}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除的<code>load</code>/<code>store</code>:</p><ul><li>第6，7行：程序中对变量x进行了多次赋值，在未开启Mem2Reg的IR中是通过冗余的访存实现的，在<code>load</code>语句前的程序块中已存在x对应的值，在删去该条<code>load</code>后，变量x不会被其他语句load，<code>store</code>语句也被删除，load和store是不必要的。</li><li>第13行：此处对x的值进行了存储，但是在该语句之后x并不是活跃变量，x的值不会被调用，因此该处的store是多余的。</li><li>第32，33行：程序中对变量b进行了赋值，又将b作为函数参数进行函数调用，函数调用时所用的值实际上就是立即数，是在该程序块中已存在对应的值，因此可以不用<code>load</code>，也无需<code>store</code>指令，此处可以删除load和store指令。</li></ul><p>未变化的<code>load</code>/<code>store</code>:</p><ul><li>第23行：此处<code>store</code>对全局变量globVar进行赋值，因为是用立即数更新数据的值，由于<code>Mem2Reg</code>不会对该全局变量进行处理，需要在此处存储变量的值，不存在冗余。</li><li>第31行：此处<code>store</code>对数组a中的元素利用立即数进行赋值，由于<code>Mem2Reg</code>不会对数组型元素进行处理，需要在此处存储变量的值，不存在冗余。</li><li>第35行：此处<code>load</code>将全局变量globVar的值赋给临时变量，用于后续函数调用作为函数的参数，且此前globVar对应的值在该块中不存在，不存在冗余，不需要删除。</li></ul></li><li><p>指出放置phi节点的代码，并解释是如何使用支配树的信息的。（需要给出代码中的成员变量或成员函数名称）</p><ul><li>放置伪代码的函数为<code>src\optimization\Mem2Reg.cpp</code>中的<code>Mem2Reg::generate_phi</code>函数。</li><li>step1：以基本块为单位，逐个遍历函数的所有指令，先找大活跃在多个基本块的变量及其对应的块，存储在<code>live_var_2blocks</code>中</li><li>step2：对于所有的变量，逐次遍历<code>live_var_2blocks</code>,在对应的dom集合<code>bb_dominance_frontier_bb</code>中依次寻找支配边界，如果在该基本块中未添加<code>phi</code>（<code>bb_has_var_phi</code>中不存在记录）,则插入<code>phi</code>：<code>create_phi</code>,在<code>bb_dominance_frontier_bb</code>中添加该语句，并在<code>bb_has_var_phi</code>中添加记录，防止重复添加。</li></ul></li><li><p>算法是如何选择<code>value</code>(变量最新的值)来替换<code>load</code>指令的？（描述清楚对应变量与维护该变量的位置）</p></li></ol><ul><li>选择<code>value</code>来替换<code>load</code>指令的位置在<code>src\optimization\Mem2Reg.cpp</code>中的<code>Mem2Reg::rename()</code>函数。</li><li>对全局变量<code>var_val_stack</code>进行以下调用和维护：<ul><li>第一次遍历基本块的所有指令：<code>phi</code>指令：根据插入的<code>phi</code>指令，将对应变量的最新定值的位置设为该<code>phi</code>语句</li><li>第二次遍历基本块中的所有指令：<code>load</code>指令：如果load的变量在<code>var_val_stack</code>中已经存在，则将该语句加入<code>wait_delete</code>，并维护对应的全局变量。<code>store</code>指令：将store存入内存的值作为最新定值</li><li>借助<code>get_succ_basic_blocks</code>补充因<code>phi</code>改动的<code>var_val_stack</code>对应的值</li><li>第三次遍历基本块中的所有指令：pop出<code>var_val_stack</code>中的最新定值</li></ul></li><li>在第二次遍历中，对于<code>load</code>指令，如果load的变量在<code>var_val_stack</code>中已经存在，则将该语句加入<code>wait_delete</code>，并利用<code>replace_all_use_with</code>函数维护其他指令。最后将<code>wait_delete</code>进行删除，也就是删除<code>load</code>指令。</li></ul><h3 id="代码阅读总结"><a href="#代码阅读总结" class="headerlink" title="代码阅读总结"></a>代码阅读总结</h3><p>此次实验的主要内容是熟悉代码优化的基础知识，了解SSA格式的IR的相关概念，并阅读了用来优化Lab3生成的IR指令的<code>Mem2Reg</code>相关代码,主要优化了冗余的load，store，alloca指令。主要收获是熟悉了支配节点，支配边界等概念，以及如何将这些概念用于代码优化，如何在程序中维护和利用这些属性来实现代码的优化。</p><h2 id="PART2-实验要求"><a href="#PART2-实验要求" class="headerlink" title="PART2 实验要求"></a>PART2 实验要求</h2><p>本次实验要完成的目标是在lab4.1 SSA IR的基础上，根据实验框架完成对SSA IR基于数据流分析完成的GVN优化。</p><h2 id="实验难点"><a href="#实验难点" class="headerlink" title="实验难点"></a>实验难点</h2><ul><li>根据LLVM IR的指令类型设计Expression子类的类型，并通过递归定义的方法定义值表达式，完成<code>Value Expr</code></li><li>处理<code>phi</code>指令，构思设计<code>copy stmt</code>部分和<code>intersect</code>,<code>ValuePhiFunc</code>函数</li></ul><h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><h3 id="实验思路"><a href="#实验思路" class="headerlink" title="实验思路"></a>实验思路</h3><h4 id="ValueNumber"><a href="#ValueNumber" class="headerlink" title="ValueNumber"></a>ValueNumber</h4><p>GVN的核心就是建立全局值编号，本次实验中使用valueexpr作为值编号，每个等价类的valueexpr是唯一的。</p><p>为了解决可能存在的valueexpr相互依赖导致的无限递归的问题，将等价类运算符重载部分定义为：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool CongruenceClass::operator==(const CongruenceClass &amp;other) const {    auto v1=value_expr_;    auto v2=other.value_expr_;    if(v2==nullptr&amp;&amp;v1==nullptr)    return true;    else if(v1==nullptr||v2==nullptr)    return false;   if(members_==other.members_)    return true;    return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>即，算法收敛的判断依据是根据等价类成员不再改变，而不是根据valueexpr的值不再改变，这样就可以避开valueexpr无限递归的情况。</p><p>为了获取一个变量的valueexpr，将getVN定义如下：</p><p>其中如果ve的表达式为SingleExpression的类型时，是在valueexpr寻找参数对应的值表达式时建立的Expression。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">shared_ptr&lt;Expression&gt; GVN::getVN(const partitions &amp;pout, shared_ptr&lt;Expression&gt; ve) {  if(ve==nullptr)   return nullptr;       auto sve=std::dynamic_pointer_cast&lt;SingleExpression&gt;(ve);    if(sve!=nullptr)    {         auto num=dynamic_cast&lt;Constant*&gt;(sve-&gt;va());        if(num!=nullptr)        return ConstantExpression::create(num);    for(auto &amp;cc:pout)    {        if(cc-&gt;index_==0)        return nullptr;        for(auto &amp;mem:cc-&gt;members_)            if(mem==sve-&gt;va())                return cc-&gt;value_expr_ ;    }    for(auto &amp;cc:pout)    {        if(cc-&gt;index_==0)        return nullptr;        if(*ve==*cc-&gt;value_expr_)        return cc-&gt;value_expr_;    }    return nullptr;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="valueexpr"><a href="#valueexpr" class="headerlink" title="valueexpr"></a>valueexpr</h4><p>在Expression中新建若干子类，并完善对应的内部变量和创建，比较，打印等函数</p><ul><li><code>Single Expression</code>，存放非纯函数，load/store指令的value</li><li><code>Constant Expression</code>，常数</li><li><code>Binary Expression</code>，二元指令的操作数和类型</li><li><code>Phi Expression</code>，phi指令的操作数</li><li><code>Call Expression</code>，函数调用指令的函数类型和和函数参数，仅考虑纯函数</li><li><code>Gep Expression</code>，存gep指令的操作数</li><li><code>Cmp Expression</code>，类型为icmp的指令的指令类型（cmp_op)和操作数</li><li><code>Fcmp Expression</code>，类型为fcmp的指令的指令类型（cmp_op)和操作数</li><li><code>Trans Expression</code>，类型转换的指令类型和操作数</li></ul><p>根据指令类型的不同分别处理：</p><ul><li>phi指令：将在intersect中和transfer中处理，此处不会处理</li><li>void类型指令：此类指令不会被处理</li><li>call指令：若属于纯函数，找到参数的值表达式并建立<code>CallExpression</code>，否则新建一个<code>SingleExpression</code>类型的ve</li><li>gep指令：类似于纯函数，找到各个参数对应的值表达式并建立<code>GepExpression</code></li><li>cmp,fcmp,binary,fp2si,si2fp,zext指令：找到参数对应的值表达式，进行常量传播，并建立对应的expression：<code>CmpExpression,FcmpExpression,BinaryExpression,TransExpression</code></li><li>其他语句，新建<code>SingleExpression</code>作为值表达式</li></ul><h4 id="处理Phi"><a href="#处理Phi" class="headerlink" title="处理Phi"></a>处理Phi</h4><p>由于Phi指令要作为<code>Copy stmt</code>加入每个基本块的前驱中，为了方便，可以在每个基本块指令遍历完后，遍历并处理该基本块后继中出现的phi指令，将后继块中的phi指令加入该基本块的等价类中。</p><p>Phi指令为四元指令，指令操作数依次为[op,label;op,label],此处可以通过get_name()获取label和bb的名字进行比对，如果相同，则借助<code>transferFunction</code>在该块等价类中添加该条语句。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">auto succ=bb.get_succ_basic_blocks();if(succ.size()&gt;0)    for(auto s:succ)        for(auto &amp;sinst:s-&gt;get_instructions())            if(sinst.is_phi())            {                auto op0=sinst.get_operand(0);                //op1/2/3=...                if(op1-&gt;get_name()==bb.get_name())                    pouts=GVN::transferFunction(&amp;sinst,op0,pouts);                if(op3-&gt;get_name()==bb.get_name())                    pouts=GVN::transferFunction(&amp;sinst,op2,pouts);            }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了处理存在了两个前驱块的基本块的pin，需要设计Join和intersect函数。</p><p>其中，Top块设计为只含有一个等价类，且等价类的索引为0的集合;Join函数遇到Top块时，规定<code>Join(P, Top) = P = Join(Top, P)</code>，否则逐个遍历等价类并调用intersect函数。</p><p>而对于Intersect函数，对于其他非phi语句，若members_存在交集，则必然有该两个等价类的值表达式一致，进行合并即可，否则合并得到的Ck为空；对于将出现在下一个基本块的（在上文中添加）的phi语句，就会存在<code>members</code>不为空且valueexpr不相等的情况，此时在Ck中根据Phi新建valueexpr和valuePhi语句，即可完成对Phi语句的处理。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(auto i :Ci-&gt;members_)    if(Cj-&gt;members_.find(i)!=Cj-&gt;members_.end())    {        Ck-&gt;members_.insert(i);        if(Ck-&gt;leader_==nullptr)            Ck-&gt;leader_=i;    }if(Ci-&gt;value_expr_==Cj-&gt;value_expr_){    Ck-&gt;value_expr_=Ci-&gt;value_expr_;    Ck-&gt;value_phi_=Ci-&gt;value_phi_;    Ck-&gt;leader_=Ci-&gt;leader_;}else if(Ck-&gt;members_.size()!=0){    Ck-&gt;value_phi_=PhiExpression::create(Ci-&gt;value_expr_,Cj-&gt;value_expr_);    Ck-&gt;value_expr_=PhiExpression::create(Ci-&gt;value_expr_,Cj-&gt;value_expr_);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，在valuePhiFunc函数中需要识别phi函数之间存在的冗余，函数思路如下：</p><ul><li>只需要处理binary函数中的phi语句存在的冗余，并且该binary指令的lhs和rhs均为Phi类型，根据指令的值表达式即可进行上述类型判断，指令格式为bin(phi(vi1,vj1),phi(vi2,vj2))</li><li>根据vi1,vi2,vj1,vj2(此时均为值表达式)创建新的二元表达式：c1=bin(vi1,vi2),c2=bin(vj1,vj2)</li><li>在该基本块的前驱块中找到c1,c2对应的值表达式，借助getVN实现，如果未找到对应的值表达式，则递归查找该前驱块的valuePhiFunc</li><li>如果找到对应的值表达式，借助两个值表达式新建phi指令并返回，否则返回nullptr</li></ul><h4 id="transferFunction"><a href="#transferFunction" class="headerlink" title="transferFunction"></a>transferFunction</h4><p><code>transferFunction</code>函数的主要思路：</p><ul><li>在已有等价类中判断该指令是否已存在，如果存在则删除，如果该指令在对应的等价类中作为leader出现，将重新指定leader</li><li>找到e对应的值表达式（getVN），如果找到，将x添加到对应的等价类集合中，（处理后继块phi语句的情况下可能会执行该步骤），返回pout</li><li>如果e为常数类，因为上文中未找到对应的等价类，将新建等价类，value_expr_即为该常数对应的常数表达式，添加到pout中并返回</li><li>调用valueexpr和valuePhifunc函数，找到对应的ve和vpf，并遍历已有等价类，如果已有等价类中存在该ve或vpf，即可在等价类中添加该成员，否则以该条指令为leader新建等价类，返回pout</li></ul><h4 id="detectEquivalences"><a href="#detectEquivalences" class="headerlink" title="detectEquivalences"></a>detectEquivalences</h4><p>在上述框架的基础上，完善<code>detectequivalences</code>函数：</p><ul><li><p>不断深度优先遍历基本块，直到每个基本块的等价类集合不再改变</p></li><li><p>在label_entry位置处理函数参数，全局变量，对于这类参数直接新建等价类即可</p></li><li><p>对于每个基本块，如果包含多个前驱，调用join获取pin，否则直接将前驱块的等价类作为pin</p></li><li><p>遍历每条指令并调用transferFunction函数更改当前基本块等价类成员</p></li><li><p>访问当前基本块的后继基本块，处理phi函数</p><p>具体代码思路如下所示</p></li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(auto &amp;bb:func_-&gt;get_basic_blocks())    if(&amp;bb==entry) continue;    else pout_[&amp;bb]=clone(top);do     next_value_number_=1;    changed=false;    for (auto &amp;bb : func_-&gt;get_basic_blocks())         partitions pouts={};        if(&amp;bb!=entry)            if( bb.get_pre_basic_blocks().size()&gt;1)            //use join() to deal with            else  for(auto s:predecessors)                 pouts=clone(pout_[s]);        else             //deal with func args and global var        for(auto &amp;inst:bb.get_instructions())            if(!inst.is_void()&amp;&amp;!inst.is_phi())                pouts=GVN::transferFunction(&amp;inst,&amp;inst,pouts);        //deal with phi instr        if(pouts!=pout_[&amp;bb])            changed=true;          pout_[&amp;bb]=std::move(pouts);while (changed);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常量传播"><a href="#常量传播" class="headerlink" title="常量传播"></a>常量传播</h4><p>常量传播/常量折叠是为了在编译时进行计算程序中存在的常数，如二元计算，cmp，类型转换指令，以便提供更多可优化的表达式，提高运行效率。只需要在两个地方处理：valueexpr部分和valuephifunc部分。</p><p>valueexpr部分：对binary，cmp，trans语句均进行常量传播：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">//二元if(expr1-&gt;get_expr_type()==Expression::e_constant&amp;&amp;expr2-&gt;get_expr_type()==Expression:: e_constant){    auto e1=std::dynamic_pointer_cast&lt;ConstantExpression&gt;(expr1);    auto e2=std::dynamic_pointer_cast&lt;ConstantExpression&gt;(expr2);    auto expr=folder_-&gt;compute(instr,e1-&gt;get_c(),e2-&gt;get_c());    return ConstantExpression::create(expr);}//一元 if(ve-&gt;get_expr_type()==Expression::e_constant) {     auto e=std::dynamic_pointer_cast&lt;ConstantExpression&gt;(ve);     auto expr=folder_-&gt;compute(instr,e-&gt;get_c());     return ConstantExpression::create(expr); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在valuePhiFunc中，只需处理对binary指令的常量传播，为了方便计算，在ConstFolder类中添加对compute的重载（参数为Instruction::opID,Constant<em>,Constant\</em>)</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++"> auto e1=std::dynamic_pointer_cast&lt;ConstantExpression&gt;(vi1);auto e2=std::dynamic_pointer_cast&lt;ConstantExpression&gt;(vi2);auto e=folder_-&gt;compute(opid,e1-&gt;get_c(),e2-&gt;get_c());c1=ConstantExpression::create(e);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>以<code>bin.cminus</code>为例，未开启代码优化时，生成的LLVM 代码如下：</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">define i32 @main() {label_entry:  %op0 = call i32 @input()  %op1 = call i32 @input()  %op2 = icmp sgt i32 %op0, %op1  %op3 = zext i1 %op2 to i32  %op4 = icmp ne i32 %op3, 0  br i1 %op4, label %label5, label %label14label5:                                                ; preds = %label_entry  %op6 = add i32 33, 33  %op7 = add i32 44, 44  %op8 = add i32 %op6, %op7  br label %label9label9:                                                ; preds = %label5, %label14  %op10 = phi i32 [ %op8, %label5 ], [ %op17, %label14 ]  %op11 = phi i32 [ %op7, %label5 ], [ %op16, %label14 ]  %op12 = phi i32 [ %op6, %label5 ], [ %op15, %label14 ]  call void @output(i32 %op10)  %op13 = add i32 %op12, %op11  call void @output(i32 %op13)  ret i32 0label14:                                                ; preds = %label_entry  %op15 = add i32 55, 55  %op16 = add i32 66, 66  %op17 = add i32 %op15, %op16  br label %label9}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启代码优化后，最终生成的代码；</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">define i32 @main() {label_entry:  %op0 = call i32 @input()  %op1 = call i32 @input()  %op2 = icmp sgt i32 %op0, %op1  %op3 = zext i1 %op2 to i32  %op4 = icmp ne i32 %op3, 0  br i1 %op4, label %label5, label %label14label5:                                                ; preds = %label_entry  %op6 = add i32 33, 33  %op7 = add i32 44, 44  %op8 = add i32 %op6, %op7  br label %label9label9:                                                ; preds = %label5, %label14  %op10 = phi i32 [ %op8, %label5 ], [ %op17, %label14 ]  call void @output(i32 %op10)  call void @output(i32 %op10)  ret i32 0label14:                                                ; preds = %label_entry  %op15 = add i32 55, 55  %op16 = add i32 66, 66  %op17 = add i32 %op15, %op16  br label %label9}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>op13</code>和<code>op10</code>等价，经过死代码删除，将删除计算op13与op11，op12的语句。</p><p>上述例子各个基本块的等价类如下所示：</p><pre class="line-numbers language-josn" data-language="josn"><code class="language-josn">"label_entry": [["%op0", ], ["%op1", ], ["%op2", ], ["%op3", ], ["%op4", ], ],"label5": [["%op0", ], ["%op1", ], ["%op2", ], ["%op3", ], ["%op4", ], ["%op6", "%op12", ], ["%op7", "%op11", ], ["%op8", "%op10", ],  ],"label9": [["%op0", ], ["%op1", ], ["%op2", ], ["%op3", ], ["%op4", ], , ["%op13", "%op10", ], ["%op11", ], ["%op12", ], ],"label14": [["%op0", ], ["%op1", ], ["%op2", ], ["%op3", ], ["%op4", ], ["%op15", "%op12", ], ["%op16", "%op11", ], ["%op17", "%op10", ],, ],}},]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h3><p>1.请简要分析你的算法复杂度</p><p>仅对程序的主要部分以指令为单位进行讨论，实验完成部分的代码由<code>run()</code>函数逐个分析每个函数，并进入<code>detectEquivalences()</code>函数，在<code>detectEquivalences()</code>函数中，对函数中的基本块不断进行遍历分析得到每个基本块的<code>pin</code>和<code>pout</code>等价类，直到<code>pout</code>收敛，代表该函数分析完成，一般来说，遍历的次数为一个较小的数（通常小于10），视为常数；而对于每个基本块，要依次遍历基本块中的指令，在<code>transferfunction</code>中完成对每个指令的分析，同时在等价类中遍历寻找值表达式或对应的值。</p><p>综上分析，对于一个程序，本实验算法的时间复杂度大约为$T(n)=O(n^2)$,其中n为指令条数</p><p>2.<code>std::shared_ptr</code>如果存在环形引用，则无法正确释放内存，你的 Expression 类是否存在 circular reference?</p><p>不存在。<code>Expression</code>的各个子类是递归定义的，其子类以及的构成方法如下：</p><ul><li><code>Single Expression</code>，由一个<code>Value *</code>组成，用来处理特殊指令，如非纯函数，<code>load</code>,<code>store</code>指令等</li><li><code>Constant Expression</code>，由一个<code>Constant *</code>组成</li><li><code>Binary Expression</code>，由两个<code>Expression</code>和指令类型组成</li><li><code>Phi Expression</code>，由两个<code>Expression</code>组成</li><li><code>Call Expression</code>，由几个<code>Expression</code>和<code>Function*</code>组成</li><li><code>Gep Expression</code>，由几个<code>Expression</code>组成</li><li><code>Cmp Expression</code>，由两个<code>Expression</code>和指令类型组成</li><li><code>Fcmp Expression</code>，由两个<code>Expression</code>和指令类型组成</li><li><code>Trans Expression</code>，由一个<code>Expression</code>和指令类型组成</li></ul><p>所有递归定义的Expression最终都会归结到<code>Single Expression</code>以及<code>Constant Expression</code>指令上，不会出现环形引用</p><p>3.尽管本次实验已经写了很多代码，但是在算法上和工程上仍然可以对 GVN 进行改进，请简述你的 GVN 实现可以改进的地方</p><ul><li>本次实验<code>ValuePhiFunc</code>对Phi指令冗余的检测仅仅检测了<code>Binaray</code>指令的冗余情况，实际上可以扩大检测范围，并且增加检测冗余的形式，如检测<code>phi(0, c+d)</code>与 <code>phi(0,c)+phi(0,d)</code>，实现思路类似。</li><li>效率较低，对于规模较大的代码，GVN分析的效率会变慢，可以通过减少代码中不必要的遍历操作提高算法效率。</li></ul><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h2><ul><li>本次实验基于论文《Detection of Redundant Expressions: A Complete and Polynomial-Time Algorithm in SSA 》基于数据流分析完成了SSA IR的GVN优化，通过动手实现和设计具体的算法，让我对数据流分析有了更清楚地认识</li><li>本次实验作为代码优化部分与前几次实验共同完成了Cminus的Compiler，对《编译原理与技术》一课的课程内容有了更清晰的整体认识。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;思考题&quot;&gt;&lt;a href=&quot;#思考题&quot; class=&quot;headerlink&quot; title=&quot;思考题&quot;&gt;&lt;/a&gt;思考题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;请简述概念：支配性、严格支配性、直接支配性、支配边界。&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;支配性&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="编译原理" scheme="http://sn1987a-1.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>编译原理-词法分析</title>
    <link href="http://sn1987a-1.github.io/posts/8254dc99.html"/>
    <id>http://sn1987a-1.github.io/posts/8254dc99.html</id>
    <published>2022-09-25T12:48:34.000Z</published>
    <updated>2023-09-24T05:22:47.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h2><h2 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h2><ul><li>完成基于flex的C-minus词法分析器</li><li>完成基于bison的C-minus语法分析器</li></ul><h2 id="实验难点"><a href="#实验难点" class="headerlink" title="实验难点"></a>实验难点</h2><ul><li>根据C-minus的词法使用正则表达式完成词法分析器</li><li>理解flex和bison的用法以及掌握flex，bison联动构建语法分析器的方法</li><li>正确构建C-minus的语法树</li></ul><h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><ol><li>正则匹配</li></ol><p>正确匹配C-minus的所有token，以及注释，空格，换行等特殊字符，利用flex与token的名字关联起来（作为返回值），例如:<code>"if" {pos_start = pos_end-1; pos_end ++; pass_node(yytext); return IF;}</code>,同时维护<code>pos_start</code>,<code>pos_end</code>，<code>lines</code>的值，表达式的顺序代表了匹配的优先级：</p><ul><li>注释 <code>\/\*(?:[^\*]|\*+[^\/\*])*\*+\/</code></li><li>空格，制表符 <code>" "|\t</code></li><li>换行<code>\n</code></li><li>浮点数<code>[0-9]+\.[0-9]*|[0-9]*\.[0-9]+</code></li><li>整形<code>[0-9]+</code></li><li>变量名 <code>[a-zA-Z_]*</code></li><li>其他token <code>"if" "else" "while" "return""void" "int" "float" "+" "-" "*" "/" "{" "}" "(" ")" "[" "]" "&gt;=" "&gt;" "==" "&lt;=" "&lt;" "!=" "=""," ";"</code></li></ul><ol><li>token，type的数据类型</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token operator">%</span><span class="token keyword">union</span> <span class="token punctuation">{</span>    <span class="token keyword">struct</span> <span class="token class-name">_syntax_tree_node</span> <span class="token operator">*</span>node<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">%</span>token <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> ERROR ADD SUB IF ELSE WHILE RETURN INT <span class="token operator">%</span>token <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span>FLOAT VOID GE G E L LE NE MUX DIV DOT SEM<span class="token operator">%</span>token <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span>LEFT1 LEFT2 LEFT3 RIGHT1 RIGHT2 RIGHT3 ASS<span class="token operator">%</span>token <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> INTEGER ID FLOATPOINT<span class="token operator">%</span>type <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> program<span class="token operator">%</span>type <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> type<span class="token operator">-</span>specifier relop addop mulop<span class="token operator">%</span>type <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> declaration<span class="token operator">-</span>list declaration var<span class="token operator">-</span>declaration fun<span class="token operator">-</span>declaration<span class="token operator">%</span>type <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> local<span class="token operator">-</span>declarations compound<span class="token operator">-</span>stmt statement<span class="token operator">-</span>list statement expression<span class="token operator">-</span>stmt<span class="token operator">%</span>type <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> iteration<span class="token operator">-</span>stmt selection<span class="token operator">-</span>stmt <span class="token keyword">return</span><span class="token operator">-</span>stmt expression simple<span class="token operator">-</span>expression<span class="token operator">%</span>type <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> var additive<span class="token operator">-</span>expression term factor integer <span class="token keyword">float</span> call<span class="token operator">%</span>type <span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> params param<span class="token operator">-</span>list param args arg<span class="token operator">-</span>list <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>构建语法树</li></ol><p>利用bison根据C-minus的语法构建语法树，其中每个type都是语法树的非叶子节点，token都是语法树的叶子节点。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">declaration<span class="token operator">-</span>list<span class="token operator">:</span> declaration<span class="token operator">-</span>list declaration <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token string">"declaration-list"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span> declaration <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token string">"declaration-list"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>param<span class="token operator">-</span>list<span class="token operator">:</span> param<span class="token operator">-</span>list DOT param <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token string">"param-list"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">2</span><span class="token punctuation">,</span>$<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token operator">|</span>param <span class="token punctuation">{</span>$$<span class="token operator">=</span><span class="token function">node</span><span class="token punctuation">(</span><span class="token string">"param-list"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>$<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实验结果验证"><a href="#实验结果验证" class="headerlink" title="实验结果验证"></a>实验结果验证</h2><ol><li>test测试样例</li></ol><p>略</p><ol><li>自行设计的样例</li></ol><ul><li>跨行注释和空行：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* This my testcase */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>输出：不在parser和lexer的分析中出现</p><ul><li>数组定义</li></ul><p><code>int y[2]</code><br>输出<br>| | | | | &gt;—+ var-declaration<br>| | | | | | &gt;—+ type-specifier<br>| | | | | | | &gt;—<em> int<br>| | | | | | &gt;—</em> y<br>| | | | | | &gt;—<em> [<br>| | | | | | &gt;—</em> 2<br>| | | | | | &gt;—<em> ]<br>| | | | | | &gt;—</em> ;</p><ul><li>循环</li></ul><pre class="line-numbers language-none"><code class="language-none">while (0) {y=0;}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出<br>| &gt;—<em> while<br>| &gt;—</em> (<br>| &gt;—+ expression<br>| | &gt;—+ simple-expression<br>| | | &gt;—+ additive-expression<br>| | | | &gt;—+ term<br>| | | | | &gt;—+ factor<br>| | | | | | &gt;—+ integer<br>| | | | | | | &gt;—<em> 0<br>| &gt;—</em> )<br>| &gt;—+ statement<br>| | &gt;—+ compound-stmt<br>| | | &gt;—<em> {<br>| | | &gt;—+ local-declarations<br>| | | | &gt;—</em> epsilon<br>| | | &gt;—+ statement-list<br>| | | | &gt;—+ statement-list<br>| | | | | &gt;—<em> epsilon<br>| | | | &gt;—+ statement<br>| | | | | &gt;—+ expression-stmt<br>| | | | | | &gt;—+ expression<br>| | | | | | | &gt;—+ var<br>| | | | | | | | &gt;—</em> y<br>| | | | | | | &gt;—<em> =<br>| | | | | | | &gt;—+ expression<br>| | | | | | | | &gt;—+ simple-expression<br>| | | | | | | | | &gt;—+ additive-expression<br>| | | | | | | | | | &gt;—+ term<br>| | | | | | | | | | | &gt;—+ factor<br>| | | | | | | | | | | | &gt;—+ integer<br>| | | | | | | | | | | | | &gt;—</em> 0<br>| | | | | | &gt;—<em> ;<br>| | | &gt;—</em> }</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;词法分析&quot;&gt;&lt;a href=&quot;#词法分析&quot; class=&quot;headerlink&quot; title=&quot;词法分析&quot;&gt;&lt;/a&gt;词法分析&lt;/h2&gt;&lt;h2 id=&quot;实验要求&quot;&gt;&lt;a href=&quot;#实验要求&quot; class=&quot;headerlink&quot; title=&quot;实验要求&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="编译原理" scheme="http://sn1987a-1.github.io/categories/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
  </entry>
  
</feed>
