<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SN1987A</title>
  
  <subtitle>LAYのBLOG</subtitle>
  <link href="http://sn1987a-1.github.io/atom.xml" rel="self"/>
  
  <link href="http://sn1987a-1.github.io/"/>
  <updated>2022-02-06T03:59:16.429Z</updated>
  <id>http://sn1987a-1.github.io/</id>
  
  <author>
    <name>SN1987A</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WSL2美化</title>
    <link href="http://sn1987a-1.github.io/posts/15684.html"/>
    <id>http://sn1987a-1.github.io/posts/15684.html</id>
    <published>2022-01-21T14:12:20.000Z</published>
    <updated>2022-02-06T03:59:16.429Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=" "></a> </h1><h1 id="WSL2美化"><a href="#WSL2美化" class="headerlink" title="WSL2美化"></a>WSL2美化</h1><p>本文简要记录基于Windows11对WSL的终端进行美化的主要步骤。</p><p>环境：Ubuntu 20.04，Windows Terminal(WT)</p><p>主要工具和插件：zsh，oh my zsh, povwerlevel10k(powerlevel9k也可以),autozsh-autosuggestions , zsh-syntax-highlig</p><p>下图是我的美化结果。</p><p><img src="https://user-images.githubusercontent.com/74918703/152648068-cc3de98c-40c3-401e-983b-a32860435f16.png" alt="image-20220122222259548"></p><h2 id="对Windows-terminal的外观进行美化"><a href="#对Windows-terminal的外观进行美化" class="headerlink" title="对Windows terminal的外观进行美化"></a>对Windows terminal的外观进行美化</h2><p>在微软应用商店搜索Windows terminal即可下载最新版本，如果不想用Windows Terminal，也可以下载另外一个跨平台终端——Tabby Terminal，<a href="[Tabby - a terminal for a more modern age](https://tabby.sh/">点击下载</a>)，配置方案也类似，但亲测效果不如WT。</p><h3 id="修改默认配置"><a href="#修改默认配置" class="headerlink" title="修改默认配置"></a>修改默认配置</h3><p>打开Windows Terminal，点击上方栏中“v”按钮，选择侧边栏中的“setting.json”文件并打开，后文中对WT的配置均对该文件进行修改（可以用VScode打开）。</p><p>例如，若要规定默认打开的界面是WSL2/WSL的界面，即可在actions一栏进行修改：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"defaultProfile"</span><span class="token operator">:</span> <span class="token string">"{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}"</span><span class="token punctuation">,</span><span class="token comment">//括号内对应的序列可在setting.json文件里查找到Ubuntu对应的GUID</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改配色方案"><a href="#修改配色方案" class="headerlink" title="修改配色方案"></a>修改配色方案</h3><p>在setting.json最后部分有schemes一栏，代表WT的配色方案，每个配色方案的name项即为名称，系统默认提供了一部分配色方案以及名称，但都不是很好看，将自定义配色添加到schemes底下即可新增配色方案，<a href="[Windows Terminal Themes](https://windowsterminalthemes.dev/">自定义配色网站</a>)提供了较多推荐的配色，可以直接复制。</p><p>以下为我选择的配色：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"ChallengerDeep"</span><span class="token punctuation">,</span>      <span class="token string">"black"</span><span class="token operator">:</span> <span class="token string">"#141228"</span><span class="token punctuation">,</span>      <span class="token string">"red"</span><span class="token operator">:</span> <span class="token string">"#ff5458"</span><span class="token punctuation">,</span>      <span class="token string">"green"</span><span class="token operator">:</span> <span class="token string">"#62d196"</span><span class="token punctuation">,</span>      <span class="token string">"yellow"</span><span class="token operator">:</span> <span class="token string">"#ffb378"</span><span class="token punctuation">,</span>      <span class="token string">"blue"</span><span class="token operator">:</span> <span class="token string">"#65b2ff"</span><span class="token punctuation">,</span>      <span class="token string">"purple"</span><span class="token operator">:</span> <span class="token string">"#906cff"</span><span class="token punctuation">,</span>      <span class="token string">"cyan"</span><span class="token operator">:</span> <span class="token string">"#63f2f1"</span><span class="token punctuation">,</span>      <span class="token string">"white"</span><span class="token operator">:</span> <span class="token string">"#a6b3cc"</span><span class="token punctuation">,</span>      <span class="token string">"brightBlack"</span><span class="token operator">:</span> <span class="token string">"#565575"</span><span class="token punctuation">,</span>      <span class="token string">"brightRed"</span><span class="token operator">:</span> <span class="token string">"#ff8080"</span><span class="token punctuation">,</span>      <span class="token string">"brightGreen"</span><span class="token operator">:</span> <span class="token string">"#95ffa4"</span><span class="token punctuation">,</span>      <span class="token string">"brightYellow"</span><span class="token operator">:</span> <span class="token string">"#ffe9aa"</span><span class="token punctuation">,</span>      <span class="token string">"brightBlue"</span><span class="token operator">:</span> <span class="token string">"#91ddff"</span><span class="token punctuation">,</span>      <span class="token string">"brightPurple"</span><span class="token operator">:</span> <span class="token string">"#c991e1"</span><span class="token punctuation">,</span>      <span class="token string">"brightCyan"</span><span class="token operator">:</span> <span class="token string">"#aaffe4"</span><span class="token punctuation">,</span>      <span class="token string">"brightWhite"</span><span class="token operator">:</span> <span class="token string">"#cbe3e7"</span><span class="token punctuation">,</span>      <span class="token string">"background"</span><span class="token operator">:</span> <span class="token string">"#1e1c31"</span><span class="token punctuation">,</span>      <span class="token string">"foreground"</span><span class="token operator">:</span> <span class="token string">"#cbe1e7"</span><span class="token punctuation">,</span>      <span class="token string">"selectionBackground"</span><span class="token operator">:</span> <span class="token string">"#cbe1e7"</span><span class="token punctuation">,</span>      <span class="token string">"cursorColor"</span><span class="token operator">:</span> <span class="token string">"#fbfcfc"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加完配色方案后，还应该对profiles部分进行修改，以便于使用最新配色方案。如果只需要对虚拟机部分添加如下文本，可以只修改name为“Ubuntu-xx.xx”的部分（当然其他部分也只是复制粘贴）。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"colorScheme"</span><span class="token operator">:</span> <span class="token string">"ChallengerDeep"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改字体"><a href="#修改字体" class="headerlink" title="修改字体"></a>修改字体</h3><p>Windows原装字体不支持很多符号的显示，这里推荐修改默认字体</p><p>比较简单的，可以在微软官方<a href="[Windows ターミナル Cascadia Code | Microsoft Docs](https://docs.microsoft.com/ja-jp/windows/terminal/cascadia-code">下载</a>)Cascadia Code PL字体，或者是下载文件后右键单击该字体对应的.otf/.ttf文件并选择安装。</p><p>当然有功能更加强大，应用更加广泛的字体Nerd Fond(Hack Nerd Fond)，包含了更多字符库，<a href="[ryanoasis/nerd-fonts: Iconic font aggregator, collection, &amp; patcher. 3,600+ icons, 50+ patched fonts: Hack, Source Code Pro, more. Glyph collections: Font Awesome, Material Design Icons, Octicons, &amp; more (github.com">点击下载</a>]( <a href="https://github.com/ryanoasis/nerd-fonts">https://github.com/ryanoasis/nerd-fonts</a> ))。</p><p>安装完成后，同样在profiles目录的Ubuntu-xx.xx里修改：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"fontFace"</span><span class="token operator">:</span> <span class="token string">"Hack Nerd Fond"</span><span class="token string">"fontSize"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="设置背景和透明效果"><a href="#设置背景和透明效果" class="headerlink" title="设置背景和透明效果"></a>设置背景和透明效果</h3><p>均是在perfiles目录内</p><p>添加背景图：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"backgroundImage"</span><span class="token operator">:</span> <span class="token string">"E:\\wallpaper\\wp3.jpg"</span><span class="token punctuation">,</span><span class="token comment">//背景的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加透明效果（0~1，越小表示越透明）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"acrylicOpacity"</span><span class="token operator">:</span> <span class="token number">0.8</span><span class="token punctuation">,</span><span class="token string">"useAcrylic"</span><span class="token operator">:</span> true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>指定启动时的默认路径：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token string">"startingDirectory"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这样Windows Terminal基本就配置好了。</p><h2 id="美化WSL2"><a href="#美化WSL2" class="headerlink" title="美化WSL2"></a>美化WSL2</h2><p>步骤：</p><ul><li>将原有的shell替换为zsh</li><li>安装oh my zsh</li><li>关键字高亮以及自动填充插件</li><li>安装powerlevel10k</li></ul><p>安装完自动填充以及高亮插件后对文件zshrc进行的主要添加为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">source <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>zsh<span class="token operator">-</span>autosuggestions<span class="token operator">/</span>zsh<span class="token operator">-</span>autosuggestions<span class="token punctuation">.</span>zshsource <span class="token operator">/</span>usr<span class="token operator">/</span>share<span class="token operator">/</span>zsh<span class="token operator">-</span>syntax<span class="token operator">-</span>highlighting<span class="token operator">/</span>zsh<span class="token operator">-</span>syntax<span class="token operator">-</span>highlighting<span class="token punctuation">.</span>zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里主要从安装powerlevel10k开始记录。</p><p>在命令行输入：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">sudo vim <span class="token operator">~</span><span class="token operator">/</span><span class="token punctuation">.</span>zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开配置文件后，找到THEME一行，修改为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ZSH_THEME<span class="token operator">=</span><span class="token string">"powerlevel10k/powerlevel10k"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后重启或输入命令</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">p10k configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后填写弹出的问卷即可自定义并保存当前配置文件。如果需要使用其他路径的文件，可以使用source命令进行导入。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot; &quot;&gt;&lt;/a&gt; &lt;/h1&gt;&lt;h1 id=&quot;WSL2美化&quot;&gt;&lt;a href=&quot;#WSL2美化&quot; class=&quot;headerlink&quot; title=&quot;WSL2美化&quot;&gt;&lt;/a&gt;WSL2美化&lt;</summary>
      
    
    
    
    <category term="WSL2" scheme="http://sn1987a-1.github.io/categories/WSL2/"/>
    
    
    <category term="美化" scheme="http://sn1987a-1.github.io/tags/%E7%BE%8E%E5%8C%96/"/>
    
    <category term="Unix" scheme="http://sn1987a-1.github.io/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实验设计2_HUFFMAM Tree</title>
    <link href="http://sn1987a-1.github.io/posts/1120.html"/>
    <id>http://sn1987a-1.github.io/posts/1120.html</id>
    <published>2021-11-11T11:46:11.000Z</published>
    <updated>2022-01-28T14:22:14.921Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Huffman-编码解压缩"><a href="#Huffman-编码解压缩" class="headerlink" title="Huffman 编码解压缩"></a>Huffman 编码解压缩</h1><p>关于Huffman编码的知识,在上个学期数据结构已经学过,作为较为复杂的一次实验耗费了不少时间,可说实话,上个学期在数据结构投入的经历确实不算大,最终的成绩也相当不理想,但这个学期还得重新学数据结构(信计数据结构不能互认就离谱orz),同样类型的实验,不同的心境 ,不同的要求,只求要一个好一点点的分数啦</p><h2 id="大致实验要求"><a href="#大致实验要求" class="headerlink" title="大致实验要求"></a>大致实验要求</h2><p>基于Huffman编码来实现压缩器和编码器,使其可以对任意文件进行解压缩操作.</p><p>实现方法:命令行执行/GUI界面(还不会…)/运行程序交互界面</p><p>本实验的测试数据:文件包括:.txt    .png    .wav    .mp4    .zip</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Huffman-编码解压缩&quot;&gt;&lt;a href=&quot;#Huffman-编码解压缩&quot; class=&quot;headerlink&quot; title=&quot;Huffman 编码解压缩&quot;&gt;&lt;/a&gt;Huffman 编码解压缩&lt;/h1&gt;&lt;p&gt;关于Huffman编码的知识,在上个学期数据结构已经</summary>
      
    
    
    
    <category term="数据结构" scheme="http://sn1987a-1.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    <category term="数据结构" scheme="http://sn1987a-1.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>模拟与数字电路期中复习</title>
    <link href="http://sn1987a-1.github.io/posts/15234.html"/>
    <id>http://sn1987a-1.github.io/posts/15234.html</id>
    <published>2021-11-05T15:42:30.000Z</published>
    <updated>2022-01-28T14:24:00.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模拟与数字电路"><a href="#模拟与数字电路" class="headerlink" title="模拟与数字电路"></a>模拟与数字电路</h1><p>[TOC]</p><h2 id="2022-1-15-模拟与数字电路期末考试"><a href="#2022-1-15-模拟与数字电路期末考试" class="headerlink" title="2022.1.15 模拟与数字电路期末考试"></a>2022.1.15 模拟与数字电路期末考试</h2><p>2021.11.11期中考试主要内容：</p><ol><li><p>数字逻辑概论:</p><ol><li>数值转换</li><li>二进制数的算术运算</li></ol></li><li><p>逻辑代数&amp;HDL基础</p><ol><li>反演规则</li><li>对偶规则</li><li>最大项/最小项</li><li>表达式化简<ol><li>直接化简</li><li>卡诺图</li></ol></li><li>逻辑函数表示方法之间的转换<ol><li>真值表</li><li>表达式</li><li>逻辑图</li><li>波形图</li></ol></li></ol></li><li><p>逻辑门电路</p></li><li><p>组合逻辑电路/PLD✨</p></li><li><p>锁存器和触发器✨</p></li><li><p>时序逻辑电路（仅包含同步时序电路）✨</p><p>信号——数字部分；周期性；占空比：高电平占周期的百分比</p></li></ol><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><h3 id="进制：Binary-Octal-Hexadecimal（0x）"><a href="#进制：Binary-Octal-Hexadecimal（0x）" class="headerlink" title="进制：Binary    Octal    Hexadecimal（0x）"></a>进制：Binary    Octal    Hexadecimal（0x）</h3><p>二进制转换：“误差不大于$2^{-n}$” &lt;=&gt; “精确到小数点第n位”</p><p>第n位“四舍五入”即可</p><p>二进制的算术运算：补码=原码取反+1；补码表示范围$-2^{n-1}~2^{n-1}-1$</p><p>补码转原码：从右往左找到第一个‘1’，将这个1之前的取反，该数字和之后的保持原值即可。<br>$$<br>(X+Y)_补=(X)_补+(Y)_补<br>$$</p><p>$$<br>(X-Y)_补=(X)_补-\overline{(Y)_补}+1<br>$$</p><p>溢出：运算结果超出补码的表示范围</p><p>​        出现场合：同号相加，异号相减———&gt;判断结果是否正确（是否溢出）：判断计算过程中符号位和次高位的进位情况，当且仅当符号位有进位且次高位无进位时计算结果溢出。</p><p>溢出解决方案—符号拓展：通过利用两个或多个符号位，初始统一置0或1，最终结果看第一位的状态。</p><h3 id="BCD码（无特殊说明BCD码均指8421码）"><a href="#BCD码（无特殊说明BCD码均指8421码）" class="headerlink" title="BCD码（无特殊说明BCD码均指8421码）"></a><strong>BCD码</strong>（无特殊说明BCD码均指8421码）</h3><p>有权码：8421码，5421码，2421码（数字代表各位的权重）</p><p>无权码：余3码，余3循环码</p><p>余3循环码：（0~9）</p><table><thead><tr><th>数值</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>余3循环码</td><td>0010</td><td>0110</td><td>0111</td><td>0101</td><td>0100</td><td>1100</td><td>1101</td><td>1111</td><td>1110</td><td>1010</td></tr></tbody></table><h3 id="格雷码"><a href="#格雷码" class="headerlink" title="格雷码"></a>格雷码</h3><p>编码顺序依次变化时，相邻代码有且仅有一位不同，最大和最小之间也差一位，也称循环码（余3循环码也满足该条件）（0~15）</p><p>格雷码——&gt;二进制码转化：从最高位到最低位依次相加</p><table><thead><tr><th>数值</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>A</th><th>B</th><th>C</th><th>D</th><th>E</th><th>F</th></tr></thead><tbody><tr><td>格雷码</td><td>0000</td><td>0001</td><td>0011</td><td>0010</td><td>0110</td><td>0111</td><td>0101</td><td>0100</td><td>1100</td><td>1101</td><td>1111</td><td>1110</td><td>1010</td><td>1011</td><td>1001</td><td>1000</td></tr><tr><td>二进制码</td><td>0000</td><td>0001</td><td>0010</td><td>0011</td><td>0100</td><td>0101</td><td>0110</td><td>0111</td><td>1000</td><td>1001</td><td>1010</td><td>1011</td><td>1100</td><td>1101</td><td>1110</td><td>1111</td></tr></tbody></table><h3 id="进制转换："><a href="#进制转换：" class="headerlink" title="进制转换："></a>进制转换：</h3><ol><li>任意进制-&gt;十进制：按位权展开后相加<br>$$<br>(N)<em>R=\sum</em>{i=-m}^{n-1}k_i*R^i<br>$$</li></ol><p>​        2.十进制-&gt;任意进制：</p><p>​                整数部分：辗转除基取余，先得较低有效位</p><p>​                小数部分：辗转乘积取整，先得最高有效位</p><h2 id="逻辑代数"><a href="#逻辑代数" class="headerlink" title="逻辑代数"></a>逻辑代数</h2><h3 id="基本定律："><a href="#基本定律：" class="headerlink" title="基本定律："></a>基本定律：</h3><ul><li>交换律    A* B=B *A;    A+B=B+A;</li><li>结合律    A(BC)=(AB)C;     A+(B+C)=(A+B)+C;</li><li>分配律    A(B+C)=AB+AC;     A+BC=(A+B)(A+C);</li><li>吸收律    A+A* B=A;     A*(A+B)=A;</li><li>反演律    $\overline{A+B}=\overline {A}*\overline {B}$ ;      $\overline{AB}=\overline{A}+\overline{B};$</li></ul><p>代入规则:在任一逻辑恒等式中,若以一个逻辑表达式代替恒等式两边所有出现的某一变量,则所得表达式依然成立.利用该结论可以把上述定律推广到n元的情况,即反演律可以写成:<br>$$<br>\overline{A_1<em>A_2</em>…*A_n}=\overline{A_1}+\overline{A_2}+…+\overline{A_n}<br>$$</p><p>$$<br>\overline{A_1+A_2+…+A_n}=\overline{A_1}<em>\overline{A_2}</em>…*\overline{A_n}<br>$$</p><h3 id="反演和对偶"><a href="#反演和对偶" class="headerlink" title="反演和对偶"></a>反演和对偶</h3><p>反演规则:对于任意表达式Y,将所有表达式中的’*’和’+’互换,将所有的’0’与’1’互换,把逻辑变量取反.</p><p>对偶规则:对于任意表达式Y,将所有表达式中的’*’和’+’互换,但不改变所有的’0’与’1’互换和逻辑变量.</p><p>利用对偶规则可以对上述基本定律进行拓展.</p><h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><p>对于一个逻辑函数,有多个逻辑表达式:(下以/AB+A/C为例)</p><ul><li>与或式—–$\overline {AB}+A\overline C;$</li><li>或与式——$(A+\overline B)*(\overline A+C)$</li><li>与非-与非式——$\overline {\overline{\overline AB}\ \ \overline {A\overline C}}$———最简与或式求两次反</li><li>或非-或非式——$\overline {(\overline A+B)+(\overline A+\overline C)}$——最简或与式求两次反</li><li>与或非式——$\overline {\overline A\ \overline B+AC}$———-先求/Y的最简与或式,然后求反</li></ul><h3 id="最小项与最大项"><a href="#最小项与最大项" class="headerlink" title="最小项与最大项"></a>最小项与最大项</h3><p><strong>最小项</strong>:包含全部输入变量的乘积项,每个变量均以自身变量或反变量出现一次.对于n变量逻辑函数,共有2^n个最小项,记为mi,其中i为最小项的编号[1].</p><p>[1]编号:编号方法:原变量和反变量分别带表1和0,带入逻辑表达式得到的二进制数对应的十进制数记为编号i.</p><p>对于任意一个最小项,有且仅有一组变量使得mi=1成立,且对于不同的i,对应不同的变量;</p><p>全体最小项的并恒等于1;</p><p>任意两个最小项的交恒等于0;</p><p><strong>最大项</strong>:包含全部输入变量的或项,每个变量均以自身变量或反变量出现一次.对于n变量逻辑函数,共有2^n个最大项,记为Mi,其中i为最大项的编号[2].</p><p>[2]编号:编号方法:原变量和反变量分别带表1和0,带入逻辑表达式得到的二进制数取反对应的十进制数记为编号i.</p><p>性质可以和最小项类似</p><p>最大项和最小项的关系:<br>$$<br>\overline{M_i}=m_i;   M_i=\overline{m_i}<br>$$</p><h3 id="卡诺图"><a href="#卡诺图" class="headerlink" title="卡诺图"></a>卡诺图</h3><p>卡诺图通常用在逻辑变量在5以内的情况.</p><p>卡诺图物理上相邻的逻辑变量在逻辑上相邻(上下相邻,左右相邻,,循环相邻,对角不相邻)—–循环码</p><p>无关项x:不允许或不可能出现的最小项/对应的函数值是任意值.</p><p><strong><strong><em>卡诺图化简逻辑表达式</em></strong></strong></p><p><strong>规范作图：</strong></p><ul><li><strong>00 01 11 10顺序</strong></li><li><strong>注明各个逻辑变量名称</strong></li><li><strong>画圈标记—写对应表达式</strong> </li><li><strong>最简或与式—-圈0取反</strong></li><li><strong>圈0取反后不一定是原问题的最简与或式.</strong>(?)</li></ul><h2 id="逻辑门电路"><a href="#逻辑门电路" class="headerlink" title="逻辑门电路"></a>逻辑门电路</h2><p>PMOS:高电平不导通,低电平导通.不能接地</p><p>NMOS:高电平导通,低电平不导通,不能接高电平</p><p>非门:2个CMOS;与非门/或非门:4个CMOS;与门/或门:6个COMS</p><h2 id="组合逻辑电路"><a href="#组合逻辑电路" class="headerlink" title="组合逻辑电路"></a>组合逻辑电路</h2><p>定义:对于一个逻辑电路,在任何一个时刻的输出状态只与输入状态有关,与电路自身状态无关.</p><p>电路功能分析思路:</p><ol><li>根据输入输出写出各级逻辑表达式,直到输入和输出信号的逻辑表达式;</li><li>将各个逻辑表达式化简和变换得到最简表达式;</li><li>根据表达式列出真值表;</li><li>根据真值表和最简逻辑表达式对组合逻辑电路进行分析,最后确定其功能.</li></ol><p>组合逻辑电路设计过程</p><ol><li>明确实际问题的逻辑功能,确定输入输出和表示符号;</li><li>根据对电路逻辑功能的要求写出真值表;</li><li>利用真值表得出逻辑表达式并进程化简变换;(卡诺图)</li><li>利用得到的逻辑表达式画出电路图.</li></ol><p>画波形图要点:    画出原题的波形,画出时钟信号的边缘的虚线…</p><h3 id="典型组合逻辑电路"><a href="#典型组合逻辑电路" class="headerlink" title="典型组合逻辑电路"></a>典型组合逻辑电路</h3><h4 id="编码器"><a href="#编码器" class="headerlink" title="编码器"></a><strong>编码器</strong></h4><p>优先编码器CD4532:        8信号输入3信号输出;    输入输出均以高电平有效;    EI/EO:输入/输出使能端,均高电平有效,否则输出端均为低电平,EI为低电平时GS,EO必定是低电平, EI是1且输入均为低电平时EO输出为1,可以用于连接下一编码器的使能输入端````````````    ;    GS:编码工作状态:EI是一且至少有一个高电平输入(表明正在工作)时为1;    优先级:I7&gt;I6&gt;…&gt;I0.</p><h4 id="译码器"><a href="#译码器" class="headerlink" title="译码器"></a><strong>译码器</strong></h4><p>74x138/74x139        输入输出低电平有效        E_3高电平有效</p><img src="https://bkimg.cdn.bcebos.com/pic/e61190ef76c6a7eff649c979fdfaaf51f3de6605?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5/format,f_auto" alt="img" style="zoom:70%;"><h4 id="数据分配器"><a href="#数据分配器" class="headerlink" title="数据分配器"></a><strong>数据分配器</strong></h4><h4 id="数据选择器"><a href="#数据选择器" class="headerlink" title="数据选择器"></a><strong>数据选择器</strong></h4><h4 id="数值比较器"><a href="#数值比较器" class="headerlink" title="数值比较器"></a><strong>数值比较器</strong></h4><h4 id="基本算术电路"><a href="#基本算术电路" class="headerlink" title="基本算术电路"></a><strong>基本算术电路</strong></h4><ul><li><strong>半加器</strong></li><li><strong>全加器</strong></li><li><strong>多位数加法器(串行进位加法器/超前进位加法器)</strong></li></ul><h3 id="PLD"><a href="#PLD" class="headerlink" title="PLD"></a>PLD</h3><p>分类</p><ul><li>PROM 或阵列可编程逻辑</li><li>PLA 与或阵列均可编程逻辑</li><li>PAL与阵列可编程逻辑</li></ul><h2 id="锁存器和触发器"><a href="#锁存器和触发器" class="headerlink" title="锁存器和触发器"></a>锁存器和触发器</h2><p>细节:</p><ul><li>相对于锁存器,触发器的不同在于沿时钟边沿触发</li><li>画图时时钟信号小三角;上升沿一般用CP表示;下降沿/CP;有圆圈通常表示下降沿触发.</li></ul><p>激励方程:<br>$$<br>SR ff:Q^{n+1}=S+\overline RQ^n(SR=0)<br>$$</p><p>$$<br>Dff: Q^{n+1}=D<br>$$</p><p>$$<br>JKff:Q^{n+1}=J\overline {Q^n}+\overline KQ^n<br>$$</p><h2 id="时序逻辑电路"><a href="#时序逻辑电路" class="headerlink" title="时序逻辑电路"></a>时序逻辑电路</h2><h3 id="时序逻辑电路分析"><a href="#时序逻辑电路分析" class="headerlink" title="时序逻辑电路分析"></a>时序逻辑电路分析</h3><p>Mealy型:输出是当前状态和输入的函数</p><p>Moore型:输出是当前状态的函数</p><p>分析思路</p><ol><li>根据逻辑图写出逻辑方程<ol><li>输出方程(判断Mealy/Moore)</li><li>激励方程:每个触发器的输入驱动方程(J/K=…)</li><li>状态方程:激励方程代入触发器的特征方程得到(Q(n-1)=…)</li></ol></li><li>列出状态表_根据mealy/moore型画出对应的表—–&gt;画出状态图(图例!)/时序图</li><li>最后确定电路的逻辑功能</li></ol><h3 id="时序逻辑电路设计"><a href="#时序逻辑电路设计" class="headerlink" title="时序逻辑电路设计"></a>时序逻辑电路设计</h3><ol><li><p> 给定逻辑功能的要求（文字描述或者是波形图），</p></li><li><p>求相应的逻辑电路</p></li><li><p> 设计的一般步骤</p></li><li><p> 建立原始状态图（状态可以用易懂或易写的方式表示）和原始状态表</p></li><li><p>状态化简（在面对同输入得到同输出和同次态NS的现</p><p>Q    态是等价的)</p></li><li><p> 状态编码</p></li><li><p> 求状态方程和输出方程</p></li><li><p> 检查自启动</p></li><li><p> 选择触发器类型，求激励方程（激励表或其他方法）</p></li><li><p> 画出逻辑图</p></li><li><p>尽量要求自己设计同步时序电路，因为后面在写verilog的时候一般都用统一的时钟</p></li><li><p>另外异步时序电路输出信号质量差，工作速度低</p></li></ol><p>以上内容为期中考试主要内容，其中的逻辑电路分析和设计的重难点在期末考试中仍会涉及</p><hr><p>期末考试额外的内容：</p><ol><li>数字系统设计<ol><li>数字系统结构</li><li>算术逻辑单元</li><li>寄存器传送</li><li>具体问题求解：最大值/排序/乘法电路</li></ol></li><li>Verilog HDL</li><li>Timing Analysis &amp; Synchronization</li><li>存储器，PLD，ListProcessor</li><li>二极管</li><li>三极管</li><li>基本放大电路</li><li>集成运放</li><li>逻辑门电路</li><li>ADC和DAC</li></ol><h2 id="Verilog-HDL-FSM"><a href="#Verilog-HDL-FSM" class="headerlink" title="Verilog  HDL/FSM"></a>Verilog  HDL/FSM</h2><p>常量表示形式：</p><p>整数型&lt;+/-&gt;&lt;位宽&gt;’&lt;基数符号(D/d,B/b,O/o,H/h)&gt;&lt;数值&gt;</p><p>实数型：1·科学计数法            2·十进制计数法</p><p>符号常量定义 <code>parameter</code></p><p>数据变量类型： <code>net(wire)</code> <code>register(reg)</code></p><p>定义格式： <code>wire/reg [MSB/LSB] r1,r2,...</code></p><p>赋值语句：连续赋值语句<code>assign</code>；过程块赋值<code>inital/always</code></p><p>常用语法（过程块赋值内）<code>case/if else/begin end</code></p><p><code>模块实例化</code>1.位置映射modulename M(A,B,C)；2.名称映射modulename M(.A(a),.C(c),.B(b))——不可混用</p><p>运算符</p><ol><li>算术运算符 逐位计算</li><li>关系运算符</li><li>位运算符：~ ,&amp;,^ , | , ^~ / ~^（同或）</li><li>逻辑运算符：&amp;&amp;，！，||</li><li>位拼接符：{, , }   {n{}}</li><li>移位运算符：&gt;&gt;,&lt;&lt;,&gt;&gt;&gt;(算数右移)</li><li>缩位运算符（单目运算符）：&amp;，<del>&amp;，| ，</del>|，^, ^~, ~ ^</li><li>条件运算符：？：</li></ol><p>运算符优先级= =</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token punctuation">(</span><span class="token keyword">input</span> i<span class="token punctuation">,</span><span class="token keyword">output</span> o<span class="token punctuation">,</span><span class="token keyword">inout</span> io<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">wire</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>   <span class="token keyword">parameter</span> M<span class="token operator">=</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>   <span class="token keyword">reg</span> <span class="token punctuation">[</span>M<span class="token punctuation">:</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>   <span class="token keyword">assign</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>   modulename <span class="token function">name</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">initial</span>      <span class="token keyword">begin</span>      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>   <span class="token keyword">end</span>   <span class="token important">always @</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>      <span class="token keyword">begin</span>         <span class="token keyword">if</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>         <span class="token keyword">case</span> <span class="token punctuation">(</span>敏感表达式<span class="token punctuation">)</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>            <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">default</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>         <span class="token keyword">endcase</span>      <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用if/case语句时应该避免出现锁存器。</p><p>组合逻辑：阻塞赋值（blocking） ：‘=’块内赋值语句顺序执行</p><p>时序逻辑：非阻塞赋值（non-locking）：‘&lt;=’块内赋值语句并发进行</p><p><code>FSM</code></p><p>一段式/两段式/三段式</p><p>CS：现态；NS：次态；OUT：输出</p><p>两段式：一个时序过程描述CS，另一个组合描述NS和OUT</p><p>三段式：两个时序描述CS和OUT，一个组合过程描述NS</p><h2 id="时序逻辑电路2"><a href="#时序逻辑电路2" class="headerlink" title="时序逻辑电路2"></a>时序逻辑电路2</h2><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p>寄存器是若干具有相同外观电路结构的共享时钟和控制信号的触发器</p><p>普通寄存器/<code>移位寄存器</code></p><p>74x194:双向通用移位寄存器</p><img src="C:\Users\李\AppData\Roaming\Typora\typora-user-images\image-20211231173423377.png" alt="image-20211231173423377" style="zoom:50%;"><p>功能表：<img src="C:\Users\李\AppData\Roaming\Typora\typora-user-images\image-20211231173453305.png" alt="image-20211231173453305" style="zoom:57%;"></p><p>不添加其他逻辑门即可实现位拓展</p><p>应用：实现序列检测</p><h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><p>累计时钟脉冲次数，可以用来分频，定时，产生节拍脉冲</p><p><code>模</code>：循环遍历的有效状态数</p><p>异步递增计数器：电路简单，易于拓展，但工作效率低，不适用</p><p>同步递增计数器：<img src="C:\Users\李\AppData\Roaming\Typora\typora-user-images\image-20211231175954622.png" alt="image-20211231175954622" style="zoom:47%;"></p><p>74x161</p><img src="C:\Users\李\AppData\Roaming\Typora\typora-user-images\image-20211231180035128.png" alt="image-20211231180035128" style="zoom:50%;"><p>74x160:模10计数器，与74x161相似</p><p><code>任意进制计数器构成</code></p><p>•用N进制计数器构成 M 进制计数器</p><p>•若 M &lt; N ，可在计数过程中设法跳过 N-M 个多余状态</p><p>​    –反馈清零法，简称清零法</p><p>​    –反馈置数法，简称置数法</p><p>•若 M &gt; N ，用多片 N 进制计数器级连，配合清零 / 置数法构成</p><p><code>要注意同步清零和异步清零清零时的数值是不一致的，通常同步+1=异步，置数同理</code>——可以画状态图，异步的临界状态可以画虚线</p><p><code>用移位寄存器实现计数器</code>，如环形计数器：将串行输入与串行输出直接相连，计数状态等于寄存器的位数。</p><p>扭环型计数器：约翰孙计数器，计数状态是环形计数器的2倍</p><p>有效循环：每次状态转换只更改一位</p><img src="C:\Users\李\AppData\Roaming\Typora\typora-user-images\image-20211231182730747.png" alt="image-20211231182730747" style="zoom:57%;"><h3 id="数字系统"><a href="#数字系统" class="headerlink" title="数字系统"></a>数字系统</h3><p>开关去抖动</p><p>数字系统组成：Data Path+Control Unit</p><img src="C:\Users\李\AppData\Roaming\Typora\typora-user-images\image-20211231175222600.png" alt="image-20211231175222600" style="zoom:67%;"><p>实例：时序二进制乘法器，求最大值，排序</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模拟与数字电路&quot;&gt;&lt;a href=&quot;#模拟与数字电路&quot; class=&quot;headerlink&quot; title=&quot;模拟与数字电路&quot;&gt;&lt;/a&gt;模拟与数字电路&lt;/h1&gt;&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h2 id=&quot;2022-1-15-模拟与数字电路期末考试&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="数字电路" scheme="http://sn1987a-1.github.io/categories/%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
    
    <category term="专业课" scheme="http://sn1987a-1.github.io/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    <category term="模拟与数字电路" scheme="http://sn1987a-1.github.io/tags/%E6%A8%A1%E6%8B%9F%E4%B8%8E%E6%95%B0%E5%AD%97%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>线性筛的理解和应用</title>
    <link href="http://sn1987a-1.github.io/posts/15547.html"/>
    <id>http://sn1987a-1.github.io/posts/15547.html</id>
    <published>2021-10-24T15:43:35.000Z</published>
    <updated>2022-01-28T14:22:32.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性筛的理解和应用"><a href="#线性筛的理解和应用" class="headerlink" title="线性筛的理解和应用"></a>线性筛的理解和应用</h1><p>最近在准备相关算法竞赛，正好班里有写博客的活动，就在此记录下自己菜不成声学习的过程。&gt;v&lt;</p><p>为算出小于等于n的素数的个数，较自然也是最暴力的的方法便是对每个小于n的正整数进行判定，这样的方法显然达到最优的复杂度，暴力硬解的结果无疑是最终喜提“Time Limit Exceeded”。</p><p>为提高算法效率，就要引入“筛”的思想——主要思想是：我们选出一个数n时无论n是素数还是合数，2n,3n,..都是合数，我们无需对这类数进行是否为素数的判断。</p><h2 id="Eratosthenes-筛法-（埃拉托斯特尼筛法，简称埃氏筛）"><a href="#Eratosthenes-筛法-（埃拉托斯特尼筛法，简称埃氏筛）" class="headerlink" title="Eratosthenes 筛法 （埃拉托斯特尼筛法，简称埃氏筛）"></a><strong>Eratosthenes 筛法</strong> （埃拉托斯特尼筛法，简称埃氏筛）</h2><p>埃氏筛算法的主要思想是：如果我们从小到大考虑每个数，然后同时把当前这个数的所有（比自己大的）倍数记为合数，那么运行结束的时候没有被标记的数就是素数了。具体算法如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Eratosthenes</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  is_prime<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> is_prime<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_prime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      prime<span class="token punctuation">[</span>p<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// prime[p]是i,后置自增运算代表当前素数数量</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>           j <span class="token operator">+=</span> i<span class="token punctuation">)</span>  <span class="token comment">// 因为从 2 到 i - 1 的倍数我们之前筛过了，这里直接从 i</span>                    <span class="token comment">// 的倍数开始，提高了运行速度</span>        is_prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//是i的倍数的均不是素数</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>埃氏筛通常可以称为普通筛，结构比较简单，也比较容易理解，其核心就是对找到的素数的倍数通过一次循环进行标记，虽然要额外占用O(n)的内存空间保存标记，但非常高效地减少了程序复杂度。</p><p>我们应该注意到，埃氏筛在对数字进行标记筛选时，存在重复筛选，比如6既可以被2筛掉，又可以被3筛掉。原因：任意一个整数可以写成一些素数的乘积<br>$$<br>n=p1^ip2^jp3^k<br>$$<br>其中p1&lt;p2&lt;p3，这样这个数n能被p1,p2和p3筛掉,反复被标记，尤其在n比较大的时候，n可能有相当多个素因子，被多次标记，显然浪费了时间。</p><h2 id="Euler筛法-线性筛"><a href="#Euler筛法-线性筛" class="headerlink" title="Euler筛法(线性筛)"></a>Euler筛法(线性筛)</h2><p>基于普通筛的不足之处，Euler对其做出了修改——直观地来说，当我们用埃氏筛法对一个素数的n倍进行筛选时，若正在被标记的这个倍数已经足够大，大到超过一特定的数字后，那这个数一定有更大的素因子，能在后续过程中再次被标记，此时就可以停止循环，算法继续对下一个未标记的数进行是否为素数的判断。</p><p>通过观察不难发现，若当前正在处理n的i倍数in，i能整除n，那么i与下一个要进行筛选的数的乘积这个合数肯定会被n乘以某个数提前筛掉。因此这里的i便是我们要找的“特定的数字”，利用这一数字提前break掉循环，可以使得每个数字均被筛选一次，将时间复杂度降到最低，这也就是Euler筛的算法思想，实现代码如下所示。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  phi<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXN<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      pri<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1ll</span> <span class="token operator">*</span> i <span class="token operator">*</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> MAXN<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>      vis<span class="token punctuation">[</span>i <span class="token operator">*</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        phi<span class="token punctuation">[</span>i <span class="token operator">*</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// i % pri[j] == 0</span>        <span class="token comment">// 换言之，i 之前被 pri[j] 筛过了</span>        <span class="token comment">// 由于 pri 里面质数是从小到大的，所以 i 乘上其他的质数的结果一定会被</span>        <span class="token comment">// pri[j] 的倍数筛掉，就不需要在这里先筛一次，所以这里直接 break</span>        <span class="token comment">// 掉就好了</span>        phi<span class="token punctuation">[</span>i <span class="token operator">*</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> phi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> pri<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键之处在：if(i%prime[j]==0) break;</p><p>这句代码保证了每个数最多被筛一次，将时间复杂度降到了线性。</p><p>证：prime[]数组中的素数是递增的,当i能整除prime[j]，那么i<em>prime[j+1]这个合数肯定会被prime[j]乘以某个数筛掉。因此，这里直接break掉，将i</em>prime[j+1]及之后的给后面的数去筛。这种方法能保证每个数只被筛一遍，又能保证每个数都被筛到。</p><p>为了更好的理解，画出前面几次筛的情况:</p><p><img src="C:\Users\李\AppData\Roaming\Typora\typora-user-images\image-20211029190053110.png" alt="image-20211029190053110"></p><p>一般来说，当筛选范围n较小时，埃氏筛和欧氏筛复杂度较相近，甚至埃氏筛表现更好，但随着n的增大，欧氏筛的优越性也逐渐体现出来，可以达到埃氏筛3-4倍的速度。</p><p>参考：</p><p>1.<a href="https://www.cnblogs.com/lfri/p/11679306.html">线性筛的理解及应用 - Rogn - 博客园 (cnblogs.com)</a></p><p>2.<a href="https://blog.csdn.net/qq_41653433/article/details/88976544">线性筛_历尽千帆-CSDN博客_线性筛</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;线性筛的理解和应用&quot;&gt;&lt;a href=&quot;#线性筛的理解和应用&quot; class=&quot;headerlink&quot; title=&quot;线性筛的理解和应用&quot;&gt;&lt;/a&gt;线性筛的理解和应用&lt;/h1&gt;&lt;p&gt;最近在准备相关算法竞赛，正好班里有写博客的活动，就在此记录下自己菜不成声学习的过程。</summary>
      
    
    
    
    <category term="算法" scheme="http://sn1987a-1.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="practice" scheme="http://sn1987a-1.github.io/categories/%E7%AE%97%E6%B3%95/practice/"/>
    
    
    <category term="线性筛" scheme="http://sn1987a-1.github.io/tags/%E7%BA%BF%E6%80%A7%E7%AD%9B/"/>
    
    <category term="算法" scheme="http://sn1987a-1.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>firsttry</title>
    <link href="http://sn1987a-1.github.io/posts/undefined.html"/>
    <id>http://sn1987a-1.github.io/posts/undefined.html</id>
    <published>2021-10-23T11:46:29.000Z</published>
    <updated>2022-01-27T13:30:38.046Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo个人博客搭建教程</title>
    <link href="http://sn1987a-1.github.io/posts/15548.html"/>
    <id>http://sn1987a-1.github.io/posts/15548.html</id>
    <published>2021-10-20T13:40:51.000Z</published>
    <updated>2022-01-27T13:30:38.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hexo博客搭建教程"><a href="#hexo博客搭建教程" class="headerlink" title="hexo博客搭建教程"></a>hexo博客搭建教程</h1><h2 id="利用github生成自己的个人博客"><a href="#利用github生成自己的个人博客" class="headerlink" title="利用github生成自己的个人博客"></a>利用github生成自己的个人博客</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;hexo博客搭建教程&quot;&gt;&lt;a href=&quot;#hexo博客搭建教程&quot; class=&quot;headerlink&quot; title=&quot;hexo博客搭建教程&quot;&gt;&lt;/a&gt;hexo博客搭建教程&lt;/h1&gt;&lt;h2 id=&quot;利用github生成自己的个人博客&quot;&gt;&lt;a href=&quot;#利用gi</summary>
      
    
    
    
    <category term="教程" scheme="http://sn1987a-1.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="hexo" scheme="http://sn1987a-1.github.io/categories/%E6%95%99%E7%A8%8B/hexo/"/>
    
    
    <category term="blog" scheme="http://sn1987a-1.github.io/tags/blog/"/>
    
    <category term="hexo" scheme="http://sn1987a-1.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>something</title>
    <link href="http://sn1987a-1.github.io/posts/undefined.html"/>
    <id>http://sn1987a-1.github.io/posts/undefined.html</id>
    <published>2021-06-27T12:00:00.000Z</published>
    <updated>2022-01-27T13:30:38.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Welcome-to-GitHub-Pages"><a href="#Welcome-to-GitHub-Pages" class="headerlink" title="Welcome to GitHub Pages"></a>Welcome to GitHub Pages</h2><p>You can use the <a href="https://github.com/sn1987a-1/sn1987a-1.github.io/edit/main/index.md">editor on GitHub</a> to maintain and preview the content for your website in Markdown files.</p><p>Whenever you commit to this repository, GitHub Pages will run <a href="https://jekyllrb.com/">Jekyll</a> to rebuild the pages in your site, from the content in your Markdown files.</p><h3 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h3><p>Markdown is a lightweight and easy-to-use syntax for styling your writing. It includes conventions for</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Syntax highlighted code block<span class="token title important"><span class="token punctuation">#</span> Header 1</span><span class="token title important"><span class="token punctuation">##</span> Header 2</span><span class="token title important"><span class="token punctuation">###</span> Header 3</span><span class="token list punctuation">-</span> Bulleted<span class="token list punctuation">-</span> List<span class="token list punctuation">1.</span> Numbered<span class="token list punctuation">2.</span> List<span class="token bold"><span class="token punctuation">**</span><span class="token content">Bold</span><span class="token punctuation">**</span></span> and <span class="token italic"><span class="token punctuation">_</span><span class="token content">Italic</span><span class="token punctuation">_</span></span> and <span class="token code keyword">`Code`</span> text<span class="token url">[<span class="token content">Link</span>](url)</span> and <span class="token url">![<span class="token content">Image</span>](src)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>For more details see <a href="https://guides.github.com/features/mastering-markdown/">GitHub Flavored Markdown</a>.</p><h3 id="Jekyll-Themes"><a href="#Jekyll-Themes" class="headerlink" title="Jekyll Themes"></a>Jekyll Themes</h3><p>Your Pages site will use the layout and styles from the Jekyll theme you have selected in your <a href="https://github.com/sn1987a-1/sn1987a-1.github.io/settings/pages">repository settings</a>. The name of this theme is saved in the Jekyll <code>_config.yml</code> configuration file.</p><h3 id="Support-or-Contact"><a href="#Support-or-Contact" class="headerlink" title="Support or Contact"></a>Support or Contact</h3><p>Having trouble with Pages? Check out our <a href="https://docs.github.com/categories/github-pages-basics/">documentation</a> or <a href="https://support.github.com/contact">contact support</a> and we’ll help you sort it out.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Welcome-to-GitHub-Pages&quot;&gt;&lt;a href=&quot;#Welcome-to-GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;Welcome to GitHub Pages&quot;&gt;&lt;/a&gt;Welcome to GitHub</summary>
      
    
    
    
    
  </entry>
  
</feed>
